<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Model;

class DataExportQuery extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var string
     */
    protected $reportType;
    /**
     * @var list<string>
     */
    protected $emails;
    /**
     * @var int
     */
    protected $createdBefore;
    /**
     * @var int
     */
    protected $createdAfter;
    /**
     * @var int
     */
    protected $modifiedAfter;
    /**
     * @var string
     */
    protected $query;
    /**
     * @var string
     */
    protected $keyword;
    /**
     * @var string
     */
    protected $archived;
    /**
     * @var string
     */
    protected $linkDeeplinks;
    /**
     * @var string
     */
    protected $customBitlink;
    /**
     * @var list<string>
     */
    protected $creatingLogins;
    /**
     * @var string
     */
    protected $isCustomized;
    /**
     * @var string
     */
    protected $isGs1;
    /**
     * @var list<string>
     */
    protected $qrcTypes;
    /**
     * @var list<string>
     */
    protected $tags;
    /**
     * @var list<string>
     */
    protected $campaignIds;
    /**
     * @var string
     */
    protected $unit;
    /**
     * @var int
     */
    protected $units;
    /**
     * @var int
     */
    protected $unitReference;
    /**
     * Includes the maximum available history for the user in the report. Default is false.
     *
     * @var bool
     */
    protected $includeMaxHistory;
    /**
     * The minimum number of clicks a link must have in order to be included in the report during their max history. Default is 0 which means all links are included. For example, value of 100 means only links at least a 100 clicks during this time period (max history) will be included in the report.
     *
     * @var int
     */
    protected $maxHistoryMinimumCount;
    /**
     * Parameters for custom metrics column in the report. Each entry in the array will result in a new metrics column in the report.
     *
     * @var list<MetricsColumn>
     */
    protected $metricsColumns;

    public function getReportType(): string
    {
        return $this->reportType;
    }

    public function setReportType(string $reportType): self
    {
        $this->initialized['reportType'] = true;
        $this->reportType = $reportType;

        return $this;
    }

    /**
     * @return list<string>
     */
    public function getEmails(): array
    {
        return $this->emails;
    }

    /**
     * @param list<string> $emails
     */
    public function setEmails(array $emails): self
    {
        $this->initialized['emails'] = true;
        $this->emails = $emails;

        return $this;
    }

    public function getCreatedBefore(): int
    {
        return $this->createdBefore;
    }

    public function setCreatedBefore(int $createdBefore): self
    {
        $this->initialized['createdBefore'] = true;
        $this->createdBefore = $createdBefore;

        return $this;
    }

    public function getCreatedAfter(): int
    {
        return $this->createdAfter;
    }

    public function setCreatedAfter(int $createdAfter): self
    {
        $this->initialized['createdAfter'] = true;
        $this->createdAfter = $createdAfter;

        return $this;
    }

    public function getModifiedAfter(): int
    {
        return $this->modifiedAfter;
    }

    public function setModifiedAfter(int $modifiedAfter): self
    {
        $this->initialized['modifiedAfter'] = true;
        $this->modifiedAfter = $modifiedAfter;

        return $this;
    }

    public function getQuery(): string
    {
        return $this->query;
    }

    public function setQuery(string $query): self
    {
        $this->initialized['query'] = true;
        $this->query = $query;

        return $this;
    }

    public function getKeyword(): string
    {
        return $this->keyword;
    }

    public function setKeyword(string $keyword): self
    {
        $this->initialized['keyword'] = true;
        $this->keyword = $keyword;

        return $this;
    }

    public function getArchived(): string
    {
        return $this->archived;
    }

    public function setArchived(string $archived): self
    {
        $this->initialized['archived'] = true;
        $this->archived = $archived;

        return $this;
    }

    public function getLinkDeeplinks(): string
    {
        return $this->linkDeeplinks;
    }

    public function setLinkDeeplinks(string $linkDeeplinks): self
    {
        $this->initialized['linkDeeplinks'] = true;
        $this->linkDeeplinks = $linkDeeplinks;

        return $this;
    }

    public function getCustomBitlink(): string
    {
        return $this->customBitlink;
    }

    public function setCustomBitlink(string $customBitlink): self
    {
        $this->initialized['customBitlink'] = true;
        $this->customBitlink = $customBitlink;

        return $this;
    }

    /**
     * @return list<string>
     */
    public function getCreatingLogins(): array
    {
        return $this->creatingLogins;
    }

    /**
     * @param list<string> $creatingLogins
     */
    public function setCreatingLogins(array $creatingLogins): self
    {
        $this->initialized['creatingLogins'] = true;
        $this->creatingLogins = $creatingLogins;

        return $this;
    }

    public function getIsCustomized(): string
    {
        return $this->isCustomized;
    }

    public function setIsCustomized(string $isCustomized): self
    {
        $this->initialized['isCustomized'] = true;
        $this->isCustomized = $isCustomized;

        return $this;
    }

    public function getIsGs1(): string
    {
        return $this->isGs1;
    }

    public function setIsGs1(string $isGs1): self
    {
        $this->initialized['isGs1'] = true;
        $this->isGs1 = $isGs1;

        return $this;
    }

    /**
     * @return list<string>
     */
    public function getQrcTypes(): array
    {
        return $this->qrcTypes;
    }

    /**
     * @param list<string> $qrcTypes
     */
    public function setQrcTypes(array $qrcTypes): self
    {
        $this->initialized['qrcTypes'] = true;
        $this->qrcTypes = $qrcTypes;

        return $this;
    }

    /**
     * @return list<string>
     */
    public function getTags(): array
    {
        return $this->tags;
    }

    /**
     * @param list<string> $tags
     */
    public function setTags(array $tags): self
    {
        $this->initialized['tags'] = true;
        $this->tags = $tags;

        return $this;
    }

    /**
     * @return list<string>
     */
    public function getCampaignIds(): array
    {
        return $this->campaignIds;
    }

    /**
     * @param list<string> $campaignIds
     */
    public function setCampaignIds(array $campaignIds): self
    {
        $this->initialized['campaignIds'] = true;
        $this->campaignIds = $campaignIds;

        return $this;
    }

    public function getUnit(): string
    {
        return $this->unit;
    }

    public function setUnit(string $unit): self
    {
        $this->initialized['unit'] = true;
        $this->unit = $unit;

        return $this;
    }

    public function getUnits(): int
    {
        return $this->units;
    }

    public function setUnits(int $units): self
    {
        $this->initialized['units'] = true;
        $this->units = $units;

        return $this;
    }

    public function getUnitReference(): int
    {
        return $this->unitReference;
    }

    public function setUnitReference(int $unitReference): self
    {
        $this->initialized['unitReference'] = true;
        $this->unitReference = $unitReference;

        return $this;
    }

    /**
     * Includes the maximum available history for the user in the report. Default is false.
     */
    public function getIncludeMaxHistory(): bool
    {
        return $this->includeMaxHistory;
    }

    /**
     * Includes the maximum available history for the user in the report. Default is false.
     */
    public function setIncludeMaxHistory(bool $includeMaxHistory): self
    {
        $this->initialized['includeMaxHistory'] = true;
        $this->includeMaxHistory = $includeMaxHistory;

        return $this;
    }

    /**
     * The minimum number of clicks a link must have in order to be included in the report during their max history. Default is 0 which means all links are included. For example, value of 100 means only links at least a 100 clicks during this time period (max history) will be included in the report.
     */
    public function getMaxHistoryMinimumCount(): int
    {
        return $this->maxHistoryMinimumCount;
    }

    /**
     * The minimum number of clicks a link must have in order to be included in the report during their max history. Default is 0 which means all links are included. For example, value of 100 means only links at least a 100 clicks during this time period (max history) will be included in the report.
     */
    public function setMaxHistoryMinimumCount(int $maxHistoryMinimumCount): self
    {
        $this->initialized['maxHistoryMinimumCount'] = true;
        $this->maxHistoryMinimumCount = $maxHistoryMinimumCount;

        return $this;
    }

    /**
     * Parameters for custom metrics column in the report. Each entry in the array will result in a new metrics column in the report.
     *
     * @return list<MetricsColumn>
     */
    public function getMetricsColumns(): array
    {
        return $this->metricsColumns;
    }

    /**
     * Parameters for custom metrics column in the report. Each entry in the array will result in a new metrics column in the report.
     *
     * @param list<MetricsColumn> $metricsColumns
     */
    public function setMetricsColumns(array $metricsColumns): self
    {
        $this->initialized['metricsColumns'] = true;
        $this->metricsColumns = $metricsColumns;

        return $this;
    }
}
