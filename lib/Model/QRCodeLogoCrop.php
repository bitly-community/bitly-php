<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Model;

class QRCodeLogoCrop extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The x coordinate used to position the crop.
     *
     * @var int
     */
    protected $x;
    /**
     * The y coordinate used to position the crop.
     *
     * @var int
     */
    protected $y;
    /**
     * The width of the crop. Will instead be used as the radius for a circular crop.
     *
     * @var int
     */
    protected $w;
    /**
     * The height of the crop. Will be completely disregarded for a circular crop.
     *
     * @var int
     */
    protected $h;

    /**
     * The x coordinate used to position the crop.
     */
    public function getX(): int
    {
        return $this->x;
    }

    /**
     * The x coordinate used to position the crop.
     */
    public function setX(int $x): self
    {
        $this->initialized['x'] = true;
        $this->x = $x;

        return $this;
    }

    /**
     * The y coordinate used to position the crop.
     */
    public function getY(): int
    {
        return $this->y;
    }

    /**
     * The y coordinate used to position the crop.
     */
    public function setY(int $y): self
    {
        $this->initialized['y'] = true;
        $this->y = $y;

        return $this;
    }

    /**
     * The width of the crop. Will instead be used as the radius for a circular crop.
     */
    public function getW(): int
    {
        return $this->w;
    }

    /**
     * The width of the crop. Will instead be used as the radius for a circular crop.
     */
    public function setW(int $w): self
    {
        $this->initialized['w'] = true;
        $this->w = $w;

        return $this;
    }

    /**
     * The height of the crop. Will be completely disregarded for a circular crop.
     */
    public function getH(): int
    {
        return $this->h;
    }

    /**
     * The height of the crop. Will be completely disregarded for a circular crop.
     */
    public function setH(int $h): self
    {
        $this->initialized['h'] = true;
        $this->h = $h;

        return $this;
    }
}
