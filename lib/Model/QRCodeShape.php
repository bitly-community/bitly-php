<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Model;

class QRCodeShape extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The enclosing shape of the entire qr code. Square is the default.
     *
     * @var string
     */
    protected $id = 'square';
    /**
     * The angle from 0-360 at which the QR code's shape should be rotated.
     *
     * @var int
     */
    protected $angle = 0;
    /**
     * The outline of the QR code's shape, formatted like a CSS border shorthand.
     *
     * @var string
     */
    protected $outline = 'none';
    /**
     * Denotes how much of the container should be taken up by the QR code itself e.g. 0.7 would mean the QR code takes up 70% the container.
     *
     * @var float
     */
    protected $contentRatio = 1;

    /**
     * The enclosing shape of the entire qr code. Square is the default.
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * The enclosing shape of the entire qr code. Square is the default.
     */
    public function setId(string $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    /**
     * The angle from 0-360 at which the QR code's shape should be rotated.
     */
    public function getAngle(): int
    {
        return $this->angle;
    }

    /**
     * The angle from 0-360 at which the QR code's shape should be rotated.
     */
    public function setAngle(int $angle): self
    {
        $this->initialized['angle'] = true;
        $this->angle = $angle;

        return $this;
    }

    /**
     * The outline of the QR code's shape, formatted like a CSS border shorthand.
     */
    public function getOutline(): string
    {
        return $this->outline;
    }

    /**
     * The outline of the QR code's shape, formatted like a CSS border shorthand.
     */
    public function setOutline(string $outline): self
    {
        $this->initialized['outline'] = true;
        $this->outline = $outline;

        return $this;
    }

    /**
     * Denotes how much of the container should be taken up by the QR code itself e.g. 0.7 would mean the QR code takes up 70% the container.
     */
    public function getContentRatio(): float
    {
        return $this->contentRatio;
    }

    /**
     * Denotes how much of the container should be taken up by the QR code itself e.g. 0.7 would mean the QR code takes up 70% the container.
     */
    public function setContentRatio(float $contentRatio): self
    {
        $this->initialized['contentRatio'] = true;
        $this->contentRatio = $contentRatio;

        return $this;
    }
}
