<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Model;

class DomainRegistrarInfo extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * name of the requested domain.
     *
     * @var string
     */
    protected $domain;
    /**
     * processing status of the domain.
     *
     * @var string
     */
    protected $status;
    /**
     * whether the domain is configured to automatically renew.
     *
     * @var bool
     */
    protected $renewAuto;
    /**
     * date the domain must renew by.
     *
     * @var string
     */
    protected $renewDeadline;
    /**
     * when the domain will expire.
     *
     * @var string
     */
    protected $expires;
    /**
     * whether the domain is protected from expiration.
     *
     * @var bool
     */
    protected $expirationProtected;

    /**
     * name of the requested domain.
     */
    public function getDomain(): string
    {
        return $this->domain;
    }

    /**
     * name of the requested domain.
     */
    public function setDomain(string $domain): self
    {
        $this->initialized['domain'] = true;
        $this->domain = $domain;

        return $this;
    }

    /**
     * processing status of the domain.
     */
    public function getStatus(): string
    {
        return $this->status;
    }

    /**
     * processing status of the domain.
     */
    public function setStatus(string $status): self
    {
        $this->initialized['status'] = true;
        $this->status = $status;

        return $this;
    }

    /**
     * whether the domain is configured to automatically renew.
     */
    public function getRenewAuto(): bool
    {
        return $this->renewAuto;
    }

    /**
     * whether the domain is configured to automatically renew.
     */
    public function setRenewAuto(bool $renewAuto): self
    {
        $this->initialized['renewAuto'] = true;
        $this->renewAuto = $renewAuto;

        return $this;
    }

    /**
     * date the domain must renew by.
     */
    public function getRenewDeadline(): string
    {
        return $this->renewDeadline;
    }

    /**
     * date the domain must renew by.
     */
    public function setRenewDeadline(string $renewDeadline): self
    {
        $this->initialized['renewDeadline'] = true;
        $this->renewDeadline = $renewDeadline;

        return $this;
    }

    /**
     * when the domain will expire.
     */
    public function getExpires(): string
    {
        return $this->expires;
    }

    /**
     * when the domain will expire.
     */
    public function setExpires(string $expires): self
    {
        $this->initialized['expires'] = true;
        $this->expires = $expires;

        return $this;
    }

    /**
     * whether the domain is protected from expiration.
     */
    public function getExpirationProtected(): bool
    {
        return $this->expirationProtected;
    }

    /**
     * whether the domain is protected from expiration.
     */
    public function setExpirationProtected(bool $expirationProtected): self
    {
        $this->initialized['expirationProtected'] = true;
        $this->expirationProtected = $expirationProtected;

        return $this;
    }
}
