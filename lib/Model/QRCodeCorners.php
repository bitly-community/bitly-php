<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Model;

class QRCodeCorners extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Represents one corner, both inner and outer, of a QR code, with color and shape values.
     *
     * @var QRCodeCorner
     */
    protected $corner1;
    /**
     * Represents one corner, both inner and outer, of a QR code, with color and shape values.
     *
     * @var QRCodeCorner
     */
    protected $corner2;
    /**
     * Represents one corner, both inner and outer, of a QR code, with color and shape values.
     *
     * @var QRCodeCorner
     */
    protected $corner3;

    /**
     * Represents one corner, both inner and outer, of a QR code, with color and shape values.
     */
    public function getCorner1(): QRCodeCorner
    {
        return $this->corner1;
    }

    /**
     * Represents one corner, both inner and outer, of a QR code, with color and shape values.
     */
    public function setCorner1(QRCodeCorner $corner1): self
    {
        $this->initialized['corner1'] = true;
        $this->corner1 = $corner1;

        return $this;
    }

    /**
     * Represents one corner, both inner and outer, of a QR code, with color and shape values.
     */
    public function getCorner2(): QRCodeCorner
    {
        return $this->corner2;
    }

    /**
     * Represents one corner, both inner and outer, of a QR code, with color and shape values.
     */
    public function setCorner2(QRCodeCorner $corner2): self
    {
        $this->initialized['corner2'] = true;
        $this->corner2 = $corner2;

        return $this;
    }

    /**
     * Represents one corner, both inner and outer, of a QR code, with color and shape values.
     */
    public function getCorner3(): QRCodeCorner
    {
        return $this->corner3;
    }

    /**
     * Represents one corner, both inner and outer, of a QR code, with color and shape values.
     */
    public function setCorner3(QRCodeCorner $corner3): self
    {
        $this->initialized['corner3'] = true;
        $this->corner3 = $corner3;

        return $this;
    }
}
