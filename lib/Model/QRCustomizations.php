<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Model;

class QRCustomizations extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * A color denoted in hexadecimal format ei. "1133ff".
     *
     * @var string
     */
    protected $color;
    /**
     * Removes the Bitly logo from the center of the generated QR image.
     *
     * @var bool
     */
    protected $excludeBitlyLogo;
    /**
     * Determines the image format of the returned QR code.
     *
     * @var string
     */
    protected $imageFormat = 'png';
    /**
     * Logo must first be uploaded through Bitly's QR Code Modal located on the "All links" page. Once created, a call to "Retrieve a QR Code" with specified bitlink will return the auto-generated "logo_image_guid".
     *
     * @var string
     */
    protected $logoImageGuid;
    /**
     * Determine whether to hide the QR code. Passing true will hide the QR code.
     *
     * @var bool
     */
    protected $isHidden;

    /**
     * A color denoted in hexadecimal format ei. "1133ff".
     */
    public function getColor(): string
    {
        return $this->color;
    }

    /**
     * A color denoted in hexadecimal format ei. "1133ff".
     */
    public function setColor(string $color): self
    {
        $this->initialized['color'] = true;
        $this->color = $color;

        return $this;
    }

    /**
     * Removes the Bitly logo from the center of the generated QR image.
     */
    public function getExcludeBitlyLogo(): bool
    {
        return $this->excludeBitlyLogo;
    }

    /**
     * Removes the Bitly logo from the center of the generated QR image.
     */
    public function setExcludeBitlyLogo(bool $excludeBitlyLogo): self
    {
        $this->initialized['excludeBitlyLogo'] = true;
        $this->excludeBitlyLogo = $excludeBitlyLogo;

        return $this;
    }

    /**
     * Determines the image format of the returned QR code.
     */
    public function getImageFormat(): string
    {
        return $this->imageFormat;
    }

    /**
     * Determines the image format of the returned QR code.
     */
    public function setImageFormat(string $imageFormat): self
    {
        $this->initialized['imageFormat'] = true;
        $this->imageFormat = $imageFormat;

        return $this;
    }

    /**
     * Logo must first be uploaded through Bitly's QR Code Modal located on the "All links" page. Once created, a call to "Retrieve a QR Code" with specified bitlink will return the auto-generated "logo_image_guid".
     */
    public function getLogoImageGuid(): string
    {
        return $this->logoImageGuid;
    }

    /**
     * Logo must first be uploaded through Bitly's QR Code Modal located on the "All links" page. Once created, a call to "Retrieve a QR Code" with specified bitlink will return the auto-generated "logo_image_guid".
     */
    public function setLogoImageGuid(string $logoImageGuid): self
    {
        $this->initialized['logoImageGuid'] = true;
        $this->logoImageGuid = $logoImageGuid;

        return $this;
    }

    /**
     * Determine whether to hide the QR code. Passing true will hide the QR code.
     */
    public function getIsHidden(): bool
    {
        return $this->isHidden;
    }

    /**
     * Determine whether to hide the QR code. Passing true will hide the QR code.
     */
    public function setIsHidden(bool $isHidden): self
    {
        $this->initialized['isHidden'] = true;
        $this->isHidden = $isHidden;

        return $this;
    }
}
