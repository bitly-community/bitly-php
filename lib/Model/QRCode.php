<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Model;

class QRCode extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The QR code's id, as a guid.
     *
     * @var string
     */
    protected $qrcodeId;
    /**
     * Options for customizing a QR Code's appearance.
     *
     * @var QRCodeCustomizations
     */
    protected $renderCustomizations;
    /**
     * A boolean representing if any of the QR code's customization values have been changed from their default setting.
     *
     * @var bool
     */
    protected $isCustomized;
    /**
     * The serialized string of the QR code's content.
     *
     * @var string
     */
    protected $serializedContent;
    /**
     * The type of dynamic/static content the QR serves, e.g. Link In Bio page, micro site, bitlink, email, text, Wifi, etc.
     *
     * @var string
     */
    protected $qrCodeType;
    /**
     * ISO_TIMESTAMP.
     *
     * @var string
     */
    protected $created;
    /**
     * ISO_TIMESTAMP.
     *
     * @var string
     */
    protected $modified;
    /**
     * The unix epoch time when the QR code was created. This field will be deprecated soon. Use created instead.
     *
     * @var int
     */
    protected $createdTs;
    /**
     * The unix epoch time when the QR code was updated. Use modified instead of this field. Deprecation soon.
     *
     * @var int
     */
    protected $modifiedTs;
    /**
     * The QR code's svg image data as a data uri.
     *
     * @var string
     */
    protected $svg;
    /**
     * An object containing relevant properties for dynamic QR codes, i.e. ones that are linked to a bitlink.
     *
     * @var QRCodeDynamic
     */
    protected $dynamicContent;
    /**
     * The QR code's version, error correction, and mask values.
     *
     * @var QRCodeSpecSettings
     */
    protected $specSettings;
    /**
     * Contains GS1 related metadata.
     *
     * @var GS1Metadata
     */
    protected $gs1;

    /**
     * The QR code's id, as a guid.
     */
    public function getQrcodeId(): string
    {
        return $this->qrcodeId;
    }

    /**
     * The QR code's id, as a guid.
     */
    public function setQrcodeId(string $qrcodeId): self
    {
        $this->initialized['qrcodeId'] = true;
        $this->qrcodeId = $qrcodeId;

        return $this;
    }

    /**
     * Options for customizing a QR Code's appearance.
     */
    public function getRenderCustomizations(): QRCodeCustomizations
    {
        return $this->renderCustomizations;
    }

    /**
     * Options for customizing a QR Code's appearance.
     */
    public function setRenderCustomizations(QRCodeCustomizations $renderCustomizations): self
    {
        $this->initialized['renderCustomizations'] = true;
        $this->renderCustomizations = $renderCustomizations;

        return $this;
    }

    /**
     * A boolean representing if any of the QR code's customization values have been changed from their default setting.
     */
    public function getIsCustomized(): bool
    {
        return $this->isCustomized;
    }

    /**
     * A boolean representing if any of the QR code's customization values have been changed from their default setting.
     */
    public function setIsCustomized(bool $isCustomized): self
    {
        $this->initialized['isCustomized'] = true;
        $this->isCustomized = $isCustomized;

        return $this;
    }

    /**
     * The serialized string of the QR code's content.
     */
    public function getSerializedContent(): string
    {
        return $this->serializedContent;
    }

    /**
     * The serialized string of the QR code's content.
     */
    public function setSerializedContent(string $serializedContent): self
    {
        $this->initialized['serializedContent'] = true;
        $this->serializedContent = $serializedContent;

        return $this;
    }

    /**
     * The type of dynamic/static content the QR serves, e.g. Link In Bio page, micro site, bitlink, email, text, Wifi, etc.
     */
    public function getQrCodeType(): string
    {
        return $this->qrCodeType;
    }

    /**
     * The type of dynamic/static content the QR serves, e.g. Link In Bio page, micro site, bitlink, email, text, Wifi, etc.
     */
    public function setQrCodeType(string $qrCodeType): self
    {
        $this->initialized['qrCodeType'] = true;
        $this->qrCodeType = $qrCodeType;

        return $this;
    }

    /**
     * ISO_TIMESTAMP.
     */
    public function getCreated(): string
    {
        return $this->created;
    }

    /**
     * ISO_TIMESTAMP.
     */
    public function setCreated(string $created): self
    {
        $this->initialized['created'] = true;
        $this->created = $created;

        return $this;
    }

    /**
     * ISO_TIMESTAMP.
     */
    public function getModified(): string
    {
        return $this->modified;
    }

    /**
     * ISO_TIMESTAMP.
     */
    public function setModified(string $modified): self
    {
        $this->initialized['modified'] = true;
        $this->modified = $modified;

        return $this;
    }

    /**
     * The unix epoch time when the QR code was created. This field will be deprecated soon. Use created instead.
     */
    public function getCreatedTs(): int
    {
        return $this->createdTs;
    }

    /**
     * The unix epoch time when the QR code was created. This field will be deprecated soon. Use created instead.
     */
    public function setCreatedTs(int $createdTs): self
    {
        $this->initialized['createdTs'] = true;
        $this->createdTs = $createdTs;

        return $this;
    }

    /**
     * The unix epoch time when the QR code was updated. Use modified instead of this field. Deprecation soon.
     */
    public function getModifiedTs(): int
    {
        return $this->modifiedTs;
    }

    /**
     * The unix epoch time when the QR code was updated. Use modified instead of this field. Deprecation soon.
     */
    public function setModifiedTs(int $modifiedTs): self
    {
        $this->initialized['modifiedTs'] = true;
        $this->modifiedTs = $modifiedTs;

        return $this;
    }

    /**
     * The QR code's svg image data as a data uri.
     */
    public function getSvg(): string
    {
        return $this->svg;
    }

    /**
     * The QR code's svg image data as a data uri.
     */
    public function setSvg(string $svg): self
    {
        $this->initialized['svg'] = true;
        $this->svg = $svg;

        return $this;
    }

    /**
     * An object containing relevant properties for dynamic QR codes, i.e. ones that are linked to a bitlink.
     */
    public function getDynamicContent(): QRCodeDynamic
    {
        return $this->dynamicContent;
    }

    /**
     * An object containing relevant properties for dynamic QR codes, i.e. ones that are linked to a bitlink.
     */
    public function setDynamicContent(QRCodeDynamic $dynamicContent): self
    {
        $this->initialized['dynamicContent'] = true;
        $this->dynamicContent = $dynamicContent;

        return $this;
    }

    /**
     * The QR code's version, error correction, and mask values.
     */
    public function getSpecSettings(): QRCodeSpecSettings
    {
        return $this->specSettings;
    }

    /**
     * The QR code's version, error correction, and mask values.
     */
    public function setSpecSettings(QRCodeSpecSettings $specSettings): self
    {
        $this->initialized['specSettings'] = true;
        $this->specSettings = $specSettings;

        return $this;
    }

    /**
     * Contains GS1 related metadata.
     */
    public function getGs1(): GS1Metadata
    {
        return $this->gs1;
    }

    /**
     * Contains GS1 related metadata.
     */
    public function setGs1(GS1Metadata $gs1): self
    {
        $this->initialized['gs1'] = true;
        $this->gs1 = $gs1;

        return $this;
    }
}
