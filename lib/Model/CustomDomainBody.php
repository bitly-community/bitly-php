<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Model;

class CustomDomainBody extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var string
     */
    protected $customDomain;
    /**
     * @var bool
     */
    protected $isActive;
    /**
     * @var list<string>
     */
    protected $groupGuids;
    /**
     * @var string
     */
    protected $sslConfigurationError;
    /**
     * @var string
     */
    protected $configurationLastCheckTs;
    /**
     * @var string
     */
    protected $rootRedirect;
    /**
     * @var bool
     */
    protected $httpsBitlinks;
    /**
     * @var bool
     */
    protected $sslAutoconfigureError;
    /**
     * @var bool
     */
    protected $httpsEnabled;
    /**
     * @var bool
     */
    protected $hstsEnabled;
    /**
     * @var int
     */
    protected $created;
    /**
     * @var string
     */
    protected $wildcardRedirect;
    /**
     * @var string
     */
    protected $validationStatus;
    /**
     * @var string
     */
    protected $validationError;
    /**
     * @var list<MinimalDeeplinkApp>
     */
    protected $deeplinkApps;
    /**
     * @var bool
     */
    protected $upgradeInsecureRequests;
    /**
     * SSL Certification.
     *
     * @var PublicSSLCert
     */
    protected $sslCert;

    public function getCustomDomain(): string
    {
        return $this->customDomain;
    }

    public function setCustomDomain(string $customDomain): self
    {
        $this->initialized['customDomain'] = true;
        $this->customDomain = $customDomain;

        return $this;
    }

    public function getIsActive(): bool
    {
        return $this->isActive;
    }

    public function setIsActive(bool $isActive): self
    {
        $this->initialized['isActive'] = true;
        $this->isActive = $isActive;

        return $this;
    }

    /**
     * @return list<string>
     */
    public function getGroupGuids(): array
    {
        return $this->groupGuids;
    }

    /**
     * @param list<string> $groupGuids
     */
    public function setGroupGuids(array $groupGuids): self
    {
        $this->initialized['groupGuids'] = true;
        $this->groupGuids = $groupGuids;

        return $this;
    }

    public function getSslConfigurationError(): string
    {
        return $this->sslConfigurationError;
    }

    public function setSslConfigurationError(string $sslConfigurationError): self
    {
        $this->initialized['sslConfigurationError'] = true;
        $this->sslConfigurationError = $sslConfigurationError;

        return $this;
    }

    public function getConfigurationLastCheckTs(): string
    {
        return $this->configurationLastCheckTs;
    }

    public function setConfigurationLastCheckTs(string $configurationLastCheckTs): self
    {
        $this->initialized['configurationLastCheckTs'] = true;
        $this->configurationLastCheckTs = $configurationLastCheckTs;

        return $this;
    }

    public function getRootRedirect(): string
    {
        return $this->rootRedirect;
    }

    public function setRootRedirect(string $rootRedirect): self
    {
        $this->initialized['rootRedirect'] = true;
        $this->rootRedirect = $rootRedirect;

        return $this;
    }

    public function getHttpsBitlinks(): bool
    {
        return $this->httpsBitlinks;
    }

    public function setHttpsBitlinks(bool $httpsBitlinks): self
    {
        $this->initialized['httpsBitlinks'] = true;
        $this->httpsBitlinks = $httpsBitlinks;

        return $this;
    }

    public function getSslAutoconfigureError(): bool
    {
        return $this->sslAutoconfigureError;
    }

    public function setSslAutoconfigureError(bool $sslAutoconfigureError): self
    {
        $this->initialized['sslAutoconfigureError'] = true;
        $this->sslAutoconfigureError = $sslAutoconfigureError;

        return $this;
    }

    public function getHttpsEnabled(): bool
    {
        return $this->httpsEnabled;
    }

    public function setHttpsEnabled(bool $httpsEnabled): self
    {
        $this->initialized['httpsEnabled'] = true;
        $this->httpsEnabled = $httpsEnabled;

        return $this;
    }

    public function getHstsEnabled(): bool
    {
        return $this->hstsEnabled;
    }

    public function setHstsEnabled(bool $hstsEnabled): self
    {
        $this->initialized['hstsEnabled'] = true;
        $this->hstsEnabled = $hstsEnabled;

        return $this;
    }

    public function getCreated(): int
    {
        return $this->created;
    }

    public function setCreated(int $created): self
    {
        $this->initialized['created'] = true;
        $this->created = $created;

        return $this;
    }

    public function getWildcardRedirect(): string
    {
        return $this->wildcardRedirect;
    }

    public function setWildcardRedirect(string $wildcardRedirect): self
    {
        $this->initialized['wildcardRedirect'] = true;
        $this->wildcardRedirect = $wildcardRedirect;

        return $this;
    }

    public function getValidationStatus(): string
    {
        return $this->validationStatus;
    }

    public function setValidationStatus(string $validationStatus): self
    {
        $this->initialized['validationStatus'] = true;
        $this->validationStatus = $validationStatus;

        return $this;
    }

    public function getValidationError(): string
    {
        return $this->validationError;
    }

    public function setValidationError(string $validationError): self
    {
        $this->initialized['validationError'] = true;
        $this->validationError = $validationError;

        return $this;
    }

    /**
     * @return list<MinimalDeeplinkApp>
     */
    public function getDeeplinkApps(): array
    {
        return $this->deeplinkApps;
    }

    /**
     * @param list<MinimalDeeplinkApp> $deeplinkApps
     */
    public function setDeeplinkApps(array $deeplinkApps): self
    {
        $this->initialized['deeplinkApps'] = true;
        $this->deeplinkApps = $deeplinkApps;

        return $this;
    }

    public function getUpgradeInsecureRequests(): bool
    {
        return $this->upgradeInsecureRequests;
    }

    public function setUpgradeInsecureRequests(bool $upgradeInsecureRequests): self
    {
        $this->initialized['upgradeInsecureRequests'] = true;
        $this->upgradeInsecureRequests = $upgradeInsecureRequests;

        return $this;
    }

    /**
     * SSL Certification.
     */
    public function getSslCert(): PublicSSLCert
    {
        return $this->sslCert;
    }

    /**
     * SSL Certification.
     */
    public function setSslCert(PublicSSLCert $sslCert): self
    {
        $this->initialized['sslCert'] = true;
        $this->sslCert = $sslCert;

        return $this;
    }
}
