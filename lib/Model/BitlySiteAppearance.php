<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Model;

class BitlySiteAppearance extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var int
     */
    protected $layoutV2;
    /**
     * @var BitlySiteHeaderAppearance
     */
    protected $headerAppearance;
    /**
     * @var int
     */
    protected $themeId;
    /**
     * @var bool
     */
    protected $hideBitlyLogo;
    /**
     * @var string
     */
    protected $layout;
    /**
     * @var string
     */
    protected $font;
    /**
     * Enum of style preference values on a Bitly Site.
     *
     * @var string
     */
    protected $stylePreference;
    /**
     * @var string
     */
    protected $backgroundColor;
    /**
     * @var string
     */
    protected $bottomBackgroundColor;
    /**
     * @var string
     */
    protected $textColor;
    /**
     * @var string
     */
    protected $descriptionColor;
    /**
     * @var string
     */
    protected $backgroundPreference;
    /**
     * Available image alignment types for Site background images.
     *
     * @var string
     */
    protected $backgroundImageAlignment;
    /**
     * @var string
     */
    protected $backgroundImageUrl;
    /**
     * @var string
     */
    protected $backgroundImageGuid;
    /**
     * @var string
     */
    protected $avatarImageUrl;
    /**
     * @var string
     */
    protected $avatarImageGuid;
    /**
     * @var string
     */
    protected $defaultButtonBackgroundColor;
    /**
     * @var string
     */
    protected $defaultButtonTextColor;
    /**
     * @var string
     */
    protected $defaultButtonShape;
    /**
     * @var string
     */
    protected $defaultButtonShadow;
    /**
     * @var string
     */
    protected $defaultSocialIconColor;
    /**
     * @var string
     */
    protected $defaultSocialIconLayout;
    /**
     * @var string
     */
    protected $defaultSocialIconPosition;

    public function getLayoutV2(): int
    {
        return $this->layoutV2;
    }

    public function setLayoutV2(int $layoutV2): self
    {
        $this->initialized['layoutV2'] = true;
        $this->layoutV2 = $layoutV2;

        return $this;
    }

    public function getHeaderAppearance(): BitlySiteHeaderAppearance
    {
        return $this->headerAppearance;
    }

    public function setHeaderAppearance(BitlySiteHeaderAppearance $headerAppearance): self
    {
        $this->initialized['headerAppearance'] = true;
        $this->headerAppearance = $headerAppearance;

        return $this;
    }

    public function getThemeId(): int
    {
        return $this->themeId;
    }

    public function setThemeId(int $themeId): self
    {
        $this->initialized['themeId'] = true;
        $this->themeId = $themeId;

        return $this;
    }

    public function getHideBitlyLogo(): bool
    {
        return $this->hideBitlyLogo;
    }

    public function setHideBitlyLogo(bool $hideBitlyLogo): self
    {
        $this->initialized['hideBitlyLogo'] = true;
        $this->hideBitlyLogo = $hideBitlyLogo;

        return $this;
    }

    public function getLayout(): string
    {
        return $this->layout;
    }

    public function setLayout(string $layout): self
    {
        $this->initialized['layout'] = true;
        $this->layout = $layout;

        return $this;
    }

    public function getFont(): string
    {
        return $this->font;
    }

    public function setFont(string $font): self
    {
        $this->initialized['font'] = true;
        $this->font = $font;

        return $this;
    }

    /**
     * Enum of style preference values on a Bitly Site.
     */
    public function getStylePreference(): string
    {
        return $this->stylePreference;
    }

    /**
     * Enum of style preference values on a Bitly Site.
     */
    public function setStylePreference(string $stylePreference): self
    {
        $this->initialized['stylePreference'] = true;
        $this->stylePreference = $stylePreference;

        return $this;
    }

    public function getBackgroundColor(): string
    {
        return $this->backgroundColor;
    }

    public function setBackgroundColor(string $backgroundColor): self
    {
        $this->initialized['backgroundColor'] = true;
        $this->backgroundColor = $backgroundColor;

        return $this;
    }

    public function getBottomBackgroundColor(): string
    {
        return $this->bottomBackgroundColor;
    }

    public function setBottomBackgroundColor(string $bottomBackgroundColor): self
    {
        $this->initialized['bottomBackgroundColor'] = true;
        $this->bottomBackgroundColor = $bottomBackgroundColor;

        return $this;
    }

    public function getTextColor(): string
    {
        return $this->textColor;
    }

    public function setTextColor(string $textColor): self
    {
        $this->initialized['textColor'] = true;
        $this->textColor = $textColor;

        return $this;
    }

    public function getDescriptionColor(): string
    {
        return $this->descriptionColor;
    }

    public function setDescriptionColor(string $descriptionColor): self
    {
        $this->initialized['descriptionColor'] = true;
        $this->descriptionColor = $descriptionColor;

        return $this;
    }

    public function getBackgroundPreference(): string
    {
        return $this->backgroundPreference;
    }

    public function setBackgroundPreference(string $backgroundPreference): self
    {
        $this->initialized['backgroundPreference'] = true;
        $this->backgroundPreference = $backgroundPreference;

        return $this;
    }

    /**
     * Available image alignment types for Site background images.
     */
    public function getBackgroundImageAlignment(): string
    {
        return $this->backgroundImageAlignment;
    }

    /**
     * Available image alignment types for Site background images.
     */
    public function setBackgroundImageAlignment(string $backgroundImageAlignment): self
    {
        $this->initialized['backgroundImageAlignment'] = true;
        $this->backgroundImageAlignment = $backgroundImageAlignment;

        return $this;
    }

    public function getBackgroundImageUrl(): string
    {
        return $this->backgroundImageUrl;
    }

    public function setBackgroundImageUrl(string $backgroundImageUrl): self
    {
        $this->initialized['backgroundImageUrl'] = true;
        $this->backgroundImageUrl = $backgroundImageUrl;

        return $this;
    }

    public function getBackgroundImageGuid(): string
    {
        return $this->backgroundImageGuid;
    }

    public function setBackgroundImageGuid(string $backgroundImageGuid): self
    {
        $this->initialized['backgroundImageGuid'] = true;
        $this->backgroundImageGuid = $backgroundImageGuid;

        return $this;
    }

    public function getAvatarImageUrl(): string
    {
        return $this->avatarImageUrl;
    }

    public function setAvatarImageUrl(string $avatarImageUrl): self
    {
        $this->initialized['avatarImageUrl'] = true;
        $this->avatarImageUrl = $avatarImageUrl;

        return $this;
    }

    public function getAvatarImageGuid(): string
    {
        return $this->avatarImageGuid;
    }

    public function setAvatarImageGuid(string $avatarImageGuid): self
    {
        $this->initialized['avatarImageGuid'] = true;
        $this->avatarImageGuid = $avatarImageGuid;

        return $this;
    }

    public function getDefaultButtonBackgroundColor(): string
    {
        return $this->defaultButtonBackgroundColor;
    }

    public function setDefaultButtonBackgroundColor(string $defaultButtonBackgroundColor): self
    {
        $this->initialized['defaultButtonBackgroundColor'] = true;
        $this->defaultButtonBackgroundColor = $defaultButtonBackgroundColor;

        return $this;
    }

    public function getDefaultButtonTextColor(): string
    {
        return $this->defaultButtonTextColor;
    }

    public function setDefaultButtonTextColor(string $defaultButtonTextColor): self
    {
        $this->initialized['defaultButtonTextColor'] = true;
        $this->defaultButtonTextColor = $defaultButtonTextColor;

        return $this;
    }

    public function getDefaultButtonShape(): string
    {
        return $this->defaultButtonShape;
    }

    public function setDefaultButtonShape(string $defaultButtonShape): self
    {
        $this->initialized['defaultButtonShape'] = true;
        $this->defaultButtonShape = $defaultButtonShape;

        return $this;
    }

    public function getDefaultButtonShadow(): string
    {
        return $this->defaultButtonShadow;
    }

    public function setDefaultButtonShadow(string $defaultButtonShadow): self
    {
        $this->initialized['defaultButtonShadow'] = true;
        $this->defaultButtonShadow = $defaultButtonShadow;

        return $this;
    }

    public function getDefaultSocialIconColor(): string
    {
        return $this->defaultSocialIconColor;
    }

    public function setDefaultSocialIconColor(string $defaultSocialIconColor): self
    {
        $this->initialized['defaultSocialIconColor'] = true;
        $this->defaultSocialIconColor = $defaultSocialIconColor;

        return $this;
    }

    public function getDefaultSocialIconLayout(): string
    {
        return $this->defaultSocialIconLayout;
    }

    public function setDefaultSocialIconLayout(string $defaultSocialIconLayout): self
    {
        $this->initialized['defaultSocialIconLayout'] = true;
        $this->defaultSocialIconLayout = $defaultSocialIconLayout;

        return $this;
    }

    public function getDefaultSocialIconPosition(): string
    {
        return $this->defaultSocialIconPosition;
    }

    public function setDefaultSocialIconPosition(string $defaultSocialIconPosition): self
    {
        $this->initialized['defaultSocialIconPosition'] = true;
        $this->defaultSocialIconPosition = $defaultSocialIconPosition;

        return $this;
    }
}
