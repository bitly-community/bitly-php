<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Model;

class CreateQRCodeRequest extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var string
     */
    protected $title;
    /**
     * @var string
     */
    protected $groupGuid;
    /**
     * Options for customizing a QR Code's appearance.
     *
     * @var QRCodeCustomizations
     */
    protected $renderCustomizations;
    /**
     * A boolean representing if any of the QR code's customization values have been changed from their default setting.
     *
     * @var bool
     */
    protected $isCustomized;
    /**
     * The type of dynamic/static content the QR serves, e.g. Link In Bio page, micro site, bitlink, email, text, Wifi, etc.
     *
     * @var string
     */
    protected $qrCodeType;
    /**
     * An object containing relevant properties for dynamic QR codes, i.e. ones that are linked to a bitlink.
     *
     * @var QRCodeDynamic
     */
    protected $dynamicContent;
    /**
     * An object containing relevant properties for static QR codes, i.e. ones that are NOT linked to a bitlink.
     *
     * @var QRCodeStatic
     */
    protected $staticContent;
    /**
     * Determines the image format of the returned QR code.
     *
     * @var string
     */
    protected $format = 'png';
    /**
     * Contains GS1 related metadata.
     *
     * @var GS1Metadata
     */
    protected $gs1;

    public function getTitle(): string
    {
        return $this->title;
    }

    public function setTitle(string $title): self
    {
        $this->initialized['title'] = true;
        $this->title = $title;

        return $this;
    }

    public function getGroupGuid(): string
    {
        return $this->groupGuid;
    }

    public function setGroupGuid(string $groupGuid): self
    {
        $this->initialized['groupGuid'] = true;
        $this->groupGuid = $groupGuid;

        return $this;
    }

    /**
     * Options for customizing a QR Code's appearance.
     */
    public function getRenderCustomizations(): QRCodeCustomizations
    {
        return $this->renderCustomizations;
    }

    /**
     * Options for customizing a QR Code's appearance.
     */
    public function setRenderCustomizations(QRCodeCustomizations $renderCustomizations): self
    {
        $this->initialized['renderCustomizations'] = true;
        $this->renderCustomizations = $renderCustomizations;

        return $this;
    }

    /**
     * A boolean representing if any of the QR code's customization values have been changed from their default setting.
     */
    public function getIsCustomized(): bool
    {
        return $this->isCustomized;
    }

    /**
     * A boolean representing if any of the QR code's customization values have been changed from their default setting.
     */
    public function setIsCustomized(bool $isCustomized): self
    {
        $this->initialized['isCustomized'] = true;
        $this->isCustomized = $isCustomized;

        return $this;
    }

    /**
     * The type of dynamic/static content the QR serves, e.g. Link In Bio page, micro site, bitlink, email, text, Wifi, etc.
     */
    public function getQrCodeType(): string
    {
        return $this->qrCodeType;
    }

    /**
     * The type of dynamic/static content the QR serves, e.g. Link In Bio page, micro site, bitlink, email, text, Wifi, etc.
     */
    public function setQrCodeType(string $qrCodeType): self
    {
        $this->initialized['qrCodeType'] = true;
        $this->qrCodeType = $qrCodeType;

        return $this;
    }

    /**
     * An object containing relevant properties for dynamic QR codes, i.e. ones that are linked to a bitlink.
     */
    public function getDynamicContent(): QRCodeDynamic
    {
        return $this->dynamicContent;
    }

    /**
     * An object containing relevant properties for dynamic QR codes, i.e. ones that are linked to a bitlink.
     */
    public function setDynamicContent(QRCodeDynamic $dynamicContent): self
    {
        $this->initialized['dynamicContent'] = true;
        $this->dynamicContent = $dynamicContent;

        return $this;
    }

    /**
     * An object containing relevant properties for static QR codes, i.e. ones that are NOT linked to a bitlink.
     */
    public function getStaticContent(): QRCodeStatic
    {
        return $this->staticContent;
    }

    /**
     * An object containing relevant properties for static QR codes, i.e. ones that are NOT linked to a bitlink.
     */
    public function setStaticContent(QRCodeStatic $staticContent): self
    {
        $this->initialized['staticContent'] = true;
        $this->staticContent = $staticContent;

        return $this;
    }

    /**
     * Determines the image format of the returned QR code.
     */
    public function getFormat(): string
    {
        return $this->format;
    }

    /**
     * Determines the image format of the returned QR code.
     */
    public function setFormat(string $format): self
    {
        $this->initialized['format'] = true;
        $this->format = $format;

        return $this;
    }

    /**
     * Contains GS1 related metadata.
     */
    public function getGs1(): GS1Metadata
    {
        return $this->gs1;
    }

    /**
     * Contains GS1 related metadata.
     */
    public function setGs1(GS1Metadata $gs1): self
    {
        $this->initialized['gs1'] = true;
        $this->gs1 = $gs1;

        return $this;
    }
}
