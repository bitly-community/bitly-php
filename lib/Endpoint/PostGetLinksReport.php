<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Endpoint;

class PostGetLinksReport extends \Bitly\Runtime\Client\BaseEndpoint implements \Bitly\Runtime\Client\Endpoint
{
    use \Bitly\Runtime\Client\EndpointTrait;
    protected $group_guid;
    protected $accept;

    /**
     * post to build a links report.
     *
     * @param string $groupGuid A GUID for a Bitly group
     * @param array  $accept    Accept content header application/json|text/csv
     */
    public function __construct(string $groupGuid, \Bitly\Model\LinksReportRequestBody $requestBody, array $accept = [])
    {
        $this->group_guid = $groupGuid;
        $this->body = $requestBody;
        $this->accept = $accept;
    }

    public function getMethod(): string
    {
        return 'POST';
    }

    public function getUri(): string
    {
        return str_replace(['{group_guid}'], [$this->group_guid], '/groups/{group_guid}/links_report');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        if ($this->body instanceof \Bitly\Model\LinksReportRequestBody) {
            return [['Content-Type' => ['application/json']], $serializer->serialize($this->body, 'json')];
        }

        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        if (empty($this->accept)) {
            return ['Accept' => ['application/json', 'text/csv']];
        }

        return $this->accept;
    }

    /**
     * @return \Bitly\Model\LinksReportRequestResponse|null
     *
     * @throws \Bitly\Exception\PostGetLinksReportBadRequestException
     * @throws \Bitly\Exception\PostGetLinksReportPaymentRequiredException
     * @throws \Bitly\Exception\PostGetLinksReportForbiddenException
     * @throws \Bitly\Exception\PostGetLinksReportUnprocessableEntityException
     * @throws \Bitly\Exception\PostGetLinksReportInternalServerErrorException
     * @throws \Bitly\Exception\PostGetLinksReportServiceUnavailableException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return $serializer->deserialize($body, 'Bitly\Model\LinksReportRequestResponse', 'json');
        }
        if (is_null($contentType) === false && (400 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\PostGetLinksReportBadRequestException($serializer->deserialize($body, 'Bitly\Model\BadRequest', 'json'), $response);
        }
        if (is_null($contentType) === false && (402 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\PostGetLinksReportPaymentRequiredException($serializer->deserialize($body, 'Bitly\Model\UpgradeRequired', 'json'), $response);
        }
        if (is_null($contentType) === false && (403 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\PostGetLinksReportForbiddenException($serializer->deserialize($body, 'Bitly\Model\Forbidden', 'json'), $response);
        }
        if (is_null($contentType) === false && (422 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\PostGetLinksReportUnprocessableEntityException($serializer->deserialize($body, 'Bitly\Model\UnprocessableEntity', 'json'), $response);
        }
        if (is_null($contentType) === false && (500 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\PostGetLinksReportInternalServerErrorException($serializer->deserialize($body, 'Bitly\Model\InternalError', 'json'), $response);
        }
        if (is_null($contentType) === false && (503 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\PostGetLinksReportServiceUnavailableException($serializer->deserialize($body, 'Bitly\Model\TemporarilyUnavailable', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['bearerAuth'];
    }
}
