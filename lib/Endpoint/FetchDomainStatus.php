<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Endpoint;

class FetchDomainStatus extends \Bitly\Runtime\Client\BaseEndpoint implements \Bitly\Runtime\Client\Endpoint
{
    use \Bitly\Runtime\Client\EndpointTrait;
    protected $domain;

    /**
     * Fetch the status of available domain.
     *
     * @param string $domain          a web domain
     * @param array  $queryParameters {
     *
     * @var string $organization_guid A GUID for a Bitly organization
     * @var bool   $fetch_price Include pricing information for a domain
     *             }
     */
    public function __construct(string $domain, array $queryParameters = [])
    {
        $this->domain = $domain;
        $this->queryParameters = $queryParameters;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return str_replace(['{domain}'], [$this->domain], '/domains/{domain}/status');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['organization_guid', 'fetch_price']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults(['fetch_price' => false]);
        $optionsResolver->addAllowedTypes('organization_guid', ['string']);
        $optionsResolver->addAllowedTypes('fetch_price', ['bool']);

        return $optionsResolver;
    }

    /**
     * @return \Bitly\Model\DomainStatus|null
     *
     * @throws \Bitly\Exception\FetchDomainStatusForbiddenException
     * @throws \Bitly\Exception\FetchDomainStatusInternalServerErrorException
     * @throws \Bitly\Exception\FetchDomainStatusGatewayTimeoutException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return $serializer->deserialize($body, 'Bitly\Model\DomainStatus', 'json');
        }
        if (is_null($contentType) === false && (403 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\FetchDomainStatusForbiddenException($serializer->deserialize($body, 'Bitly\Model\Forbidden', 'json'), $response);
        }
        if (is_null($contentType) === false && (500 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\FetchDomainStatusInternalServerErrorException($serializer->deserialize($body, 'Bitly\Model\InternalError', 'json'), $response);
        }
        if (is_null($contentType) === false && (504 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\FetchDomainStatusGatewayTimeoutException($serializer->deserialize($body, 'Bitly\Model\Timeout', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['bearerAuth'];
    }
}
