<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Endpoint;

class UpdateOAuthAppClientSecret extends \Bitly\Runtime\Client\BaseEndpoint implements \Bitly\Runtime\Client\Endpoint
{
    use \Bitly\Runtime\Client\EndpointTrait;
    protected $client_id;

    /**
     * Finds the OAuth App associated with the param clientID, and updates the client secret for that app.
     *
     * @param string     $clientId    The client ID of an OAuth app
     * @param mixed|null $requestBody
     */
    public function __construct(string $clientId, $requestBody = null)
    {
        $this->client_id = $clientId;
        $this->body = $requestBody;
    }

    public function getMethod(): string
    {
        return 'POST';
    }

    public function getUri(): string
    {
        return str_replace(['{client_id}'], [$this->client_id], '/oauth/apps/{client_id}/secret');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        if (isset($this->body)) {
            return [['Content-Type' => ['application/json']], json_encode($this->body)];
        }

        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    /**
     * @return \Bitly\Model\OAuthAppFull|null
     *
     * @throws \Bitly\Exception\UpdateOAuthAppClientSecretForbiddenException
     * @throws \Bitly\Exception\UpdateOAuthAppClientSecretNotFoundException
     * @throws \Bitly\Exception\UpdateOAuthAppClientSecretInternalServerErrorException
     * @throws \Bitly\Exception\UpdateOAuthAppClientSecretServiceUnavailableException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return $serializer->deserialize($body, 'Bitly\Model\OAuthAppFull', 'json');
        }
        if (403 === $status) {
            throw new \Bitly\Exception\UpdateOAuthAppClientSecretForbiddenException($response);
        }
        if (is_null($contentType) === false && (404 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\UpdateOAuthAppClientSecretNotFoundException($serializer->deserialize($body, 'Bitly\Model\NotFound', 'json'), $response);
        }
        if (is_null($contentType) === false && (500 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\UpdateOAuthAppClientSecretInternalServerErrorException($serializer->deserialize($body, 'Bitly\Model\InternalError', 'json'), $response);
        }
        if (is_null($contentType) === false && (503 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\UpdateOAuthAppClientSecretServiceUnavailableException($serializer->deserialize($body, 'Bitly\Model\TemporarilyUnavailable', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['bearerAuth'];
    }
}
