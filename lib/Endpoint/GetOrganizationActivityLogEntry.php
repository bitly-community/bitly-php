<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Endpoint;

class GetOrganizationActivityLogEntry extends \Bitly\Runtime\Client\BaseEndpoint implements \Bitly\Runtime\Client\Endpoint
{
    use \Bitly\Runtime\Client\EndpointTrait;
    protected $organization_guid;
    protected $action;
    protected $timestamp;
    protected $id;

    /**
     * get a single log from aorganization's activity log.
     *
     * @param string $organizationGuid A GUID for a Bitly organization
     */
    public function __construct(string $organizationGuid, string $action, string $timestamp, string $id)
    {
        $this->organization_guid = $organizationGuid;
        $this->action = $action;
        $this->timestamp = $timestamp;
        $this->id = $id;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return str_replace(['{organization_guid}', '{action}', '{timestamp}', '{id}'], [$this->organization_guid, $this->action, $this->timestamp, $this->id], '/organizations/{organization_guid}/activity_log/{action}/{timestamp}/{id}');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    /**
     * @return \Bitly\Model\ActivityLog|null
     *
     * @throws \Bitly\Exception\GetOrganizationActivityLogEntryForbiddenException
     * @throws \Bitly\Exception\GetOrganizationActivityLogEntryInternalServerErrorException
     * @throws \Bitly\Exception\GetOrganizationActivityLogEntryServiceUnavailableException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return $serializer->deserialize($body, 'Bitly\Model\ActivityLog', 'json');
        }
        if (is_null($contentType) === false && (403 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\GetOrganizationActivityLogEntryForbiddenException($serializer->deserialize($body, 'Bitly\Model\Forbidden', 'json'), $response);
        }
        if (is_null($contentType) === false && (500 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\GetOrganizationActivityLogEntryInternalServerErrorException($serializer->deserialize($body, 'Bitly\Model\InternalError', 'json'), $response);
        }
        if (is_null($contentType) === false && (503 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\GetOrganizationActivityLogEntryServiceUnavailableException($serializer->deserialize($body, 'Bitly\Model\TemporarilyUnavailable', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['bearerAuth'];
    }
}
