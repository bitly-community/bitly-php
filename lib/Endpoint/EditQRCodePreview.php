<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Endpoint;

class EditQRCodePreview extends \Bitly\Runtime\Client\BaseEndpoint implements \Bitly\Runtime\Client\Endpoint
{
    use \Bitly\Runtime\Client\EndpointTrait;
    protected $group_guid;
    protected $id;

    /**
     * Preview changes on an existing QR Code but don't save the result to the DB.
     *
     * @param string $groupGuid A GUID for a Bitly group
     * @param string $id        The QR code ID
     */
    public function __construct(string $groupGuid, string $id, \Bitly\Model\PreviewQRCodeRequestV2 $requestBody)
    {
        $this->group_guid = $groupGuid;
        $this->id = $id;
        $this->body = $requestBody;
    }

    public function getMethod(): string
    {
        return 'POST';
    }

    public function getUri(): string
    {
        return str_replace(['{group_guid}', '{id}'], [$this->group_guid, $this->id], '/qrcodes/preview/{group_guid}/{id}');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        if ($this->body instanceof \Bitly\Model\PreviewQRCodeRequestV2) {
            return [['Content-Type' => ['application/json']], $serializer->serialize($this->body, 'json')];
        }

        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    /**
     * @return \Bitly\Model\QRCodeFullResponse|null
     *
     * @throws \Bitly\Exception\EditQRCodePreviewBadRequestException
     * @throws \Bitly\Exception\EditQRCodePreviewPaymentRequiredException
     * @throws \Bitly\Exception\EditQRCodePreviewForbiddenException
     * @throws \Bitly\Exception\EditQRCodePreviewNotFoundException
     * @throws \Bitly\Exception\EditQRCodePreviewGoneException
     * @throws \Bitly\Exception\EditQRCodePreviewInternalServerErrorException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return $serializer->deserialize($body, 'Bitly\Model\QRCodeFullResponse', 'json');
        }
        if (is_null($contentType) === false && (400 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\EditQRCodePreviewBadRequestException($serializer->deserialize($body, 'Bitly\Model\BadRequest', 'json'), $response);
        }
        if (is_null($contentType) === false && (402 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\EditQRCodePreviewPaymentRequiredException($serializer->deserialize($body, 'Bitly\Model\UpgradeRequired', 'json'), $response);
        }
        if (is_null($contentType) === false && (403 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\EditQRCodePreviewForbiddenException($serializer->deserialize($body, 'Bitly\Model\Forbidden', 'json'), $response);
        }
        if (is_null($contentType) === false && (404 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\EditQRCodePreviewNotFoundException($serializer->deserialize($body, 'Bitly\Model\NotFound', 'json'), $response);
        }
        if (is_null($contentType) === false && (410 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\EditQRCodePreviewGoneException($serializer->deserialize($body, 'Bitly\Model\Gone', 'json'), $response);
        }
        if (is_null($contentType) === false && (500 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\EditQRCodePreviewInternalServerErrorException($serializer->deserialize($body, 'Bitly\Model\InternalError', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['bearerAuth'];
    }
}
