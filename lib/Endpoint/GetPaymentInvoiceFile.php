<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Endpoint;

class GetPaymentInvoiceFile extends \Bitly\Runtime\Client\BaseEndpoint implements \Bitly\Runtime\Client\Endpoint
{
    use \Bitly\Runtime\Client\EndpointTrait;
    protected $organization_guid;
    protected $invoiceID;
    protected $accept;

    /**
     * make a call to billing provider to get a single payment invoice in PDF format.
     *
     * @param string $organizationGuid A GUID for a Bitly organization
     * @param array  $accept           Accept content header application/pdf|application/json
     */
    public function __construct(string $organizationGuid, string $invoiceID, array $accept = [])
    {
        $this->organization_guid = $organizationGuid;
        $this->invoiceID = $invoiceID;
        $this->accept = $accept;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return str_replace(['{organization_guid}', '{invoiceID}'], [$this->organization_guid, $this->invoiceID], '/organizations/{organization_guid}/payment_invoices/{invoiceID}/file');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        if (empty($this->accept)) {
            return ['Accept' => ['application/pdf', 'application/json']];
        }

        return $this->accept;
    }

    /**
     * @return null
     *
     * @throws \Bitly\Exception\GetPaymentInvoiceFileForbiddenException
     * @throws \Bitly\Exception\GetPaymentInvoiceFileNotFoundException
     * @throws \Bitly\Exception\GetPaymentInvoiceFileInternalServerErrorException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (200 === $status) {
        }
        if (is_null($contentType) === false && (403 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\GetPaymentInvoiceFileForbiddenException($serializer->deserialize($body, 'Bitly\Model\Forbidden', 'json'), $response);
        }
        if (is_null($contentType) === false && (404 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\GetPaymentInvoiceFileNotFoundException($serializer->deserialize($body, 'Bitly\Model\NotFound', 'json'), $response);
        }
        if (is_null($contentType) === false && (500 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\GetPaymentInvoiceFileInternalServerErrorException($serializer->deserialize($body, 'Bitly\Model\InternalError', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['bearerAuth'];
    }
}
