<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Endpoint;

class UpdateCustomBitlink extends \Bitly\Runtime\Client\BaseEndpoint implements \Bitly\Runtime\Client\Endpoint
{
    use \Bitly\Runtime\Client\EndpointTrait;
    protected $custom_bitlink;

    /**
     * Move a keyword (or custom back-half) to a different Bitlink (domains must match).
     *
     * @param string $customBitlink A Custom Bitlink made of the domain and keyword
     */
    public function __construct(string $customBitlink, \Bitly\Model\UpdateCustomBitlink $requestBody)
    {
        $this->custom_bitlink = $customBitlink;
        $this->body = $requestBody;
    }

    public function getMethod(): string
    {
        return 'PATCH';
    }

    public function getUri(): string
    {
        return str_replace(['{custom_bitlink}'], [$this->custom_bitlink], '/custom_bitlinks/{custom_bitlink}');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        if ($this->body instanceof \Bitly\Model\UpdateCustomBitlink) {
            return [['Content-Type' => ['application/json']], $serializer->serialize($this->body, 'json')];
        }

        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    /**
     * @return \Bitly\Model\CustomBitlink|null
     *
     * @throws \Bitly\Exception\UpdateCustomBitlinkBadRequestException
     * @throws \Bitly\Exception\UpdateCustomBitlinkPaymentRequiredException
     * @throws \Bitly\Exception\UpdateCustomBitlinkForbiddenException
     * @throws \Bitly\Exception\UpdateCustomBitlinkNotFoundException
     * @throws \Bitly\Exception\UpdateCustomBitlinkUnprocessableEntityException
     * @throws \Bitly\Exception\UpdateCustomBitlinkTooManyRequestsException
     * @throws \Bitly\Exception\UpdateCustomBitlinkInternalServerErrorException
     * @throws \Bitly\Exception\UpdateCustomBitlinkServiceUnavailableException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return $serializer->deserialize($body, 'Bitly\Model\CustomBitlink', 'json');
        }
        if (is_null($contentType) === false && (400 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\UpdateCustomBitlinkBadRequestException($serializer->deserialize($body, 'Bitly\Model\BadRequest', 'json'), $response);
        }
        if (is_null($contentType) === false && (402 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\UpdateCustomBitlinkPaymentRequiredException($serializer->deserialize($body, 'Bitly\Model\UpgradeRequired', 'json'), $response);
        }
        if (is_null($contentType) === false && (403 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\UpdateCustomBitlinkForbiddenException($serializer->deserialize($body, 'Bitly\Model\Forbidden', 'json'), $response);
        }
        if (is_null($contentType) === false && (404 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\UpdateCustomBitlinkNotFoundException($serializer->deserialize($body, 'Bitly\Model\NotFound', 'json'), $response);
        }
        if (is_null($contentType) === false && (422 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\UpdateCustomBitlinkUnprocessableEntityException($serializer->deserialize($body, 'Bitly\Model\UnprocessableEntity', 'json'), $response);
        }
        if (is_null($contentType) === false && (429 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\UpdateCustomBitlinkTooManyRequestsException($serializer->deserialize($body, 'Bitly\Model\MonthlyLimitExceeded', 'json'), $response);
        }
        if (is_null($contentType) === false && (500 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\UpdateCustomBitlinkInternalServerErrorException($serializer->deserialize($body, 'Bitly\Model\InternalError', 'json'), $response);
        }
        if (is_null($contentType) === false && (503 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\UpdateCustomBitlinkServiceUnavailableException($serializer->deserialize($body, 'Bitly\Model\TemporarilyUnavailable', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['bearerAuth'];
    }
}
