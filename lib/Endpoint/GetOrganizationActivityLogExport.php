<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Endpoint;

class GetOrganizationActivityLogExport extends \Bitly\Runtime\Client\BaseEndpoint implements \Bitly\Runtime\Client\Endpoint
{
    use \Bitly\Runtime\Client\EndpointTrait;
    protected $organization_guid;

    /**
     * export an organization's activity log as csv.
     *
     * @param string $organizationGuid A GUID for a Bitly organization
     * @param array  $queryParameters  {
     *
     * @var array  $actions
     * @var array  $user_filter
     * @var string $after_ts
     * @var string $before_ts
     *             }
     */
    public function __construct(string $organizationGuid, array $queryParameters = [])
    {
        $this->organization_guid = $organizationGuid;
        $this->queryParameters = $queryParameters;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return str_replace(['{organization_guid}'], [$this->organization_guid], '/organizations/{organization_guid}/export/activity_log');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['text/csv']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['actions', 'user_filter', 'after_ts', 'before_ts']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('actions', ['array']);
        $optionsResolver->addAllowedTypes('user_filter', ['array']);
        $optionsResolver->addAllowedTypes('after_ts', ['string']);
        $optionsResolver->addAllowedTypes('before_ts', ['string']);

        return $optionsResolver;
    }

    /**
     * @return null
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (200 === $status) {
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['bearerAuth'];
    }
}
