<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Endpoint;

class CreateDefaultAnalyticsReportForGroup extends \Bitly\Runtime\Client\BaseEndpoint implements \Bitly\Runtime\Client\Endpoint
{
    use \Bitly\Runtime\Client\EndpointTrait;
    protected $group_guid;

    /**
     * Creates a default analytics report for a group.
     *
     * @param string $groupGuid       A GUID for a Bitly group
     * @param array  $queryParameters {
     *
     * @var bool $is_custom Allows for granular control over default analytics report creation
     *           }
     */
    public function __construct(string $groupGuid, ?\Bitly\Model\CreateAnalyticsReport $requestBody = null, array $queryParameters = [])
    {
        $this->group_guid = $groupGuid;
        $this->body = $requestBody;
        $this->queryParameters = $queryParameters;
    }

    public function getMethod(): string
    {
        return 'POST';
    }

    public function getUri(): string
    {
        return str_replace(['{group_guid}'], [$this->group_guid], '/analytics/groups/{group_guid}/create_default_report');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        if ($this->body instanceof \Bitly\Model\CreateAnalyticsReport) {
            return [['Content-Type' => ['application/json']], $serializer->serialize($this->body, 'json')];
        }

        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['is_custom']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('is_custom', ['bool']);

        return $optionsResolver;
    }

    /**
     * @return \Bitly\Model\AnalyticsReport|null
     *
     * @throws \Bitly\Exception\CreateDefaultAnalyticsReportForGroupBadRequestException
     * @throws \Bitly\Exception\CreateDefaultAnalyticsReportForGroupForbiddenException
     * @throws \Bitly\Exception\CreateDefaultAnalyticsReportForGroupNotFoundException
     * @throws \Bitly\Exception\CreateDefaultAnalyticsReportForGroupInternalServerErrorException
     * @throws \Bitly\Exception\CreateDefaultAnalyticsReportForGroupServiceUnavailableException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (is_null($contentType) === false && (201 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return $serializer->deserialize($body, 'Bitly\Model\AnalyticsReport', 'json');
        }
        if (is_null($contentType) === false && (400 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\CreateDefaultAnalyticsReportForGroupBadRequestException($serializer->deserialize($body, 'Bitly\Model\BadRequest', 'json'), $response);
        }
        if (is_null($contentType) === false && (403 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\CreateDefaultAnalyticsReportForGroupForbiddenException($serializer->deserialize($body, 'Bitly\Model\Forbidden', 'json'), $response);
        }
        if (is_null($contentType) === false && (404 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\CreateDefaultAnalyticsReportForGroupNotFoundException($serializer->deserialize($body, 'Bitly\Model\NotFound', 'json'), $response);
        }
        if (is_null($contentType) === false && (500 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\CreateDefaultAnalyticsReportForGroupInternalServerErrorException($serializer->deserialize($body, 'Bitly\Model\InternalError', 'json'), $response);
        }
        if (is_null($contentType) === false && (503 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\CreateDefaultAnalyticsReportForGroupServiceUnavailableException($serializer->deserialize($body, 'Bitly\Model\TemporarilyUnavailable', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['bearerAuth'];
    }
}
