<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Endpoint;

class GetLinkEngagementsDayDrillDown extends \Bitly\Runtime\Client\BaseEndpoint implements \Bitly\Runtime\Client\Endpoint
{
    use \Bitly\Runtime\Client\EndpointTrait;
    protected $group_guid;
    protected $report_id;
    protected $timestamp;

    /**
     * Get a single day's link-level engagements for a report.
     *
     * @param string $groupGuid       A GUID for a Bitly group
     * @param string $reportId        A GUID for a Bitly Analytics Report
     * @param array  $queryParameters {
     *
     * @var string $sort
     *             }
     */
    public function __construct(string $groupGuid, string $reportId, string $timestamp, array $queryParameters = [])
    {
        $this->group_guid = $groupGuid;
        $this->report_id = $reportId;
        $this->timestamp = $timestamp;
        $this->queryParameters = $queryParameters;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return str_replace(['{group_guid}', '{report_id}', '{timestamp}'], [$this->group_guid, $this->report_id, $this->timestamp], '/analytics/groups/{group_guid}/reports/{report_id}/link_performance/day_drill_down/{timestamp}');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['sort']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('sort', ['string']);

        return $optionsResolver;
    }

    /**
     * @return \Bitly\Model\EngagementsDayDrillDown|null
     *
     * @throws \Bitly\Exception\GetLinkEngagementsDayDrillDownBadRequestException
     * @throws \Bitly\Exception\GetLinkEngagementsDayDrillDownForbiddenException
     * @throws \Bitly\Exception\GetLinkEngagementsDayDrillDownNotFoundException
     * @throws \Bitly\Exception\GetLinkEngagementsDayDrillDownUnprocessableEntityException
     * @throws \Bitly\Exception\GetLinkEngagementsDayDrillDownInternalServerErrorException
     * @throws \Bitly\Exception\GetLinkEngagementsDayDrillDownServiceUnavailableException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return $serializer->deserialize($body, 'Bitly\Model\EngagementsDayDrillDown', 'json');
        }
        if (is_null($contentType) === false && (400 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\GetLinkEngagementsDayDrillDownBadRequestException($serializer->deserialize($body, 'Bitly\Model\BadRequest', 'json'), $response);
        }
        if (is_null($contentType) === false && (403 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\GetLinkEngagementsDayDrillDownForbiddenException($serializer->deserialize($body, 'Bitly\Model\Forbidden', 'json'), $response);
        }
        if (is_null($contentType) === false && (404 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\GetLinkEngagementsDayDrillDownNotFoundException($serializer->deserialize($body, 'Bitly\Model\NotFound', 'json'), $response);
        }
        if (is_null($contentType) === false && (422 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\GetLinkEngagementsDayDrillDownUnprocessableEntityException($serializer->deserialize($body, 'Bitly\Model\UnprocessableEntity', 'json'), $response);
        }
        if (is_null($contentType) === false && (500 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\GetLinkEngagementsDayDrillDownInternalServerErrorException($serializer->deserialize($body, 'Bitly\Model\InternalError', 'json'), $response);
        }
        if (is_null($contentType) === false && (503 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\GetLinkEngagementsDayDrillDownServiceUnavailableException($serializer->deserialize($body, 'Bitly\Model\TemporarilyUnavailable', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['bearerAuth'];
    }
}
