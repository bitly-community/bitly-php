<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Endpoint;

class GetBitlinksByGroup extends \Bitly\Runtime\Client\BaseEndpoint implements \Bitly\Runtime\Client\Endpoint
{
    use \Bitly\Runtime\Client\EndpointTrait;
    protected $group_guid;

    /**
     * Returns a paginated collection of Bitlinks for a group. The list of custom bitlinks has newest entries first.
     *
     * @param string $groupGuid       A GUID for a Bitly group
     * @param array  $queryParameters {
     *
     * @var int    $size The quantity of items to be be returned
     * @var string $search_after token used to search next batch, only use response from API as input value
     * @var string $query The value that you would like to search
     * @var int    $created_before Timestamp as an integer unix epoch (seconds only)
     * @var int    $created_after Timestamp as an integer unix epoch (seconds only)
     * @var string $archived Whether or not to include archived resources
     * @var string $deeplinks Filter to only Bitlinks that contain deeplinks
     * @var string $domain_deeplinks Filter to only Bitlinks that contain deeplinks configured with a custom domain
     * @var string $campaign_guid Filter to return only links for the given campaign GUID, can be provided
     * @var string $channel_guid Filter to return only links for the given channel GUID, can be provided, overrides all other parameters
     * @var string $custom_bitlink
     * @var string $has_qr_codes a filter value if the resource has any QR codes
     * @var array  $tags Filter by given tags
     * @var array  $launchpad_ids Filter by launchpad id
     * @var array  $encoding_login Filter by the login of the authenticated user that created the Bitlink
     *             }
     */
    public function __construct(string $groupGuid, array $queryParameters = [])
    {
        $this->group_guid = $groupGuid;
        $this->queryParameters = $queryParameters;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return str_replace(['{group_guid}'], [$this->group_guid], '/groups/{group_guid}/bitlinks');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['size', 'search_after', 'query', 'created_before', 'created_after', 'archived', 'deeplinks', 'domain_deeplinks', 'campaign_guid', 'channel_guid', 'custom_bitlink', 'has_qr_codes', 'tags', 'launchpad_ids', 'encoding_login']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults(['size' => 50, 'archived' => 'off', 'deeplinks' => 'both', 'domain_deeplinks' => 'both', 'custom_bitlink' => 'both', 'has_qr_codes' => 'both']);
        $optionsResolver->addAllowedTypes('size', ['int']);
        $optionsResolver->addAllowedTypes('search_after', ['string']);
        $optionsResolver->addAllowedTypes('query', ['string']);
        $optionsResolver->addAllowedTypes('created_before', ['int']);
        $optionsResolver->addAllowedTypes('created_after', ['int']);
        $optionsResolver->addAllowedTypes('archived', ['string']);
        $optionsResolver->addAllowedTypes('deeplinks', ['string']);
        $optionsResolver->addAllowedTypes('domain_deeplinks', ['string']);
        $optionsResolver->addAllowedTypes('campaign_guid', ['string']);
        $optionsResolver->addAllowedTypes('channel_guid', ['string']);
        $optionsResolver->addAllowedTypes('custom_bitlink', ['string']);
        $optionsResolver->addAllowedTypes('has_qr_codes', ['string']);
        $optionsResolver->addAllowedTypes('tags', ['array']);
        $optionsResolver->addAllowedTypes('launchpad_ids', ['array']);
        $optionsResolver->addAllowedTypes('encoding_login', ['array']);

        return $optionsResolver;
    }

    /**
     * @return \Bitly\Model\Bitlinks|null
     *
     * @throws \Bitly\Exception\GetBitlinksByGroupForbiddenException
     * @throws \Bitly\Exception\GetBitlinksByGroupNotFoundException
     * @throws \Bitly\Exception\GetBitlinksByGroupInternalServerErrorException
     * @throws \Bitly\Exception\GetBitlinksByGroupServiceUnavailableException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return $serializer->deserialize($body, 'Bitly\Model\Bitlinks', 'json');
        }
        if (is_null($contentType) === false && (403 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\GetBitlinksByGroupForbiddenException($serializer->deserialize($body, 'Bitly\Model\Forbidden', 'json'), $response);
        }
        if (is_null($contentType) === false && (404 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\GetBitlinksByGroupNotFoundException($serializer->deserialize($body, 'Bitly\Model\NotFound', 'json'), $response);
        }
        if (is_null($contentType) === false && (500 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\GetBitlinksByGroupInternalServerErrorException($serializer->deserialize($body, 'Bitly\Model\InternalError', 'json'), $response);
        }
        if (is_null($contentType) === false && (503 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\GetBitlinksByGroupServiceUnavailableException($serializer->deserialize($body, 'Bitly\Model\TemporarilyUnavailable', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['bearerAuth'];
    }
}
