<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Endpoint;

class SetStripeDefaultPaymentMethod extends \Bitly\Runtime\Client\BaseEndpoint implements \Bitly\Runtime\Client\Endpoint
{
    use \Bitly\Runtime\Client\EndpointTrait;
    protected $organization_guid;
    protected $payment_method_id;

    /**
     * sets payment method as default for the organization in stripe.
     *
     * @param string $organizationGuid A GUID for a Bitly organization
     * @param string $paymentMethodId  A Stripe payment method ID
     */
    public function __construct(string $organizationGuid, string $paymentMethodId)
    {
        $this->organization_guid = $organizationGuid;
        $this->payment_method_id = $paymentMethodId;
    }

    public function getMethod(): string
    {
        return 'PATCH';
    }

    public function getUri(): string
    {
        return str_replace(['{organization_guid}', '{payment_method_id}'], [$this->organization_guid, $this->payment_method_id], '/private/stripe/organizations/{organization_guid}/payment_method/{payment_method_id}/default');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    /**
     * @return null
     *
     * @throws \Bitly\Exception\SetStripeDefaultPaymentMethodBadRequestException
     * @throws \Bitly\Exception\SetStripeDefaultPaymentMethodForbiddenException
     * @throws \Bitly\Exception\SetStripeDefaultPaymentMethodUnprocessableEntityException
     * @throws \Bitly\Exception\SetStripeDefaultPaymentMethodInternalServerErrorException
     * @throws \Bitly\Exception\SetStripeDefaultPaymentMethodServiceUnavailableException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (204 === $status) {
            return null;
        }
        if (is_null($contentType) === false && (400 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\SetStripeDefaultPaymentMethodBadRequestException($serializer->deserialize($body, 'Bitly\Model\BadRequest', 'json'), $response);
        }
        if (is_null($contentType) === false && (403 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\SetStripeDefaultPaymentMethodForbiddenException($serializer->deserialize($body, 'Bitly\Model\Forbidden', 'json'), $response);
        }
        if (is_null($contentType) === false && (422 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\SetStripeDefaultPaymentMethodUnprocessableEntityException($serializer->deserialize($body, 'Bitly\Model\UnprocessableEntity', 'json'), $response);
        }
        if (is_null($contentType) === false && (500 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\SetStripeDefaultPaymentMethodInternalServerErrorException($serializer->deserialize($body, 'Bitly\Model\InternalError', 'json'), $response);
        }
        if (is_null($contentType) === false && (503 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Bitly\Exception\SetStripeDefaultPaymentMethodServiceUnavailableException($serializer->deserialize($body, 'Bitly\Model\TemporarilyUnavailable', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['bearerAuth'];
    }
}
