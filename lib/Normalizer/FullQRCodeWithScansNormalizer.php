<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class FullQRCodeWithScansNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\FullQRCodeWithScans::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\FullQRCodeWithScans::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\FullQRCodeWithScans();
        if (\array_key_exists('is_hidden', $data) && \is_int($data['is_hidden'])) {
            $data['is_hidden'] = (bool) $data['is_hidden'];
        }
        if (\array_key_exists('is_customized', $data) && \is_int($data['is_customized'])) {
            $data['is_customized'] = (bool) $data['is_customized'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('id', $data)) {
            $object->setId($data['id']);
            unset($data['id']);
        }
        if (\array_key_exists('title', $data)) {
            $object->setTitle($data['title']);
            unset($data['title']);
        }
        if (\array_key_exists('link', $data)) {
            $object->setLink($data['link']);
            unset($data['link']);
        }
        if (\array_key_exists('long_url', $data)) {
            $object->setLongUrl($data['long_url']);
            unset($data['long_url']);
        }
        if (\array_key_exists('group_guid', $data)) {
            $object->setGroupGuid($data['group_guid']);
            unset($data['group_guid']);
        }
        if (\array_key_exists('customization', $data)) {
            $object->setCustomization($this->denormalizer->denormalize($data['customization'], \Bitly\Model\QRCustomizations::class, 'json', $context));
            unset($data['customization']);
        }
        if (\array_key_exists('qr_uri', $data)) {
            $object->setQrUri($data['qr_uri']);
            unset($data['qr_uri']);
        }
        if (\array_key_exists('is_hidden', $data)) {
            $object->setIsHidden($data['is_hidden']);
            unset($data['is_hidden']);
        }
        if (\array_key_exists('is_customized', $data)) {
            $object->setIsCustomized($data['is_customized']);
            unset($data['is_customized']);
        }
        if (\array_key_exists('scans', $data)) {
            $object->setScans($data['scans']);
            unset($data['scans']);
        }
        if (\array_key_exists('created', $data)) {
            $object->setCreated($data['created']);
            unset($data['created']);
        }
        if (\array_key_exists('modified', $data)) {
            $object->setModified($data['modified']);
            unset($data['modified']);
        }
        if (\array_key_exists('created_ts', $data)) {
            $object->setCreatedTs($data['created_ts']);
            unset($data['created_ts']);
        }
        if (\array_key_exists('modified_ts', $data)) {
            $object->setModifiedTs($data['modified_ts']);
            unset($data['modified_ts']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('id') && null !== $data->getId()) {
            $dataArray['id'] = $data->getId();
        }
        if ($data->isInitialized('title') && null !== $data->getTitle()) {
            $dataArray['title'] = $data->getTitle();
        }
        if ($data->isInitialized('link') && null !== $data->getLink()) {
            $dataArray['link'] = $data->getLink();
        }
        if ($data->isInitialized('longUrl') && null !== $data->getLongUrl()) {
            $dataArray['long_url'] = $data->getLongUrl();
        }
        if ($data->isInitialized('groupGuid') && null !== $data->getGroupGuid()) {
            $dataArray['group_guid'] = $data->getGroupGuid();
        }
        if ($data->isInitialized('customization') && null !== $data->getCustomization()) {
            $dataArray['customization'] = $this->normalizer->normalize($data->getCustomization(), 'json', $context);
        }
        if ($data->isInitialized('qrUri') && null !== $data->getQrUri()) {
            $dataArray['qr_uri'] = $data->getQrUri();
        }
        if ($data->isInitialized('isHidden') && null !== $data->getIsHidden()) {
            $dataArray['is_hidden'] = $data->getIsHidden();
        }
        if ($data->isInitialized('isCustomized') && null !== $data->getIsCustomized()) {
            $dataArray['is_customized'] = $data->getIsCustomized();
        }
        if ($data->isInitialized('scans') && null !== $data->getScans()) {
            $dataArray['scans'] = $data->getScans();
        }
        if ($data->isInitialized('created') && null !== $data->getCreated()) {
            $dataArray['created'] = $data->getCreated();
        }
        if ($data->isInitialized('modified') && null !== $data->getModified()) {
            $dataArray['modified'] = $data->getModified();
        }
        if ($data->isInitialized('createdTs') && null !== $data->getCreatedTs()) {
            $dataArray['created_ts'] = $data->getCreatedTs();
        }
        if ($data->isInitialized('modifiedTs') && null !== $data->getModifiedTs()) {
            $dataArray['modified_ts'] = $data->getModifiedTs();
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\FullQRCodeWithScans::class => false];
    }
}
