<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CustomDomainBodyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\CustomDomainBody::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\CustomDomainBody::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\CustomDomainBody();
        if (\array_key_exists('is_active', $data) && \is_int($data['is_active'])) {
            $data['is_active'] = (bool) $data['is_active'];
        }
        if (\array_key_exists('https_bitlinks', $data) && \is_int($data['https_bitlinks'])) {
            $data['https_bitlinks'] = (bool) $data['https_bitlinks'];
        }
        if (\array_key_exists('ssl_autoconfigure_error', $data) && \is_int($data['ssl_autoconfigure_error'])) {
            $data['ssl_autoconfigure_error'] = (bool) $data['ssl_autoconfigure_error'];
        }
        if (\array_key_exists('https_enabled', $data) && \is_int($data['https_enabled'])) {
            $data['https_enabled'] = (bool) $data['https_enabled'];
        }
        if (\array_key_exists('hsts_enabled', $data) && \is_int($data['hsts_enabled'])) {
            $data['hsts_enabled'] = (bool) $data['hsts_enabled'];
        }
        if (\array_key_exists('upgrade_insecure_requests', $data) && \is_int($data['upgrade_insecure_requests'])) {
            $data['upgrade_insecure_requests'] = (bool) $data['upgrade_insecure_requests'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('custom_domain', $data)) {
            $object->setCustomDomain($data['custom_domain']);
            unset($data['custom_domain']);
        }
        if (\array_key_exists('is_active', $data)) {
            $object->setIsActive($data['is_active']);
            unset($data['is_active']);
        }
        if (\array_key_exists('group_guids', $data)) {
            $values = [];
            foreach ($data['group_guids'] as $value) {
                $values[] = $value;
            }
            $object->setGroupGuids($values);
            unset($data['group_guids']);
        }
        if (\array_key_exists('ssl_configuration_error', $data)) {
            $object->setSslConfigurationError($data['ssl_configuration_error']);
            unset($data['ssl_configuration_error']);
        }
        if (\array_key_exists('configuration_last_check_ts', $data)) {
            $object->setConfigurationLastCheckTs($data['configuration_last_check_ts']);
            unset($data['configuration_last_check_ts']);
        }
        if (\array_key_exists('root_redirect', $data)) {
            $object->setRootRedirect($data['root_redirect']);
            unset($data['root_redirect']);
        }
        if (\array_key_exists('https_bitlinks', $data)) {
            $object->setHttpsBitlinks($data['https_bitlinks']);
            unset($data['https_bitlinks']);
        }
        if (\array_key_exists('ssl_autoconfigure_error', $data)) {
            $object->setSslAutoconfigureError($data['ssl_autoconfigure_error']);
            unset($data['ssl_autoconfigure_error']);
        }
        if (\array_key_exists('https_enabled', $data)) {
            $object->setHttpsEnabled($data['https_enabled']);
            unset($data['https_enabled']);
        }
        if (\array_key_exists('hsts_enabled', $data)) {
            $object->setHstsEnabled($data['hsts_enabled']);
            unset($data['hsts_enabled']);
        }
        if (\array_key_exists('created', $data)) {
            $object->setCreated($data['created']);
            unset($data['created']);
        }
        if (\array_key_exists('wildcard_redirect', $data)) {
            $object->setWildcardRedirect($data['wildcard_redirect']);
            unset($data['wildcard_redirect']);
        }
        if (\array_key_exists('validation_status', $data)) {
            $object->setValidationStatus($data['validation_status']);
            unset($data['validation_status']);
        }
        if (\array_key_exists('validation_error', $data)) {
            $object->setValidationError($data['validation_error']);
            unset($data['validation_error']);
        }
        if (\array_key_exists('deeplink_apps', $data)) {
            $values_1 = [];
            foreach ($data['deeplink_apps'] as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, \Bitly\Model\MinimalDeeplinkApp::class, 'json', $context);
            }
            $object->setDeeplinkApps($values_1);
            unset($data['deeplink_apps']);
        }
        if (\array_key_exists('upgrade_insecure_requests', $data)) {
            $object->setUpgradeInsecureRequests($data['upgrade_insecure_requests']);
            unset($data['upgrade_insecure_requests']);
        }
        if (\array_key_exists('ssl_cert', $data)) {
            $object->setSslCert($this->denormalizer->denormalize($data['ssl_cert'], \Bitly\Model\PublicSSLCert::class, 'json', $context));
            unset($data['ssl_cert']);
        }
        foreach ($data as $key => $value_2) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_2;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('customDomain') && null !== $data->getCustomDomain()) {
            $dataArray['custom_domain'] = $data->getCustomDomain();
        }
        if ($data->isInitialized('isActive') && null !== $data->getIsActive()) {
            $dataArray['is_active'] = $data->getIsActive();
        }
        if ($data->isInitialized('groupGuids') && null !== $data->getGroupGuids()) {
            $values = [];
            foreach ($data->getGroupGuids() as $value) {
                $values[] = $value;
            }
            $dataArray['group_guids'] = $values;
        }
        if ($data->isInitialized('sslConfigurationError') && null !== $data->getSslConfigurationError()) {
            $dataArray['ssl_configuration_error'] = $data->getSslConfigurationError();
        }
        if ($data->isInitialized('configurationLastCheckTs') && null !== $data->getConfigurationLastCheckTs()) {
            $dataArray['configuration_last_check_ts'] = $data->getConfigurationLastCheckTs();
        }
        if ($data->isInitialized('rootRedirect') && null !== $data->getRootRedirect()) {
            $dataArray['root_redirect'] = $data->getRootRedirect();
        }
        if ($data->isInitialized('httpsBitlinks') && null !== $data->getHttpsBitlinks()) {
            $dataArray['https_bitlinks'] = $data->getHttpsBitlinks();
        }
        if ($data->isInitialized('sslAutoconfigureError') && null !== $data->getSslAutoconfigureError()) {
            $dataArray['ssl_autoconfigure_error'] = $data->getSslAutoconfigureError();
        }
        if ($data->isInitialized('httpsEnabled') && null !== $data->getHttpsEnabled()) {
            $dataArray['https_enabled'] = $data->getHttpsEnabled();
        }
        if ($data->isInitialized('hstsEnabled') && null !== $data->getHstsEnabled()) {
            $dataArray['hsts_enabled'] = $data->getHstsEnabled();
        }
        if ($data->isInitialized('created') && null !== $data->getCreated()) {
            $dataArray['created'] = $data->getCreated();
        }
        if ($data->isInitialized('wildcardRedirect') && null !== $data->getWildcardRedirect()) {
            $dataArray['wildcard_redirect'] = $data->getWildcardRedirect();
        }
        if ($data->isInitialized('validationStatus') && null !== $data->getValidationStatus()) {
            $dataArray['validation_status'] = $data->getValidationStatus();
        }
        if ($data->isInitialized('validationError') && null !== $data->getValidationError()) {
            $dataArray['validation_error'] = $data->getValidationError();
        }
        if ($data->isInitialized('deeplinkApps') && null !== $data->getDeeplinkApps()) {
            $values_1 = [];
            foreach ($data->getDeeplinkApps() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $dataArray['deeplink_apps'] = $values_1;
        }
        if ($data->isInitialized('upgradeInsecureRequests') && null !== $data->getUpgradeInsecureRequests()) {
            $dataArray['upgrade_insecure_requests'] = $data->getUpgradeInsecureRequests();
        }
        if ($data->isInitialized('sslCert') && null !== $data->getSslCert()) {
            $dataArray['ssl_cert'] = $this->normalizer->normalize($data->getSslCert(), 'json', $context);
        }
        foreach ($data as $key => $value_2) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_2;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\CustomDomainBody::class => false];
    }
}
