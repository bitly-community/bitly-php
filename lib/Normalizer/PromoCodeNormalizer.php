<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class PromoCodeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\PromoCode::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\PromoCode::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\PromoCode();
        if (\array_key_exists('discount_amount', $data) && \is_int($data['discount_amount'])) {
            $data['discount_amount'] = (float) $data['discount_amount'];
        }
        if (\array_key_exists('is_valid', $data) && \is_int($data['is_valid'])) {
            $data['is_valid'] = (bool) $data['is_valid'];
        }
        if (\array_key_exists('is_valid_for_plan', $data) && \is_int($data['is_valid_for_plan'])) {
            $data['is_valid_for_plan'] = (bool) $data['is_valid_for_plan'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('promo_code', $data)) {
            $object->setPromoCode($data['promo_code']);
            unset($data['promo_code']);
        }
        if (\array_key_exists('is_valid', $data)) {
            $object->setIsValid($data['is_valid']);
            unset($data['is_valid']);
        }
        if (\array_key_exists('is_valid_for_plan', $data)) {
            $object->setIsValidForPlan($data['is_valid_for_plan']);
            unset($data['is_valid_for_plan']);
        }
        if (\array_key_exists('discount_type', $data)) {
            $object->setDiscountType($data['discount_type']);
            unset($data['discount_type']);
        }
        if (\array_key_exists('discount_amount', $data)) {
            $object->setDiscountAmount($data['discount_amount']);
            unset($data['discount_amount']);
        }
        if (\array_key_exists('num_periods_to_apply_discount', $data)) {
            $object->setNumPeriodsToApplyDiscount($data['num_periods_to_apply_discount']);
            unset($data['num_periods_to_apply_discount']);
        }
        if (\array_key_exists('num_periods_to_apply_discount_type', $data)) {
            $object->setNumPeriodsToApplyDiscountType($data['num_periods_to_apply_discount_type']);
            unset($data['num_periods_to_apply_discount_type']);
        }
        if (\array_key_exists('valid_plans', $data)) {
            $values = [];
            foreach ($data['valid_plans'] as $value) {
                $values[] = $value;
            }
            $object->setValidPlans($values);
            unset($data['valid_plans']);
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_1;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('promoCode') && null !== $data->getPromoCode()) {
            $dataArray['promo_code'] = $data->getPromoCode();
        }
        if ($data->isInitialized('isValid') && null !== $data->getIsValid()) {
            $dataArray['is_valid'] = $data->getIsValid();
        }
        if ($data->isInitialized('isValidForPlan') && null !== $data->getIsValidForPlan()) {
            $dataArray['is_valid_for_plan'] = $data->getIsValidForPlan();
        }
        if ($data->isInitialized('discountType') && null !== $data->getDiscountType()) {
            $dataArray['discount_type'] = $data->getDiscountType();
        }
        if ($data->isInitialized('discountAmount') && null !== $data->getDiscountAmount()) {
            $dataArray['discount_amount'] = $data->getDiscountAmount();
        }
        if ($data->isInitialized('numPeriodsToApplyDiscount') && null !== $data->getNumPeriodsToApplyDiscount()) {
            $dataArray['num_periods_to_apply_discount'] = $data->getNumPeriodsToApplyDiscount();
        }
        if ($data->isInitialized('numPeriodsToApplyDiscountType') && null !== $data->getNumPeriodsToApplyDiscountType()) {
            $dataArray['num_periods_to_apply_discount_type'] = $data->getNumPeriodsToApplyDiscountType();
        }
        if ($data->isInitialized('validPlans') && null !== $data->getValidPlans()) {
            $values = [];
            foreach ($data->getValidPlans() as $value) {
                $values[] = $value;
            }
            $dataArray['valid_plans'] = $values;
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_1;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\PromoCode::class => false];
    }
}
