<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class DomainValidateNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\DomainValidate::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\DomainValidate::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\DomainValidate();
        if (\array_key_exists('prevalidate', $data) && \is_int($data['prevalidate'])) {
            $data['prevalidate'] = (bool) $data['prevalidate'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('organization_guid', $data)) {
            $object->setOrganizationGuid($data['organization_guid']);
            unset($data['organization_guid']);
        }
        if (\array_key_exists('custom_domain', $data)) {
            $object->setCustomDomain($data['custom_domain']);
            unset($data['custom_domain']);
        }
        if (\array_key_exists('domain', $data)) {
            $object->setDomain($data['domain']);
            unset($data['domain']);
        }
        if (\array_key_exists('subdomain', $data)) {
            $object->setSubdomain($data['subdomain']);
            unset($data['subdomain']);
        }
        if (\array_key_exists('group_guids', $data)) {
            $values = [];
            foreach ($data['group_guids'] as $value) {
                $values[] = $value;
            }
            $object->setGroupGuids($values);
            unset($data['group_guids']);
        }
        if (\array_key_exists('prevalidate', $data)) {
            $object->setPrevalidate($data['prevalidate']);
            unset($data['prevalidate']);
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_1;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        $dataArray['organization_guid'] = $data->getOrganizationGuid();
        $dataArray['custom_domain'] = $data->getCustomDomain();
        if ($data->isInitialized('domain') && null !== $data->getDomain()) {
            $dataArray['domain'] = $data->getDomain();
        }
        if ($data->isInitialized('subdomain') && null !== $data->getSubdomain()) {
            $dataArray['subdomain'] = $data->getSubdomain();
        }
        if ($data->isInitialized('groupGuids') && null !== $data->getGroupGuids()) {
            $values = [];
            foreach ($data->getGroupGuids() as $value) {
                $values[] = $value;
            }
            $dataArray['group_guids'] = $values;
        }
        if ($data->isInitialized('prevalidate') && null !== $data->getPrevalidate()) {
            $dataArray['prevalidate'] = $data->getPrevalidate();
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_1;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\DomainValidate::class => false];
    }
}
