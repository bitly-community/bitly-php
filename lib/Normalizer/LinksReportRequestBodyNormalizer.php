<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class LinksReportRequestBodyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\LinksReportRequestBody::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\LinksReportRequestBody::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\LinksReportRequestBody();
        if (\array_key_exists('include_max_history', $data) && \is_int($data['include_max_history'])) {
            $data['include_max_history'] = (bool) $data['include_max_history'];
        }
        if (\array_key_exists('include_max_time_period', $data) && \is_int($data['include_max_time_period'])) {
            $data['include_max_time_period'] = (bool) $data['include_max_time_period'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('include_max_history', $data)) {
            $object->setIncludeMaxHistory($data['include_max_history']);
            unset($data['include_max_history']);
        }
        if (\array_key_exists('include_max_time_period', $data)) {
            $object->setIncludeMaxTimePeriod($data['include_max_time_period']);
            unset($data['include_max_time_period']);
        }
        if (\array_key_exists('bitlink_ids', $data)) {
            $values = [];
            foreach ($data['bitlink_ids'] as $value) {
                $values[] = $value;
            }
            $object->setBitlinkIds($values);
            unset($data['bitlink_ids']);
        }
        if (\array_key_exists('time_periods', $data)) {
            $values_1 = [];
            foreach ($data['time_periods'] as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, \Bitly\Model\TimePeriod::class, 'json', $context);
            }
            $object->setTimePeriods($values_1);
            unset($data['time_periods']);
        }
        if (\array_key_exists('metrics_columns', $data)) {
            $values_2 = [];
            foreach ($data['metrics_columns'] as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, \Bitly\Model\MetricsColumn::class, 'json', $context);
            }
            $object->setMetricsColumns($values_2);
            unset($data['metrics_columns']);
        }
        foreach ($data as $key => $value_3) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_3;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('includeMaxHistory') && null !== $data->getIncludeMaxHistory()) {
            $dataArray['include_max_history'] = $data->getIncludeMaxHistory();
        }
        if ($data->isInitialized('includeMaxTimePeriod') && null !== $data->getIncludeMaxTimePeriod()) {
            $dataArray['include_max_time_period'] = $data->getIncludeMaxTimePeriod();
        }
        if ($data->isInitialized('bitlinkIds') && null !== $data->getBitlinkIds()) {
            $values = [];
            foreach ($data->getBitlinkIds() as $value) {
                $values[] = $value;
            }
            $dataArray['bitlink_ids'] = $values;
        }
        if ($data->isInitialized('timePeriods') && null !== $data->getTimePeriods()) {
            $values_1 = [];
            foreach ($data->getTimePeriods() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $dataArray['time_periods'] = $values_1;
        }
        if ($data->isInitialized('metricsColumns') && null !== $data->getMetricsColumns()) {
            $values_2 = [];
            foreach ($data->getMetricsColumns() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $dataArray['metrics_columns'] = $values_2;
        }
        foreach ($data as $key => $value_3) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_3;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\LinksReportRequestBody::class => false];
    }
}
