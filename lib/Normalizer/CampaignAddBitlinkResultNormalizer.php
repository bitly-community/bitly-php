<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CampaignAddBitlinkResultNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\CampaignAddBitlinkResult::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\CampaignAddBitlinkResult::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\CampaignAddBitlinkResult();
        if (\array_key_exists('new_channel_bitlink', $data) && \is_int($data['new_channel_bitlink'])) {
            $data['new_channel_bitlink'] = (bool) $data['new_channel_bitlink'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('channel_guid', $data)) {
            $object->setChannelGuid($data['channel_guid']);
            unset($data['channel_guid']);
        }
        if (\array_key_exists('bitlink_id', $data)) {
            $object->setBitlinkId($data['bitlink_id']);
            unset($data['bitlink_id']);
        }
        if (\array_key_exists('long_url', $data)) {
            $object->setLongUrl($data['long_url']);
            unset($data['long_url']);
        }
        if (\array_key_exists('url', $data)) {
            $object->setUrl($data['url']);
            unset($data['url']);
        }
        if (\array_key_exists('new_channel_bitlink', $data)) {
            $object->setNewChannelBitlink($data['new_channel_bitlink']);
            unset($data['new_channel_bitlink']);
        }
        if (\array_key_exists('shorten_link_error', $data)) {
            $object->setShortenLinkError($data['shorten_link_error']);
            unset($data['shorten_link_error']);
        }
        if (\array_key_exists('channel_bitlink_error', $data)) {
            $object->setChannelBitlinkError($data['channel_bitlink_error']);
            unset($data['channel_bitlink_error']);
        }
        if (\array_key_exists('other_link_error', $data)) {
            $object->setOtherLinkError($data['other_link_error']);
            unset($data['other_link_error']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('channelGuid') && null !== $data->getChannelGuid()) {
            $dataArray['channel_guid'] = $data->getChannelGuid();
        }
        if ($data->isInitialized('bitlinkId') && null !== $data->getBitlinkId()) {
            $dataArray['bitlink_id'] = $data->getBitlinkId();
        }
        if ($data->isInitialized('longUrl') && null !== $data->getLongUrl()) {
            $dataArray['long_url'] = $data->getLongUrl();
        }
        if ($data->isInitialized('url') && null !== $data->getUrl()) {
            $dataArray['url'] = $data->getUrl();
        }
        if ($data->isInitialized('newChannelBitlink') && null !== $data->getNewChannelBitlink()) {
            $dataArray['new_channel_bitlink'] = $data->getNewChannelBitlink();
        }
        if ($data->isInitialized('shortenLinkError') && null !== $data->getShortenLinkError()) {
            $dataArray['shorten_link_error'] = $data->getShortenLinkError();
        }
        if ($data->isInitialized('channelBitlinkError') && null !== $data->getChannelBitlinkError()) {
            $dataArray['channel_bitlink_error'] = $data->getChannelBitlinkError();
        }
        if ($data->isInitialized('otherLinkError') && null !== $data->getOtherLinkError()) {
            $dataArray['other_link_error'] = $data->getOtherLinkError();
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\CampaignAddBitlinkResult::class => false];
    }
}
