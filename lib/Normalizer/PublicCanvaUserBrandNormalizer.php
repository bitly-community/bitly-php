<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class PublicCanvaUserBrandNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\PublicCanvaUserBrand::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\PublicCanvaUserBrand::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\PublicCanvaUserBrand();
        if (\array_key_exists('active', $data) && \is_int($data['active'])) {
            $data['active'] = (bool) $data['active'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('canva_user_id', $data)) {
            $object->setCanvaUserId($data['canva_user_id']);
            unset($data['canva_user_id']);
        }
        if (\array_key_exists('canva_brand_id', $data)) {
            $object->setCanvaBrandId($data['canva_brand_id']);
            unset($data['canva_brand_id']);
        }
        if (\array_key_exists('login', $data)) {
            $object->setLogin($data['login']);
            unset($data['login']);
        }
        if (\array_key_exists('active', $data)) {
            $object->setActive($data['active']);
            unset($data['active']);
        }
        if (\array_key_exists('brand_guid', $data)) {
            $object->setBrandGuid($data['brand_guid']);
            unset($data['brand_guid']);
        }
        if (\array_key_exists('org_guid', $data)) {
            $object->setOrgGuid($data['org_guid']);
            unset($data['org_guid']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('canvaUserId') && null !== $data->getCanvaUserId()) {
            $dataArray['canva_user_id'] = $data->getCanvaUserId();
        }
        if ($data->isInitialized('canvaBrandId') && null !== $data->getCanvaBrandId()) {
            $dataArray['canva_brand_id'] = $data->getCanvaBrandId();
        }
        if ($data->isInitialized('login') && null !== $data->getLogin()) {
            $dataArray['login'] = $data->getLogin();
        }
        if ($data->isInitialized('active') && null !== $data->getActive()) {
            $dataArray['active'] = $data->getActive();
        }
        if ($data->isInitialized('brandGuid') && null !== $data->getBrandGuid()) {
            $dataArray['brand_guid'] = $data->getBrandGuid();
        }
        if ($data->isInitialized('orgGuid') && null !== $data->getOrgGuid()) {
            $dataArray['org_guid'] = $data->getOrgGuid();
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\PublicCanvaUserBrand::class => false];
    }
}
