<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class TextBlockAppearanceNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\TextBlockAppearance::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\TextBlockAppearance::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\TextBlockAppearance();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('background_color', $data)) {
            $object->setBackgroundColor($data['background_color']);
            unset($data['background_color']);
        }
        if (\array_key_exists('text_color', $data)) {
            $object->setTextColor($data['text_color']);
            unset($data['text_color']);
        }
        if (\array_key_exists('alignment', $data)) {
            $object->setAlignment($data['alignment']);
            unset($data['alignment']);
        }
        if (\array_key_exists('text_block_style', $data)) {
            $object->setTextBlockStyle($this->denormalizer->denormalize($data['text_block_style'], \Bitly\Model\TextBlockStyle::class, 'json', $context));
            unset($data['text_block_style']);
        }
        if (\array_key_exists('font_size', $data)) {
            $object->setFontSize($data['font_size']);
            unset($data['font_size']);
        }
        if (\array_key_exists('shape', $data)) {
            $object->setShape($data['shape']);
            unset($data['shape']);
        }
        if (\array_key_exists('shadow', $data)) {
            $object->setShadow($data['shadow']);
            unset($data['shadow']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('backgroundColor') && null !== $data->getBackgroundColor()) {
            $dataArray['background_color'] = $data->getBackgroundColor();
        }
        if ($data->isInitialized('textColor') && null !== $data->getTextColor()) {
            $dataArray['text_color'] = $data->getTextColor();
        }
        if ($data->isInitialized('alignment') && null !== $data->getAlignment()) {
            $dataArray['alignment'] = $data->getAlignment();
        }
        if ($data->isInitialized('textBlockStyle') && null !== $data->getTextBlockStyle()) {
            $dataArray['text_block_style'] = $this->normalizer->normalize($data->getTextBlockStyle(), 'json', $context);
        }
        if ($data->isInitialized('fontSize') && null !== $data->getFontSize()) {
            $dataArray['font_size'] = $data->getFontSize();
        }
        if ($data->isInitialized('shape') && null !== $data->getShape()) {
            $dataArray['shape'] = $data->getShape();
        }
        if ($data->isInitialized('shadow') && null !== $data->getShadow()) {
            $dataArray['shadow'] = $data->getShadow();
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\TextBlockAppearance::class => false];
    }
}
