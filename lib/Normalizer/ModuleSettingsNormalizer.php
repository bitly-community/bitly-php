<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ModuleSettingsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\ModuleSettings::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\ModuleSettings::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\ModuleSettings();
        if (\array_key_exists('allow_edits', $data) && \is_int($data['allow_edits'])) {
            $data['allow_edits'] = (bool) $data['allow_edits'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('allow_edits', $data)) {
            $object->setAllowEdits($data['allow_edits']);
            unset($data['allow_edits']);
        }
        if (\array_key_exists('visualization', $data)) {
            $object->setVisualization($this->denormalizer->denormalize($data['visualization'], \Bitly\Model\ChartVisualization::class, 'json', $context));
            unset($data['visualization']);
        }
        if (\array_key_exists('chart_type', $data)) {
            $object->setChartType($data['chart_type']);
            unset($data['chart_type']);
        }
        if (\array_key_exists('view_metric_selection', $data)) {
            $object->setViewMetricSelection($data['view_metric_selection']);
            unset($data['view_metric_selection']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('allowEdits') && null !== $data->getAllowEdits()) {
            $dataArray['allow_edits'] = $data->getAllowEdits();
        }
        if ($data->isInitialized('visualization') && null !== $data->getVisualization()) {
            $dataArray['visualization'] = $this->normalizer->normalize($data->getVisualization(), 'json', $context);
        }
        if ($data->isInitialized('chartType') && null !== $data->getChartType()) {
            $dataArray['chart_type'] = $data->getChartType();
        }
        if ($data->isInitialized('viewMetricSelection') && null !== $data->getViewMetricSelection()) {
            $dataArray['view_metric_selection'] = $data->getViewMetricSelection();
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\ModuleSettings::class => false];
    }
}
