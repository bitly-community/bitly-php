<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class SiteBlockNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\SiteBlock::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\SiteBlock::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\SiteBlock();
        if (\array_key_exists('is_active', $data) && \is_int($data['is_active'])) {
            $data['is_active'] = (bool) $data['is_active'];
        }
        if (\array_key_exists('is_pinned', $data) && \is_int($data['is_pinned'])) {
            $data['is_pinned'] = (bool) $data['is_pinned'];
        }
        if (\array_key_exists('is_sample', $data) && \is_int($data['is_sample'])) {
            $data['is_sample'] = (bool) $data['is_sample'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('container_id', $data)) {
            $object->setContainerId($data['container_id']);
            unset($data['container_id']);
        }
        if (\array_key_exists('content', $data)) {
            $object->setContent($this->denormalizer->denormalize($data['content'], \Bitly\Model\SiteBlockContent::class, 'json', $context));
            unset($data['content']);
        }
        if (\array_key_exists('site_id', $data)) {
            $object->setSiteId($data['site_id']);
            unset($data['site_id']);
        }
        if (\array_key_exists('block_id', $data)) {
            $object->setBlockId($data['block_id']);
            unset($data['block_id']);
        }
        if (\array_key_exists('sort_order', $data)) {
            $object->setSortOrder($data['sort_order']);
            unset($data['sort_order']);
        }
        if (\array_key_exists('schedule_start', $data)) {
            $object->setScheduleStart($data['schedule_start']);
            unset($data['schedule_start']);
        }
        if (\array_key_exists('schedule_end', $data)) {
            $object->setScheduleEnd($data['schedule_end']);
            unset($data['schedule_end']);
        }
        if (\array_key_exists('is_active', $data)) {
            $object->setIsActive($data['is_active']);
            unset($data['is_active']);
        }
        if (\array_key_exists('is_pinned', $data)) {
            $object->setIsPinned($data['is_pinned']);
            unset($data['is_pinned']);
        }
        if (\array_key_exists('is_sample', $data)) {
            $object->setIsSample($data['is_sample']);
            unset($data['is_sample']);
        }
        if (\array_key_exists('type', $data)) {
            $object->setType($data['type']);
            unset($data['type']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('containerId') && null !== $data->getContainerId()) {
            $dataArray['container_id'] = $data->getContainerId();
        }
        if ($data->isInitialized('content') && null !== $data->getContent()) {
            $dataArray['content'] = $this->normalizer->normalize($data->getContent(), 'json', $context);
        }
        if ($data->isInitialized('siteId') && null !== $data->getSiteId()) {
            $dataArray['site_id'] = $data->getSiteId();
        }
        if ($data->isInitialized('blockId') && null !== $data->getBlockId()) {
            $dataArray['block_id'] = $data->getBlockId();
        }
        if ($data->isInitialized('sortOrder') && null !== $data->getSortOrder()) {
            $dataArray['sort_order'] = $data->getSortOrder();
        }
        if ($data->isInitialized('scheduleStart') && null !== $data->getScheduleStart()) {
            $dataArray['schedule_start'] = $data->getScheduleStart();
        }
        if ($data->isInitialized('scheduleEnd') && null !== $data->getScheduleEnd()) {
            $dataArray['schedule_end'] = $data->getScheduleEnd();
        }
        if ($data->isInitialized('isActive') && null !== $data->getIsActive()) {
            $dataArray['is_active'] = $data->getIsActive();
        }
        if ($data->isInitialized('isPinned') && null !== $data->getIsPinned()) {
            $dataArray['is_pinned'] = $data->getIsPinned();
        }
        if ($data->isInitialized('isSample') && null !== $data->getIsSample()) {
            $dataArray['is_sample'] = $data->getIsSample();
        }
        if ($data->isInitialized('type') && null !== $data->getType()) {
            $dataArray['type'] = $data->getType();
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\SiteBlock::class => false];
    }
}
