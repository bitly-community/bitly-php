<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class UpgradeOrgBodyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \Bitly\Model\UpgradeOrgBody::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \Bitly\Model\UpgradeOrgBody::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Bitly\Model\UpgradeOrgBody();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('org_guid', $data)) {
                $object->setOrgGuid($data['org_guid']);
                unset($data['org_guid']);
            }
            if (\array_key_exists('payment_method_id', $data)) {
                $object->setPaymentMethodId($data['payment_method_id']);
                unset($data['payment_method_id']);
            }
            if (\array_key_exists('currency', $data)) {
                $object->setCurrency($data['currency']);
                unset($data['currency']);
            }
            if (\array_key_exists('payment_provider', $data)) {
                $object->setPaymentProvider($data['payment_provider']);
                unset($data['payment_provider']);
            }
            if (\array_key_exists('rate_plan_name', $data)) {
                $object->setRatePlanName($data['rate_plan_name']);
                unset($data['rate_plan_name']);
            }
            if (\array_key_exists('company_name', $data)) {
                $object->setCompanyName($data['company_name']);
                unset($data['company_name']);
            }
            if (\array_key_exists('tax_id', $data)) {
                $object->setTaxId($data['tax_id']);
                unset($data['tax_id']);
            }
            if (\array_key_exists('promo_code', $data)) {
                $object->setPromoCode($data['promo_code']);
                unset($data['promo_code']);
            }
            if (\array_key_exists('billing_info', $data)) {
                $object->setBillingInfo($this->denormalizer->denormalize($data['billing_info'], \Bitly\Model\BillingInfo::class, 'json', $context));
                unset($data['billing_info']);
            }
            if (\array_key_exists('contact_info', $data)) {
                $object->setContactInfo($this->denormalizer->denormalize($data['contact_info'], \Bitly\Model\BillingInfo::class, 'json', $context));
                unset($data['contact_info']);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('orgGuid') && null !== $object->getOrgGuid()) {
                $data['org_guid'] = $object->getOrgGuid();
            }
            if ($object->isInitialized('paymentMethodId') && null !== $object->getPaymentMethodId()) {
                $data['payment_method_id'] = $object->getPaymentMethodId();
            }
            if ($object->isInitialized('currency') && null !== $object->getCurrency()) {
                $data['currency'] = $object->getCurrency();
            }
            if ($object->isInitialized('paymentProvider') && null !== $object->getPaymentProvider()) {
                $data['payment_provider'] = $object->getPaymentProvider();
            }
            if ($object->isInitialized('ratePlanName') && null !== $object->getRatePlanName()) {
                $data['rate_plan_name'] = $object->getRatePlanName();
            }
            if ($object->isInitialized('companyName') && null !== $object->getCompanyName()) {
                $data['company_name'] = $object->getCompanyName();
            }
            if ($object->isInitialized('taxId') && null !== $object->getTaxId()) {
                $data['tax_id'] = $object->getTaxId();
            }
            if ($object->isInitialized('promoCode') && null !== $object->getPromoCode()) {
                $data['promo_code'] = $object->getPromoCode();
            }
            if ($object->isInitialized('billingInfo') && null !== $object->getBillingInfo()) {
                $data['billing_info'] = $this->normalizer->normalize($object->getBillingInfo(), 'json', $context);
            }
            if ($object->isInitialized('contactInfo') && null !== $object->getContactInfo()) {
                $data['contact_info'] = $this->normalizer->normalize($object->getContactInfo(), 'json', $context);
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\Bitly\Model\UpgradeOrgBody::class => false];
        }
    }
} else {
    class UpgradeOrgBodyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \Bitly\Model\UpgradeOrgBody::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \Bitly\Model\UpgradeOrgBody::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Bitly\Model\UpgradeOrgBody();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('org_guid', $data)) {
                $object->setOrgGuid($data['org_guid']);
                unset($data['org_guid']);
            }
            if (\array_key_exists('payment_method_id', $data)) {
                $object->setPaymentMethodId($data['payment_method_id']);
                unset($data['payment_method_id']);
            }
            if (\array_key_exists('currency', $data)) {
                $object->setCurrency($data['currency']);
                unset($data['currency']);
            }
            if (\array_key_exists('payment_provider', $data)) {
                $object->setPaymentProvider($data['payment_provider']);
                unset($data['payment_provider']);
            }
            if (\array_key_exists('rate_plan_name', $data)) {
                $object->setRatePlanName($data['rate_plan_name']);
                unset($data['rate_plan_name']);
            }
            if (\array_key_exists('company_name', $data)) {
                $object->setCompanyName($data['company_name']);
                unset($data['company_name']);
            }
            if (\array_key_exists('tax_id', $data)) {
                $object->setTaxId($data['tax_id']);
                unset($data['tax_id']);
            }
            if (\array_key_exists('promo_code', $data)) {
                $object->setPromoCode($data['promo_code']);
                unset($data['promo_code']);
            }
            if (\array_key_exists('billing_info', $data)) {
                $object->setBillingInfo($this->denormalizer->denormalize($data['billing_info'], \Bitly\Model\BillingInfo::class, 'json', $context));
                unset($data['billing_info']);
            }
            if (\array_key_exists('contact_info', $data)) {
                $object->setContactInfo($this->denormalizer->denormalize($data['contact_info'], \Bitly\Model\BillingInfo::class, 'json', $context));
                unset($data['contact_info']);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('orgGuid') && null !== $object->getOrgGuid()) {
                $data['org_guid'] = $object->getOrgGuid();
            }
            if ($object->isInitialized('paymentMethodId') && null !== $object->getPaymentMethodId()) {
                $data['payment_method_id'] = $object->getPaymentMethodId();
            }
            if ($object->isInitialized('currency') && null !== $object->getCurrency()) {
                $data['currency'] = $object->getCurrency();
            }
            if ($object->isInitialized('paymentProvider') && null !== $object->getPaymentProvider()) {
                $data['payment_provider'] = $object->getPaymentProvider();
            }
            if ($object->isInitialized('ratePlanName') && null !== $object->getRatePlanName()) {
                $data['rate_plan_name'] = $object->getRatePlanName();
            }
            if ($object->isInitialized('companyName') && null !== $object->getCompanyName()) {
                $data['company_name'] = $object->getCompanyName();
            }
            if ($object->isInitialized('taxId') && null !== $object->getTaxId()) {
                $data['tax_id'] = $object->getTaxId();
            }
            if ($object->isInitialized('promoCode') && null !== $object->getPromoCode()) {
                $data['promo_code'] = $object->getPromoCode();
            }
            if ($object->isInitialized('billingInfo') && null !== $object->getBillingInfo()) {
                $data['billing_info'] = $this->normalizer->normalize($object->getBillingInfo(), 'json', $context);
            }
            if ($object->isInitialized('contactInfo') && null !== $object->getContactInfo()) {
                $data['contact_info'] = $this->normalizer->normalize($object->getContactInfo(), 'json', $context);
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\Bitly\Model\UpgradeOrgBody::class => false];
        }
    }
}
