<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ReportSettingsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\ReportSettings::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\ReportSettings::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\ReportSettings();
        if (\array_key_exists('allow_edits', $data) && \is_int($data['allow_edits'])) {
            $data['allow_edits'] = (bool) $data['allow_edits'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('preset_time_range', $data)) {
            $object->setPresetTimeRange($data['preset_time_range']);
            unset($data['preset_time_range']);
        }
        if (\array_key_exists('report_start', $data)) {
            $object->setReportStart($data['report_start']);
            unset($data['report_start']);
        }
        if (\array_key_exists('report_end', $data)) {
            $object->setReportEnd($data['report_end']);
            unset($data['report_end']);
        }
        if (\array_key_exists('allow_edits', $data)) {
            $object->setAllowEdits($data['allow_edits']);
            unset($data['allow_edits']);
        }
        if (\array_key_exists('filters', $data)) {
            $object->setFilters($this->denormalizer->denormalize($data['filters'], \Bitly\Model\ReportFilters::class, 'json', $context));
            unset($data['filters']);
        }
        if (\array_key_exists('associated_modules', $data)) {
            $values = [];
            foreach ($data['associated_modules'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, \Bitly\Model\Module::class, 'json', $context);
            }
            $object->setAssociatedModules($values);
            unset($data['associated_modules']);
        }
        if (\array_key_exists('report_content', $data)) {
            $object->setReportContent($this->denormalizer->denormalize($data['report_content'], \Bitly\Model\AnalyticsReportContent::class, 'json', $context));
            unset($data['report_content']);
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_1;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('presetTimeRange') && null !== $data->getPresetTimeRange()) {
            $dataArray['preset_time_range'] = $data->getPresetTimeRange();
        }
        if ($data->isInitialized('reportStart') && null !== $data->getReportStart()) {
            $dataArray['report_start'] = $data->getReportStart();
        }
        if ($data->isInitialized('reportEnd') && null !== $data->getReportEnd()) {
            $dataArray['report_end'] = $data->getReportEnd();
        }
        if ($data->isInitialized('allowEdits') && null !== $data->getAllowEdits()) {
            $dataArray['allow_edits'] = $data->getAllowEdits();
        }
        if ($data->isInitialized('filters') && null !== $data->getFilters()) {
            $dataArray['filters'] = $this->normalizer->normalize($data->getFilters(), 'json', $context);
        }
        if ($data->isInitialized('associatedModules') && null !== $data->getAssociatedModules()) {
            $values = [];
            foreach ($data->getAssociatedModules() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $dataArray['associated_modules'] = $values;
        }
        if ($data->isInitialized('reportContent') && null !== $data->getReportContent()) {
            $dataArray['report_content'] = $this->normalizer->normalize($data->getReportContent(), 'json', $context);
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_1;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\ReportSettings::class => false];
    }
}
