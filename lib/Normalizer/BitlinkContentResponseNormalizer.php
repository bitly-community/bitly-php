<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class BitlinkContentResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\BitlinkContentResponse::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\BitlinkContentResponse::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\BitlinkContentResponse();
        if (\array_key_exists('is_pinned', $data) && \is_int($data['is_pinned'])) {
            $data['is_pinned'] = (bool) $data['is_pinned'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('bitlink_id', $data)) {
            $object->setBitlinkId($data['bitlink_id']);
            unset($data['bitlink_id']);
        }
        if (\array_key_exists('link_title', $data)) {
            $object->setLinkTitle($data['link_title']);
            unset($data['link_title']);
        }
        if (\array_key_exists('description', $data)) {
            $object->setDescription($data['description']);
            unset($data['description']);
        }
        if (\array_key_exists('is_pinned', $data)) {
            $object->setIsPinned($data['is_pinned']);
            unset($data['is_pinned']);
        }
        if (\array_key_exists('image_url', $data)) {
            $object->setImageUrl($data['image_url']);
            unset($data['image_url']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('bitlinkId') && null !== $data->getBitlinkId()) {
            $dataArray['bitlink_id'] = $data->getBitlinkId();
        }
        if ($data->isInitialized('linkTitle') && null !== $data->getLinkTitle()) {
            $dataArray['link_title'] = $data->getLinkTitle();
        }
        if ($data->isInitialized('description') && null !== $data->getDescription()) {
            $dataArray['description'] = $data->getDescription();
        }
        if ($data->isInitialized('isPinned') && null !== $data->getIsPinned()) {
            $dataArray['is_pinned'] = $data->getIsPinned();
        }
        if ($data->isInitialized('imageUrl') && null !== $data->getImageUrl()) {
            $dataArray['image_url'] = $data->getImageUrl();
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\BitlinkContentResponse::class => false];
    }
}
