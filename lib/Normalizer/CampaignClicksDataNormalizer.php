<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CampaignClicksDataNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\CampaignClicksData::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\CampaignClicksData::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\CampaignClicksData();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('guid', $data)) {
            $object->setGuid($data['guid']);
            unset($data['guid']);
        }
        if (\array_key_exists('brand_guid', $data)) {
            $object->setBrandGuid($data['brand_guid']);
            unset($data['brand_guid']);
        }
        if (\array_key_exists('created_by', $data)) {
            $object->setCreatedBy($data['created_by']);
            unset($data['created_by']);
        }
        if (\array_key_exists('name', $data)) {
            $object->setName($data['name']);
            unset($data['name']);
        }
        if (\array_key_exists('description', $data)) {
            $object->setDescription($data['description']);
            unset($data['description']);
        }
        if (\array_key_exists('created_ts', $data)) {
            $object->setCreatedTs($data['created_ts']);
            unset($data['created_ts']);
        }
        if (\array_key_exists('total_clicks', $data)) {
            $object->setTotalClicks($data['total_clicks']);
            unset($data['total_clicks']);
        }
        if (\array_key_exists('campaign_channels', $data)) {
            $values = [];
            foreach ($data['campaign_channels'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, \Bitly\Model\CampaignChannelClicks::class, 'json', $context);
            }
            $object->setCampaignChannels($values);
            unset($data['campaign_channels']);
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_1;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('guid') && null !== $data->getGuid()) {
            $dataArray['guid'] = $data->getGuid();
        }
        if ($data->isInitialized('brandGuid') && null !== $data->getBrandGuid()) {
            $dataArray['brand_guid'] = $data->getBrandGuid();
        }
        if ($data->isInitialized('createdBy') && null !== $data->getCreatedBy()) {
            $dataArray['created_by'] = $data->getCreatedBy();
        }
        if ($data->isInitialized('name') && null !== $data->getName()) {
            $dataArray['name'] = $data->getName();
        }
        if ($data->isInitialized('description') && null !== $data->getDescription()) {
            $dataArray['description'] = $data->getDescription();
        }
        if ($data->isInitialized('createdTs') && null !== $data->getCreatedTs()) {
            $dataArray['created_ts'] = $data->getCreatedTs();
        }
        if ($data->isInitialized('totalClicks') && null !== $data->getTotalClicks()) {
            $dataArray['total_clicks'] = $data->getTotalClicks();
        }
        if ($data->isInitialized('campaignChannels') && null !== $data->getCampaignChannels()) {
            $values = [];
            foreach ($data->getCampaignChannels() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $dataArray['campaign_channels'] = $values;
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_1;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\CampaignClicksData::class => false];
    }
}
