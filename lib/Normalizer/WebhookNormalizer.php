<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class WebhookNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \Bitly\Model\Webhook::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \Bitly\Model\Webhook::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Bitly\Model\Webhook();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('references', $data)) {
                $values = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
                foreach ($data['references'] as $key => $value) {
                    $values[$key] = $value;
                }
                $object->setReferences($values);
                unset($data['references']);
            }
            if (\array_key_exists('guid', $data)) {
                $object->setGuid($data['guid']);
                unset($data['guid']);
            }
            if (\array_key_exists('created', $data)) {
                $object->setCreated($data['created']);
                unset($data['created']);
            }
            if (\array_key_exists('modified', $data)) {
                $object->setModified($data['modified']);
                unset($data['modified']);
            }
            if (\array_key_exists('modified_by', $data)) {
                $object->setModifiedBy($data['modified_by']);
                unset($data['modified_by']);
            }
            if (\array_key_exists('alerted', $data)) {
                $object->setAlerted($data['alerted']);
                unset($data['alerted']);
            }
            if (\array_key_exists('deactivated', $data)) {
                $object->setDeactivated($data['deactivated']);
                unset($data['deactivated']);
            }
            if (\array_key_exists('is_active', $data)) {
                $object->setIsActive($data['is_active']);
                unset($data['is_active']);
            }
            if (\array_key_exists('is_alert', $data)) {
                $object->setIsAlert($data['is_alert']);
                unset($data['is_alert']);
            }
            if (\array_key_exists('organization_guid', $data)) {
                $object->setOrganizationGuid($data['organization_guid']);
                unset($data['organization_guid']);
            }
            if (\array_key_exists('group_guid', $data)) {
                $object->setGroupGuid($data['group_guid']);
                unset($data['group_guid']);
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
                unset($data['name']);
            }
            if (\array_key_exists('event', $data)) {
                $object->setEvent($data['event']);
                unset($data['event']);
            }
            if (\array_key_exists('url', $data)) {
                $object->setUrl($data['url']);
                unset($data['url']);
            }
            if (\array_key_exists('status', $data)) {
                $object->setStatus($data['status']);
                unset($data['status']);
            }
            if (\array_key_exists('oauth_url', $data)) {
                $object->setOauthUrl($data['oauth_url']);
                unset($data['oauth_url']);
            }
            if (\array_key_exists('client_id', $data)) {
                $object->setClientId($data['client_id']);
                unset($data['client_id']);
            }
            if (\array_key_exists('client_secret', $data)) {
                $object->setClientSecret($data['client_secret']);
                unset($data['client_secret']);
            }
            if (\array_key_exists('fetch_tags', $data)) {
                $object->setFetchTags($data['fetch_tags']);
                unset($data['fetch_tags']);
            }
            foreach ($data as $key_1 => $value_1) {
                if (preg_match('/.*/', (string) $key_1)) {
                    $object[$key_1] = $value_1;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('references') && null !== $object->getReferences()) {
                $values = [];
                foreach ($object->getReferences() as $key => $value) {
                    $values[$key] = $value;
                }
                $data['references'] = $values;
            }
            if ($object->isInitialized('guid') && null !== $object->getGuid()) {
                $data['guid'] = $object->getGuid();
            }
            if ($object->isInitialized('created') && null !== $object->getCreated()) {
                $data['created'] = $object->getCreated();
            }
            if ($object->isInitialized('modified') && null !== $object->getModified()) {
                $data['modified'] = $object->getModified();
            }
            if ($object->isInitialized('modifiedBy') && null !== $object->getModifiedBy()) {
                $data['modified_by'] = $object->getModifiedBy();
            }
            if ($object->isInitialized('alerted') && null !== $object->getAlerted()) {
                $data['alerted'] = $object->getAlerted();
            }
            if ($object->isInitialized('deactivated') && null !== $object->getDeactivated()) {
                $data['deactivated'] = $object->getDeactivated();
            }
            if ($object->isInitialized('isActive') && null !== $object->getIsActive()) {
                $data['is_active'] = $object->getIsActive();
            }
            if ($object->isInitialized('isAlert') && null !== $object->getIsAlert()) {
                $data['is_alert'] = $object->getIsAlert();
            }
            if ($object->isInitialized('organizationGuid') && null !== $object->getOrganizationGuid()) {
                $data['organization_guid'] = $object->getOrganizationGuid();
            }
            if ($object->isInitialized('groupGuid') && null !== $object->getGroupGuid()) {
                $data['group_guid'] = $object->getGroupGuid();
            }
            if ($object->isInitialized('name') && null !== $object->getName()) {
                $data['name'] = $object->getName();
            }
            if ($object->isInitialized('event') && null !== $object->getEvent()) {
                $data['event'] = $object->getEvent();
            }
            if ($object->isInitialized('url') && null !== $object->getUrl()) {
                $data['url'] = $object->getUrl();
            }
            if ($object->isInitialized('status') && null !== $object->getStatus()) {
                $data['status'] = $object->getStatus();
            }
            if ($object->isInitialized('oauthUrl') && null !== $object->getOauthUrl()) {
                $data['oauth_url'] = $object->getOauthUrl();
            }
            if ($object->isInitialized('clientId') && null !== $object->getClientId()) {
                $data['client_id'] = $object->getClientId();
            }
            if ($object->isInitialized('clientSecret') && null !== $object->getClientSecret()) {
                $data['client_secret'] = $object->getClientSecret();
            }
            if ($object->isInitialized('fetchTags') && null !== $object->getFetchTags()) {
                $data['fetch_tags'] = $object->getFetchTags();
            }
            foreach ($object as $key_1 => $value_1) {
                if (preg_match('/.*/', (string) $key_1)) {
                    $data[$key_1] = $value_1;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\Bitly\Model\Webhook::class => false];
        }
    }
} else {
    class WebhookNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \Bitly\Model\Webhook::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \Bitly\Model\Webhook::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Bitly\Model\Webhook();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('references', $data)) {
                $values = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
                foreach ($data['references'] as $key => $value) {
                    $values[$key] = $value;
                }
                $object->setReferences($values);
                unset($data['references']);
            }
            if (\array_key_exists('guid', $data)) {
                $object->setGuid($data['guid']);
                unset($data['guid']);
            }
            if (\array_key_exists('created', $data)) {
                $object->setCreated($data['created']);
                unset($data['created']);
            }
            if (\array_key_exists('modified', $data)) {
                $object->setModified($data['modified']);
                unset($data['modified']);
            }
            if (\array_key_exists('modified_by', $data)) {
                $object->setModifiedBy($data['modified_by']);
                unset($data['modified_by']);
            }
            if (\array_key_exists('alerted', $data)) {
                $object->setAlerted($data['alerted']);
                unset($data['alerted']);
            }
            if (\array_key_exists('deactivated', $data)) {
                $object->setDeactivated($data['deactivated']);
                unset($data['deactivated']);
            }
            if (\array_key_exists('is_active', $data)) {
                $object->setIsActive($data['is_active']);
                unset($data['is_active']);
            }
            if (\array_key_exists('is_alert', $data)) {
                $object->setIsAlert($data['is_alert']);
                unset($data['is_alert']);
            }
            if (\array_key_exists('organization_guid', $data)) {
                $object->setOrganizationGuid($data['organization_guid']);
                unset($data['organization_guid']);
            }
            if (\array_key_exists('group_guid', $data)) {
                $object->setGroupGuid($data['group_guid']);
                unset($data['group_guid']);
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
                unset($data['name']);
            }
            if (\array_key_exists('event', $data)) {
                $object->setEvent($data['event']);
                unset($data['event']);
            }
            if (\array_key_exists('url', $data)) {
                $object->setUrl($data['url']);
                unset($data['url']);
            }
            if (\array_key_exists('status', $data)) {
                $object->setStatus($data['status']);
                unset($data['status']);
            }
            if (\array_key_exists('oauth_url', $data)) {
                $object->setOauthUrl($data['oauth_url']);
                unset($data['oauth_url']);
            }
            if (\array_key_exists('client_id', $data)) {
                $object->setClientId($data['client_id']);
                unset($data['client_id']);
            }
            if (\array_key_exists('client_secret', $data)) {
                $object->setClientSecret($data['client_secret']);
                unset($data['client_secret']);
            }
            if (\array_key_exists('fetch_tags', $data)) {
                $object->setFetchTags($data['fetch_tags']);
                unset($data['fetch_tags']);
            }
            foreach ($data as $key_1 => $value_1) {
                if (preg_match('/.*/', (string) $key_1)) {
                    $object[$key_1] = $value_1;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('references') && null !== $object->getReferences()) {
                $values = [];
                foreach ($object->getReferences() as $key => $value) {
                    $values[$key] = $value;
                }
                $data['references'] = $values;
            }
            if ($object->isInitialized('guid') && null !== $object->getGuid()) {
                $data['guid'] = $object->getGuid();
            }
            if ($object->isInitialized('created') && null !== $object->getCreated()) {
                $data['created'] = $object->getCreated();
            }
            if ($object->isInitialized('modified') && null !== $object->getModified()) {
                $data['modified'] = $object->getModified();
            }
            if ($object->isInitialized('modifiedBy') && null !== $object->getModifiedBy()) {
                $data['modified_by'] = $object->getModifiedBy();
            }
            if ($object->isInitialized('alerted') && null !== $object->getAlerted()) {
                $data['alerted'] = $object->getAlerted();
            }
            if ($object->isInitialized('deactivated') && null !== $object->getDeactivated()) {
                $data['deactivated'] = $object->getDeactivated();
            }
            if ($object->isInitialized('isActive') && null !== $object->getIsActive()) {
                $data['is_active'] = $object->getIsActive();
            }
            if ($object->isInitialized('isAlert') && null !== $object->getIsAlert()) {
                $data['is_alert'] = $object->getIsAlert();
            }
            if ($object->isInitialized('organizationGuid') && null !== $object->getOrganizationGuid()) {
                $data['organization_guid'] = $object->getOrganizationGuid();
            }
            if ($object->isInitialized('groupGuid') && null !== $object->getGroupGuid()) {
                $data['group_guid'] = $object->getGroupGuid();
            }
            if ($object->isInitialized('name') && null !== $object->getName()) {
                $data['name'] = $object->getName();
            }
            if ($object->isInitialized('event') && null !== $object->getEvent()) {
                $data['event'] = $object->getEvent();
            }
            if ($object->isInitialized('url') && null !== $object->getUrl()) {
                $data['url'] = $object->getUrl();
            }
            if ($object->isInitialized('status') && null !== $object->getStatus()) {
                $data['status'] = $object->getStatus();
            }
            if ($object->isInitialized('oauthUrl') && null !== $object->getOauthUrl()) {
                $data['oauth_url'] = $object->getOauthUrl();
            }
            if ($object->isInitialized('clientId') && null !== $object->getClientId()) {
                $data['client_id'] = $object->getClientId();
            }
            if ($object->isInitialized('clientSecret') && null !== $object->getClientSecret()) {
                $data['client_secret'] = $object->getClientSecret();
            }
            if ($object->isInitialized('fetchTags') && null !== $object->getFetchTags()) {
                $data['fetch_tags'] = $object->getFetchTags();
            }
            foreach ($object as $key_1 => $value_1) {
                if (preg_match('/.*/', (string) $key_1)) {
                    $data[$key_1] = $value_1;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\Bitly\Model\Webhook::class => false];
        }
    }
}
