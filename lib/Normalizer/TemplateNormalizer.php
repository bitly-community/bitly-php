<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class TemplateNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\Template::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\Template::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\Template();
        if (\array_key_exists('is_active', $data) && \is_int($data['is_active'])) {
            $data['is_active'] = (bool) $data['is_active'];
        }
        if (\array_key_exists('is_paid', $data) && \is_int($data['is_paid'])) {
            $data['is_paid'] = (bool) $data['is_paid'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('template_guid', $data)) {
            $object->setTemplateGuid($data['template_guid']);
            unset($data['template_guid']);
        }
        if (\array_key_exists('content', $data)) {
            $object->setContent($this->denormalizer->denormalize($data['content'], \Bitly\Model\BitlySiteContent::class, 'json', $context));
            unset($data['content']);
        }
        if (\array_key_exists('appearance', $data)) {
            $object->setAppearance($this->denormalizer->denormalize($data['appearance'], \Bitly\Model\BitlySiteAppearance::class, 'json', $context));
            unset($data['appearance']);
        }
        if (\array_key_exists('blocks', $data)) {
            $values = [];
            foreach ($data['blocks'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, \Bitly\Model\SiteBlock::class, 'json', $context);
            }
            $object->setBlocks($values);
            unset($data['blocks']);
        }
        if (\array_key_exists('status', $data)) {
            $object->setStatus($data['status']);
            unset($data['status']);
        }
        if (\array_key_exists('categories', $data)) {
            $values_1 = [];
            foreach ($data['categories'] as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setCategories($values_1);
            unset($data['categories']);
        }
        if (\array_key_exists('created', $data)) {
            $object->setCreated($data['created']);
            unset($data['created']);
        }
        if (\array_key_exists('modified', $data)) {
            $object->setModified($data['modified']);
            unset($data['modified']);
        }
        if (\array_key_exists('is_active', $data)) {
            $object->setIsActive($data['is_active']);
            unset($data['is_active']);
        }
        if (\array_key_exists('is_paid', $data)) {
            $object->setIsPaid($data['is_paid']);
            unset($data['is_paid']);
        }
        foreach ($data as $key => $value_2) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_2;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('templateGuid') && null !== $data->getTemplateGuid()) {
            $dataArray['template_guid'] = $data->getTemplateGuid();
        }
        if ($data->isInitialized('content') && null !== $data->getContent()) {
            $dataArray['content'] = $this->normalizer->normalize($data->getContent(), 'json', $context);
        }
        if ($data->isInitialized('appearance') && null !== $data->getAppearance()) {
            $dataArray['appearance'] = $this->normalizer->normalize($data->getAppearance(), 'json', $context);
        }
        if ($data->isInitialized('blocks') && null !== $data->getBlocks()) {
            $values = [];
            foreach ($data->getBlocks() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $dataArray['blocks'] = $values;
        }
        if ($data->isInitialized('status') && null !== $data->getStatus()) {
            $dataArray['status'] = $data->getStatus();
        }
        if ($data->isInitialized('categories') && null !== $data->getCategories()) {
            $values_1 = [];
            foreach ($data->getCategories() as $value_1) {
                $values_1[] = $value_1;
            }
            $dataArray['categories'] = $values_1;
        }
        if ($data->isInitialized('created') && null !== $data->getCreated()) {
            $dataArray['created'] = $data->getCreated();
        }
        if ($data->isInitialized('modified') && null !== $data->getModified()) {
            $dataArray['modified'] = $data->getModified();
        }
        if ($data->isInitialized('isActive') && null !== $data->getIsActive()) {
            $dataArray['is_active'] = $data->getIsActive();
        }
        if ($data->isInitialized('isPaid') && null !== $data->getIsPaid()) {
            $dataArray['is_paid'] = $data->getIsPaid();
        }
        foreach ($data as $key => $value_2) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_2;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\Template::class => false];
    }
}
