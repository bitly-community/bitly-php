<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CreateCustomerBodyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\CreateCustomerBody::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\CreateCustomerBody::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\CreateCustomerBody();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('org_guid', $data)) {
            $object->setOrgGuid($data['org_guid']);
            unset($data['org_guid']);
        }
        if (\array_key_exists('tax_address', $data)) {
            $object->setTaxAddress($this->denormalizer->denormalize($data['tax_address'], \Bitly\Model\BillingAddress::class, 'json', $context));
            unset($data['tax_address']);
        }
        if (\array_key_exists('invoice_info', $data)) {
            $object->setInvoiceInfo($this->denormalizer->denormalize($data['invoice_info'], \Bitly\Model\BillingInfo::class, 'json', $context));
            unset($data['invoice_info']);
        }
        if (\array_key_exists('company_name', $data)) {
            $object->setCompanyName($data['company_name']);
            unset($data['company_name']);
        }
        if (\array_key_exists('tax_id', $data)) {
            $object->setTaxId($data['tax_id']);
            unset($data['tax_id']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('orgGuid') && null !== $data->getOrgGuid()) {
            $dataArray['org_guid'] = $data->getOrgGuid();
        }
        if ($data->isInitialized('taxAddress') && null !== $data->getTaxAddress()) {
            $dataArray['tax_address'] = $this->normalizer->normalize($data->getTaxAddress(), 'json', $context);
        }
        if ($data->isInitialized('invoiceInfo') && null !== $data->getInvoiceInfo()) {
            $dataArray['invoice_info'] = $this->normalizer->normalize($data->getInvoiceInfo(), 'json', $context);
        }
        if ($data->isInitialized('companyName') && null !== $data->getCompanyName()) {
            $dataArray['company_name'] = $data->getCompanyName();
        }
        if ($data->isInitialized('taxId') && null !== $data->getTaxId()) {
            $dataArray['tax_id'] = $data->getTaxId();
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\CreateCustomerBody::class => false];
    }
}
