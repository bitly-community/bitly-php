<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class DigitalBusinessCardContentNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \Bitly\Model\DigitalBusinessCardContent::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \Bitly\Model\DigitalBusinessCardContent::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Bitly\Model\DigitalBusinessCardContent();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('digital_business_card_id', $data)) {
                $object->setDigitalBusinessCardId($data['digital_business_card_id']);
                unset($data['digital_business_card_id']);
            }
            if (\array_key_exists('link_title', $data)) {
                $object->setLinkTitle($data['link_title']);
                unset($data['link_title']);
            }
            if (\array_key_exists('layout', $data)) {
                $object->setLayout($data['layout']);
                unset($data['layout']);
            }
            if (\array_key_exists('first_name', $data)) {
                $object->setFirstName($data['first_name']);
                unset($data['first_name']);
            }
            if (\array_key_exists('last_name', $data)) {
                $object->setLastName($data['last_name']);
                unset($data['last_name']);
            }
            if (\array_key_exists('pronouns', $data)) {
                $object->setPronouns($data['pronouns']);
                unset($data['pronouns']);
            }
            if (\array_key_exists('company', $data)) {
                $object->setCompany($data['company']);
                unset($data['company']);
            }
            if (\array_key_exists('job_title', $data)) {
                $object->setJobTitle($data['job_title']);
                unset($data['job_title']);
            }
            if (\array_key_exists('contacts', $data)) {
                $values = [];
                foreach ($data['contacts'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, \Bitly\Model\DigitalBusinessCardContact::class, 'json', $context);
                }
                $object->setContacts($values);
                unset($data['contacts']);
            }
            if (\array_key_exists('download_enabled', $data)) {
                $object->setDownloadEnabled($data['download_enabled']);
                unset($data['download_enabled']);
            }
            if (\array_key_exists('file', $data)) {
                $object->setFile($this->denormalizer->denormalize($data['file'], \Bitly\Model\DigitalBusinessCardContentFile::class, 'json', $context));
                unset($data['file']);
            }
            foreach ($data as $key => $value_1) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value_1;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('digitalBusinessCardId') && null !== $object->getDigitalBusinessCardId()) {
                $data['digital_business_card_id'] = $object->getDigitalBusinessCardId();
            }
            if ($object->isInitialized('linkTitle') && null !== $object->getLinkTitle()) {
                $data['link_title'] = $object->getLinkTitle();
            }
            if ($object->isInitialized('layout') && null !== $object->getLayout()) {
                $data['layout'] = $object->getLayout();
            }
            if ($object->isInitialized('firstName') && null !== $object->getFirstName()) {
                $data['first_name'] = $object->getFirstName();
            }
            if ($object->isInitialized('lastName') && null !== $object->getLastName()) {
                $data['last_name'] = $object->getLastName();
            }
            if ($object->isInitialized('pronouns') && null !== $object->getPronouns()) {
                $data['pronouns'] = $object->getPronouns();
            }
            if ($object->isInitialized('company') && null !== $object->getCompany()) {
                $data['company'] = $object->getCompany();
            }
            if ($object->isInitialized('jobTitle') && null !== $object->getJobTitle()) {
                $data['job_title'] = $object->getJobTitle();
            }
            if ($object->isInitialized('contacts') && null !== $object->getContacts()) {
                $values = [];
                foreach ($object->getContacts() as $value) {
                    $values[] = $this->normalizer->normalize($value, 'json', $context);
                }
                $data['contacts'] = $values;
            }
            if ($object->isInitialized('downloadEnabled') && null !== $object->getDownloadEnabled()) {
                $data['download_enabled'] = $object->getDownloadEnabled();
            }
            if ($object->isInitialized('file') && null !== $object->getFile()) {
                $data['file'] = $this->normalizer->normalize($object->getFile(), 'json', $context);
            }
            foreach ($object as $key => $value_1) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value_1;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\Bitly\Model\DigitalBusinessCardContent::class => false];
        }
    }
} else {
    class DigitalBusinessCardContentNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \Bitly\Model\DigitalBusinessCardContent::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \Bitly\Model\DigitalBusinessCardContent::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Bitly\Model\DigitalBusinessCardContent();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('digital_business_card_id', $data)) {
                $object->setDigitalBusinessCardId($data['digital_business_card_id']);
                unset($data['digital_business_card_id']);
            }
            if (\array_key_exists('link_title', $data)) {
                $object->setLinkTitle($data['link_title']);
                unset($data['link_title']);
            }
            if (\array_key_exists('layout', $data)) {
                $object->setLayout($data['layout']);
                unset($data['layout']);
            }
            if (\array_key_exists('first_name', $data)) {
                $object->setFirstName($data['first_name']);
                unset($data['first_name']);
            }
            if (\array_key_exists('last_name', $data)) {
                $object->setLastName($data['last_name']);
                unset($data['last_name']);
            }
            if (\array_key_exists('pronouns', $data)) {
                $object->setPronouns($data['pronouns']);
                unset($data['pronouns']);
            }
            if (\array_key_exists('company', $data)) {
                $object->setCompany($data['company']);
                unset($data['company']);
            }
            if (\array_key_exists('job_title', $data)) {
                $object->setJobTitle($data['job_title']);
                unset($data['job_title']);
            }
            if (\array_key_exists('contacts', $data)) {
                $values = [];
                foreach ($data['contacts'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, \Bitly\Model\DigitalBusinessCardContact::class, 'json', $context);
                }
                $object->setContacts($values);
                unset($data['contacts']);
            }
            if (\array_key_exists('download_enabled', $data)) {
                $object->setDownloadEnabled($data['download_enabled']);
                unset($data['download_enabled']);
            }
            if (\array_key_exists('file', $data)) {
                $object->setFile($this->denormalizer->denormalize($data['file'], \Bitly\Model\DigitalBusinessCardContentFile::class, 'json', $context));
                unset($data['file']);
            }
            foreach ($data as $key => $value_1) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value_1;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('digitalBusinessCardId') && null !== $object->getDigitalBusinessCardId()) {
                $data['digital_business_card_id'] = $object->getDigitalBusinessCardId();
            }
            if ($object->isInitialized('linkTitle') && null !== $object->getLinkTitle()) {
                $data['link_title'] = $object->getLinkTitle();
            }
            if ($object->isInitialized('layout') && null !== $object->getLayout()) {
                $data['layout'] = $object->getLayout();
            }
            if ($object->isInitialized('firstName') && null !== $object->getFirstName()) {
                $data['first_name'] = $object->getFirstName();
            }
            if ($object->isInitialized('lastName') && null !== $object->getLastName()) {
                $data['last_name'] = $object->getLastName();
            }
            if ($object->isInitialized('pronouns') && null !== $object->getPronouns()) {
                $data['pronouns'] = $object->getPronouns();
            }
            if ($object->isInitialized('company') && null !== $object->getCompany()) {
                $data['company'] = $object->getCompany();
            }
            if ($object->isInitialized('jobTitle') && null !== $object->getJobTitle()) {
                $data['job_title'] = $object->getJobTitle();
            }
            if ($object->isInitialized('contacts') && null !== $object->getContacts()) {
                $values = [];
                foreach ($object->getContacts() as $value) {
                    $values[] = $this->normalizer->normalize($value, 'json', $context);
                }
                $data['contacts'] = $values;
            }
            if ($object->isInitialized('downloadEnabled') && null !== $object->getDownloadEnabled()) {
                $data['download_enabled'] = $object->getDownloadEnabled();
            }
            if ($object->isInitialized('file') && null !== $object->getFile()) {
                $data['file'] = $this->normalizer->normalize($object->getFile(), 'json', $context);
            }
            foreach ($object as $key => $value_1) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value_1;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\Bitly\Model\DigitalBusinessCardContent::class => false];
        }
    }
}
