<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class QRCodeCustomizationOptionsResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\QRCodeCustomizationOptionsResponse::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\QRCodeCustomizationOptionsResponse::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\QRCodeCustomizationOptionsResponse();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('frames', $data)) {
            $values = [];
            foreach ($data['frames'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, \Bitly\Model\QRCodeFrameResponseItem::class, 'json', $context);
            }
            $object->setFrames($values);
            unset($data['frames']);
        }
        if (\array_key_exists('dot_patterns', $data)) {
            $values_1 = [];
            foreach ($data['dot_patterns'] as $value_1) {
                $values_1[] = $this->denormalizer->denormalize($value_1, \Bitly\Model\QRCodeDotPattern::class, 'json', $context);
            }
            $object->setDotPatterns($values_1);
            unset($data['dot_patterns']);
        }
        if (\array_key_exists('corners', $data)) {
            $values_2 = [];
            foreach ($data['corners'] as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, \Bitly\Model\QRCodeCornerResponseItem::class, 'json', $context);
            }
            $object->setCorners($values_2);
            unset($data['corners']);
        }
        if (\array_key_exists('formats', $data)) {
            $values_3 = [];
            foreach ($data['formats'] as $value_3) {
                $values_3[] = $value_3;
            }
            $object->setFormats($values_3);
            unset($data['formats']);
        }
        if (\array_key_exists('dynamic_types', $data)) {
            $values_4 = [];
            foreach ($data['dynamic_types'] as $value_4) {
                $values_4[] = $this->denormalizer->denormalize($value_4, \Bitly\Model\QRCodeTypeItem::class, 'json', $context);
            }
            $object->setDynamicTypes($values_4);
            unset($data['dynamic_types']);
        }
        if (\array_key_exists('static_types', $data)) {
            $values_5 = [];
            foreach ($data['static_types'] as $value_5) {
                $values_5[] = $this->denormalizer->denormalize($value_5, \Bitly\Model\QRCodeTypeItem::class, 'json', $context);
            }
            $object->setStaticTypes($values_5);
            unset($data['static_types']);
        }
        if (\array_key_exists('logos', $data)) {
            $values_6 = [];
            foreach ($data['logos'] as $value_6) {
                $values_6[] = $this->denormalizer->denormalize($value_6, \Bitly\Model\QRCodeLogoImage::class, 'json', $context);
            }
            $object->setLogos($values_6);
            unset($data['logos']);
        }
        foreach ($data as $key => $value_7) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_7;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('frames') && null !== $data->getFrames()) {
            $values = [];
            foreach ($data->getFrames() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $dataArray['frames'] = $values;
        }
        if ($data->isInitialized('dotPatterns') && null !== $data->getDotPatterns()) {
            $values_1 = [];
            foreach ($data->getDotPatterns() as $value_1) {
                $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
            }
            $dataArray['dot_patterns'] = $values_1;
        }
        if ($data->isInitialized('corners') && null !== $data->getCorners()) {
            $values_2 = [];
            foreach ($data->getCorners() as $value_2) {
                $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
            }
            $dataArray['corners'] = $values_2;
        }
        if ($data->isInitialized('formats') && null !== $data->getFormats()) {
            $values_3 = [];
            foreach ($data->getFormats() as $value_3) {
                $values_3[] = $value_3;
            }
            $dataArray['formats'] = $values_3;
        }
        if ($data->isInitialized('dynamicTypes') && null !== $data->getDynamicTypes()) {
            $values_4 = [];
            foreach ($data->getDynamicTypes() as $value_4) {
                $values_4[] = $this->normalizer->normalize($value_4, 'json', $context);
            }
            $dataArray['dynamic_types'] = $values_4;
        }
        if ($data->isInitialized('staticTypes') && null !== $data->getStaticTypes()) {
            $values_5 = [];
            foreach ($data->getStaticTypes() as $value_5) {
                $values_5[] = $this->normalizer->normalize($value_5, 'json', $context);
            }
            $dataArray['static_types'] = $values_5;
        }
        if ($data->isInitialized('logos') && null !== $data->getLogos()) {
            $values_6 = [];
            foreach ($data->getLogos() as $value_6) {
                $values_6[] = $this->normalizer->normalize($value_6, 'json', $context);
            }
            $dataArray['logos'] = $values_6;
        }
        foreach ($data as $key => $value_7) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_7;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\QRCodeCustomizationOptionsResponse::class => false];
    }
}
