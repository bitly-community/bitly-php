<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class QRCodeFrameResponseItemNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\QRCodeFrameResponseItem::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\QRCodeFrameResponseItem::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\QRCodeFrameResponseItem();
        if (\array_key_exists('immutable', $data) && \is_int($data['immutable'])) {
            $data['immutable'] = (bool) $data['immutable'];
        }
        if (\array_key_exists('locked', $data) && \is_int($data['locked'])) {
            $data['locked'] = (bool) $data['locked'];
        }
        if (\array_key_exists('is_hidden', $data) && \is_int($data['is_hidden'])) {
            $data['is_hidden'] = (bool) $data['is_hidden'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('immutable', $data)) {
            $object->setImmutable($data['immutable']);
            unset($data['immutable']);
        }
        if (\array_key_exists('thumbnail', $data)) {
            $object->setThumbnail($data['thumbnail']);
            unset($data['thumbnail']);
        }
        if (\array_key_exists('locked', $data)) {
            $object->setLocked($data['locked']);
            unset($data['locked']);
        }
        if (\array_key_exists('is_hidden', $data)) {
            $object->setIsHidden($data['is_hidden']);
            unset($data['is_hidden']);
        }
        if (\array_key_exists('id', $data)) {
            $object->setId($data['id']);
            unset($data['id']);
        }
        if (\array_key_exists('colors', $data)) {
            $object->setColors($this->denormalizer->denormalize($data['colors'], \Bitly\Model\QRCodeFrameColors::class, 'json', $context));
            unset($data['colors']);
        }
        if (\array_key_exists('text', $data)) {
            $object->setText($this->denormalizer->denormalize($data['text'], \Bitly\Model\QRCodeFrameText::class, 'json', $context));
            unset($data['text']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('immutable') && null !== $data->getImmutable()) {
            $dataArray['immutable'] = $data->getImmutable();
        }
        if ($data->isInitialized('thumbnail') && null !== $data->getThumbnail()) {
            $dataArray['thumbnail'] = $data->getThumbnail();
        }
        if ($data->isInitialized('locked') && null !== $data->getLocked()) {
            $dataArray['locked'] = $data->getLocked();
        }
        if ($data->isInitialized('isHidden') && null !== $data->getIsHidden()) {
            $dataArray['is_hidden'] = $data->getIsHidden();
        }
        $dataArray['id'] = $data->getId();
        if ($data->isInitialized('colors') && null !== $data->getColors()) {
            $dataArray['colors'] = $this->normalizer->normalize($data->getColors(), 'json', $context);
        }
        if ($data->isInitialized('text') && null !== $data->getText()) {
            $dataArray['text'] = $this->normalizer->normalize($data->getText(), 'json', $context);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\QRCodeFrameResponseItem::class => false];
    }
}
