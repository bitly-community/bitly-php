<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class SiteRedirectsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\SiteRedirects::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\SiteRedirects::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\SiteRedirects();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('redirect_guid', $data)) {
            $object->setRedirectGuid($data['redirect_guid']);
            unset($data['redirect_guid']);
        }
        if (\array_key_exists('microsite_guid', $data)) {
            $object->setMicrositeGuid($data['microsite_guid']);
            unset($data['microsite_guid']);
        }
        if (\array_key_exists('uri', $data)) {
            $object->setUri($data['uri']);
            unset($data['uri']);
        }
        if (\array_key_exists('domain', $data)) {
            $object->setDomain($data['domain']);
            unset($data['domain']);
        }
        if (\array_key_exists('keyword', $data)) {
            $object->setKeyword($data['keyword']);
            unset($data['keyword']);
        }
        if (\array_key_exists('redirect_uri', $data)) {
            $object->setRedirectUri($data['redirect_uri']);
            unset($data['redirect_uri']);
        }
        if (\array_key_exists('redirect_domain', $data)) {
            $object->setRedirectDomain($data['redirect_domain']);
            unset($data['redirect_domain']);
        }
        if (\array_key_exists('redirect_keyword', $data)) {
            $object->setRedirectKeyword($data['redirect_keyword']);
            unset($data['redirect_keyword']);
        }
        if (\array_key_exists('status', $data)) {
            $object->setStatus($data['status']);
            unset($data['status']);
        }
        if (\array_key_exists('created', $data)) {
            $object->setCreated($data['created']);
            unset($data['created']);
        }
        if (\array_key_exists('modified', $data)) {
            $object->setModified($data['modified']);
            unset($data['modified']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('redirectGuid') && null !== $data->getRedirectGuid()) {
            $dataArray['redirect_guid'] = $data->getRedirectGuid();
        }
        if ($data->isInitialized('micrositeGuid') && null !== $data->getMicrositeGuid()) {
            $dataArray['microsite_guid'] = $data->getMicrositeGuid();
        }
        if ($data->isInitialized('uri') && null !== $data->getUri()) {
            $dataArray['uri'] = $data->getUri();
        }
        if ($data->isInitialized('domain') && null !== $data->getDomain()) {
            $dataArray['domain'] = $data->getDomain();
        }
        if ($data->isInitialized('keyword') && null !== $data->getKeyword()) {
            $dataArray['keyword'] = $data->getKeyword();
        }
        if ($data->isInitialized('redirectUri') && null !== $data->getRedirectUri()) {
            $dataArray['redirect_uri'] = $data->getRedirectUri();
        }
        if ($data->isInitialized('redirectDomain') && null !== $data->getRedirectDomain()) {
            $dataArray['redirect_domain'] = $data->getRedirectDomain();
        }
        if ($data->isInitialized('redirectKeyword') && null !== $data->getRedirectKeyword()) {
            $dataArray['redirect_keyword'] = $data->getRedirectKeyword();
        }
        if ($data->isInitialized('status') && null !== $data->getStatus()) {
            $dataArray['status'] = $data->getStatus();
        }
        if ($data->isInitialized('created') && null !== $data->getCreated()) {
            $dataArray['created'] = $data->getCreated();
        }
        if ($data->isInitialized('modified') && null !== $data->getModified()) {
            $dataArray['modified'] = $data->getModified();
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\SiteRedirects::class => false];
    }
}
