<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class LaunchpadLinkPerformanceNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\LaunchpadLinkPerformance::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\LaunchpadLinkPerformance::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\LaunchpadLinkPerformance();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('total', $data)) {
            $object->setTotal($data['total']);
            unset($data['total']);
        }
        if (\array_key_exists('link_clicks', $data)) {
            $values = [];
            foreach ($data['link_clicks'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, \Bitly\Model\LaunchpadClicks::class, 'json', $context);
            }
            $object->setLinkClicks($values);
            unset($data['link_clicks']);
        }
        if (\array_key_exists('performance_start', $data)) {
            $object->setPerformanceStart($data['performance_start']);
            unset($data['performance_start']);
        }
        if (\array_key_exists('performance_end', $data)) {
            $object->setPerformanceEnd($data['performance_end']);
            unset($data['performance_end']);
        }
        if (\array_key_exists('units', $data)) {
            $object->setUnits($data['units']);
            unset($data['units']);
        }
        if (\array_key_exists('unit', $data)) {
            $object->setUnit($data['unit']);
            unset($data['unit']);
        }
        if (\array_key_exists('unit_reference', $data)) {
            $object->setUnitReference($data['unit_reference']);
            unset($data['unit_reference']);
        }
        if (\array_key_exists('page', $data)) {
            $object->setPage($this->denormalizer->denormalize($data['page'], \Bitly\Model\LaunchpadsPagination::class, 'json', $context));
            unset($data['page']);
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_1;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('total') && null !== $data->getTotal()) {
            $dataArray['total'] = $data->getTotal();
        }
        if ($data->isInitialized('linkClicks') && null !== $data->getLinkClicks()) {
            $values = [];
            foreach ($data->getLinkClicks() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $dataArray['link_clicks'] = $values;
        }
        if ($data->isInitialized('performanceStart') && null !== $data->getPerformanceStart()) {
            $dataArray['performance_start'] = $data->getPerformanceStart();
        }
        if ($data->isInitialized('performanceEnd') && null !== $data->getPerformanceEnd()) {
            $dataArray['performance_end'] = $data->getPerformanceEnd();
        }
        if ($data->isInitialized('units') && null !== $data->getUnits()) {
            $dataArray['units'] = $data->getUnits();
        }
        if ($data->isInitialized('unit') && null !== $data->getUnit()) {
            $dataArray['unit'] = $data->getUnit();
        }
        if ($data->isInitialized('unitReference') && null !== $data->getUnitReference()) {
            $dataArray['unit_reference'] = $data->getUnitReference();
        }
        if ($data->isInitialized('page') && null !== $data->getPage()) {
            $dataArray['page'] = $this->normalizer->normalize($data->getPage(), 'json', $context);
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_1;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\LaunchpadLinkPerformance::class => false];
    }
}
