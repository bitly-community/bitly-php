<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class AggregateClicksForBitlinksByCitiesFacetNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\AggregateClicksForBitlinksByCitiesFacet::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\AggregateClicksForBitlinksByCitiesFacet::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\AggregateClicksForBitlinksByCitiesFacet();
        if (\array_key_exists('units', $data) && \is_int($data['units'])) {
            $data['units'] = (float) $data['units'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('unit_reference', $data)) {
            $object->setUnitReference($data['unit_reference']);
            unset($data['unit_reference']);
        }
        if (\array_key_exists('unit', $data)) {
            $object->setUnit($data['unit']);
            unset($data['unit']);
        }
        if (\array_key_exists('units', $data)) {
            $object->setUnits($data['units']);
            unset($data['units']);
        }
        if (\array_key_exists('info', $data)) {
            $object->setInfo($data['info']);
            unset($data['info']);
        }
        if (\array_key_exists('facet', $data)) {
            $object->setFacet($data['facet']);
            unset($data['facet']);
        }
        if (\array_key_exists('totals_for_time_period', $data)) {
            $values = [];
            foreach ($data['totals_for_time_period'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, \Bitly\Model\ClicksByCitiesFacet::class, 'json', $context);
            }
            $object->setTotalsForTimePeriod($values);
            unset($data['totals_for_time_period']);
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_1;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('unitReference') && null !== $data->getUnitReference()) {
            $dataArray['unit_reference'] = $data->getUnitReference();
        }
        if ($data->isInitialized('unit') && null !== $data->getUnit()) {
            $dataArray['unit'] = $data->getUnit();
        }
        if ($data->isInitialized('units') && null !== $data->getUnits()) {
            $dataArray['units'] = $data->getUnits();
        }
        if ($data->isInitialized('info') && null !== $data->getInfo()) {
            $dataArray['info'] = $data->getInfo();
        }
        if ($data->isInitialized('facet') && null !== $data->getFacet()) {
            $dataArray['facet'] = $data->getFacet();
        }
        if ($data->isInitialized('totalsForTimePeriod') && null !== $data->getTotalsForTimePeriod()) {
            $values = [];
            foreach ($data->getTotalsForTimePeriod() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $dataArray['totals_for_time_period'] = $values;
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_1;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\AggregateClicksForBitlinksByCitiesFacet::class => false];
    }
}
