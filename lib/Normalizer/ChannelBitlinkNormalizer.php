<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class ChannelBitlinkNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\ChannelBitlink::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\ChannelBitlink::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\ChannelBitlink();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('created_ts', $data)) {
            $object->setCreatedTs($data['created_ts']);
            unset($data['created_ts']);
        }
        if (\array_key_exists('bitlink_id', $data)) {
            $object->setBitlinkId($data['bitlink_id']);
            unset($data['bitlink_id']);
        }
        if (\array_key_exists('campaign_guid', $data)) {
            $object->setCampaignGuid($data['campaign_guid']);
            unset($data['campaign_guid']);
        }
        if (\array_key_exists('channel_guid', $data)) {
            $object->setChannelGuid($data['channel_guid']);
            unset($data['channel_guid']);
        }
        if (\array_key_exists('title', $data)) {
            $object->setTitle($data['title']);
            unset($data['title']);
        }
        if (\array_key_exists('total_clicks', $data)) {
            $object->setTotalClicks($data['total_clicks']);
            unset($data['total_clicks']);
        }
        if (\array_key_exists('clicks', $data)) {
            $values = [];
            foreach ($data['clicks'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, \Bitly\Model\CampaignClickData::class, 'json', $context);
            }
            $object->setClicks($values);
            unset($data['clicks']);
        }
        if (\array_key_exists('keyword_link', $data)) {
            $object->setKeywordLink($data['keyword_link']);
            unset($data['keyword_link']);
        }
        if (\array_key_exists('link', $data)) {
            $object->setLink($data['link']);
            unset($data['link']);
        }
        if (\array_key_exists('long_url', $data)) {
            $object->setLongUrl($data['long_url']);
            unset($data['long_url']);
        }
        if (\array_key_exists('campaign_ids', $data)) {
            $values_1 = [];
            foreach ($data['campaign_ids'] as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setCampaignIds($values_1);
            unset($data['campaign_ids']);
        }
        foreach ($data as $key => $value_2) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_2;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        $dataArray['created_ts'] = $data->getCreatedTs();
        $dataArray['bitlink_id'] = $data->getBitlinkId();
        $dataArray['campaign_guid'] = $data->getCampaignGuid();
        $dataArray['channel_guid'] = $data->getChannelGuid();
        if ($data->isInitialized('title') && null !== $data->getTitle()) {
            $dataArray['title'] = $data->getTitle();
        }
        if ($data->isInitialized('totalClicks') && null !== $data->getTotalClicks()) {
            $dataArray['total_clicks'] = $data->getTotalClicks();
        }
        if ($data->isInitialized('clicks') && null !== $data->getClicks()) {
            $values = [];
            foreach ($data->getClicks() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $dataArray['clicks'] = $values;
        }
        if ($data->isInitialized('keywordLink') && null !== $data->getKeywordLink()) {
            $dataArray['keyword_link'] = $data->getKeywordLink();
        }
        if ($data->isInitialized('link') && null !== $data->getLink()) {
            $dataArray['link'] = $data->getLink();
        }
        if ($data->isInitialized('longUrl') && null !== $data->getLongUrl()) {
            $dataArray['long_url'] = $data->getLongUrl();
        }
        if ($data->isInitialized('campaignIds') && null !== $data->getCampaignIds()) {
            $values_1 = [];
            foreach ($data->getCampaignIds() as $value_1) {
                $values_1[] = $value_1;
            }
            $dataArray['campaign_ids'] = $values_1;
        }
        foreach ($data as $key => $value_2) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_2;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\ChannelBitlink::class => false];
    }
}
