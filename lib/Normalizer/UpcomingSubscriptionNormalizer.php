<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class UpcomingSubscriptionNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\UpcomingSubscription::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\UpcomingSubscription::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\UpcomingSubscription();
        if (\array_key_exists('price', $data) && \is_int($data['price'])) {
            $data['price'] = (float) $data['price'];
        }
        if (\array_key_exists('amount_off', $data) && \is_int($data['amount_off'])) {
            $data['amount_off'] = (float) $data['amount_off'];
        }
        if (\array_key_exists('percent_off', $data) && \is_int($data['percent_off'])) {
            $data['percent_off'] = (float) $data['percent_off'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('status', $data)) {
            $object->setStatus($data['status']);
            unset($data['status']);
        }
        if (\array_key_exists('start_date', $data)) {
            $object->setStartDate($data['start_date']);
            unset($data['start_date']);
        }
        if (\array_key_exists('end_date', $data)) {
            $object->setEndDate($data['end_date']);
            unset($data['end_date']);
        }
        if (\array_key_exists('price', $data)) {
            $object->setPrice($data['price']);
            unset($data['price']);
        }
        if (\array_key_exists('coupon_code', $data)) {
            $object->setCouponCode($data['coupon_code']);
            unset($data['coupon_code']);
        }
        if (\array_key_exists('coupon_duration', $data)) {
            $object->setCouponDuration($data['coupon_duration']);
            unset($data['coupon_duration']);
        }
        if (\array_key_exists('amount_off', $data)) {
            $object->setAmountOff($data['amount_off']);
            unset($data['amount_off']);
        }
        if (\array_key_exists('percent_off', $data)) {
            $object->setPercentOff($data['percent_off']);
            unset($data['percent_off']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('status') && null !== $data->getStatus()) {
            $dataArray['status'] = $data->getStatus();
        }
        if ($data->isInitialized('startDate') && null !== $data->getStartDate()) {
            $dataArray['start_date'] = $data->getStartDate();
        }
        if ($data->isInitialized('endDate') && null !== $data->getEndDate()) {
            $dataArray['end_date'] = $data->getEndDate();
        }
        if ($data->isInitialized('price') && null !== $data->getPrice()) {
            $dataArray['price'] = $data->getPrice();
        }
        if ($data->isInitialized('couponCode') && null !== $data->getCouponCode()) {
            $dataArray['coupon_code'] = $data->getCouponCode();
        }
        if ($data->isInitialized('couponDuration') && null !== $data->getCouponDuration()) {
            $dataArray['coupon_duration'] = $data->getCouponDuration();
        }
        if ($data->isInitialized('amountOff') && null !== $data->getAmountOff()) {
            $dataArray['amount_off'] = $data->getAmountOff();
        }
        if ($data->isInitialized('percentOff') && null !== $data->getPercentOff()) {
            $dataArray['percent_off'] = $data->getPercentOff();
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\UpcomingSubscription::class => false];
    }
}
