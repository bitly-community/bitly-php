<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class LaunchpadPresetThemeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\LaunchpadPresetTheme::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\LaunchpadPresetTheme::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\LaunchpadPresetTheme();
        if (\array_key_exists('is_active', $data) && \is_int($data['is_active'])) {
            $data['is_active'] = (bool) $data['is_active'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('theme_id', $data)) {
            $object->setThemeId($data['theme_id']);
            unset($data['theme_id']);
        }
        if (\array_key_exists('display_name', $data)) {
            $object->setDisplayName($data['display_name']);
            unset($data['display_name']);
        }
        if (\array_key_exists('background', $data)) {
            $object->setBackground($data['background']);
            unset($data['background']);
        }
        if (\array_key_exists('launchpad_text_color', $data)) {
            $object->setLaunchpadTextColor($data['launchpad_text_color']);
            unset($data['launchpad_text_color']);
        }
        if (\array_key_exists('description_color', $data)) {
            $object->setDescriptionColor($data['description_color']);
            unset($data['description_color']);
        }
        if (\array_key_exists('avatar_background', $data)) {
            $object->setAvatarBackground($data['avatar_background']);
            unset($data['avatar_background']);
        }
        if (\array_key_exists('button_text_color', $data)) {
            $object->setButtonTextColor($data['button_text_color']);
            unset($data['button_text_color']);
        }
        if (\array_key_exists('button_background', $data)) {
            $object->setButtonBackground($data['button_background']);
            unset($data['button_background']);
        }
        if (\array_key_exists('is_active', $data)) {
            $object->setIsActive($data['is_active']);
            unset($data['is_active']);
        }
        if (\array_key_exists('layout', $data)) {
            $object->setLayout($data['layout']);
            unset($data['layout']);
        }
        if (\array_key_exists('icon_gradient', $data)) {
            $object->setIconGradient($data['icon_gradient']);
            unset($data['icon_gradient']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('themeId') && null !== $data->getThemeId()) {
            $dataArray['theme_id'] = $data->getThemeId();
        }
        if ($data->isInitialized('displayName') && null !== $data->getDisplayName()) {
            $dataArray['display_name'] = $data->getDisplayName();
        }
        if ($data->isInitialized('background') && null !== $data->getBackground()) {
            $dataArray['background'] = $data->getBackground();
        }
        if ($data->isInitialized('launchpadTextColor') && null !== $data->getLaunchpadTextColor()) {
            $dataArray['launchpad_text_color'] = $data->getLaunchpadTextColor();
        }
        if ($data->isInitialized('descriptionColor') && null !== $data->getDescriptionColor()) {
            $dataArray['description_color'] = $data->getDescriptionColor();
        }
        if ($data->isInitialized('avatarBackground') && null !== $data->getAvatarBackground()) {
            $dataArray['avatar_background'] = $data->getAvatarBackground();
        }
        if ($data->isInitialized('buttonTextColor') && null !== $data->getButtonTextColor()) {
            $dataArray['button_text_color'] = $data->getButtonTextColor();
        }
        if ($data->isInitialized('buttonBackground') && null !== $data->getButtonBackground()) {
            $dataArray['button_background'] = $data->getButtonBackground();
        }
        if ($data->isInitialized('isActive') && null !== $data->getIsActive()) {
            $dataArray['is_active'] = $data->getIsActive();
        }
        if ($data->isInitialized('layout') && null !== $data->getLayout()) {
            $dataArray['layout'] = $data->getLayout();
        }
        if ($data->isInitialized('iconGradient') && null !== $data->getIconGradient()) {
            $dataArray['icon_gradient'] = $data->getIconGradient();
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\LaunchpadPresetTheme::class => false];
    }
}
