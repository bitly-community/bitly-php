<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class BitlinkBodyNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\BitlinkBody::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\BitlinkBody::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\BitlinkBody();
        if (\array_key_exists('archived', $data) && \is_int($data['archived'])) {
            $data['archived'] = (bool) $data['archived'];
        }
        if (\array_key_exists('is_deleted', $data) && \is_int($data['is_deleted'])) {
            $data['is_deleted'] = (bool) $data['is_deleted'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('references', $data)) {
            $values = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['references'] as $key => $value) {
                $values[$key] = $value;
            }
            $object->setReferences($values);
            unset($data['references']);
        }
        if (\array_key_exists('link', $data)) {
            $object->setLink($data['link']);
            unset($data['link']);
        }
        if (\array_key_exists('id', $data)) {
            $object->setId($data['id']);
            unset($data['id']);
        }
        if (\array_key_exists('long_url', $data)) {
            $object->setLongUrl($data['long_url']);
            unset($data['long_url']);
        }
        if (\array_key_exists('title', $data)) {
            $object->setTitle($data['title']);
            unset($data['title']);
        }
        if (\array_key_exists('archived', $data)) {
            $object->setArchived($data['archived']);
            unset($data['archived']);
        }
        if (\array_key_exists('created_at', $data)) {
            $object->setCreatedAt($data['created_at']);
            unset($data['created_at']);
        }
        if (\array_key_exists('created_by', $data)) {
            $object->setCreatedBy($data['created_by']);
            unset($data['created_by']);
        }
        if (\array_key_exists('client_id', $data)) {
            $object->setClientId($data['client_id']);
            unset($data['client_id']);
        }
        if (\array_key_exists('custom_bitlinks', $data)) {
            $values_1 = [];
            foreach ($data['custom_bitlinks'] as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setCustomBitlinks($values_1);
            unset($data['custom_bitlinks']);
        }
        if (\array_key_exists('tags', $data)) {
            $values_2 = [];
            foreach ($data['tags'] as $value_2) {
                $values_2[] = $value_2;
            }
            $object->setTags($values_2);
            unset($data['tags']);
        }
        if (\array_key_exists('launchpad_ids', $data)) {
            $values_3 = [];
            foreach ($data['launchpad_ids'] as $value_3) {
                $values_3[] = $value_3;
            }
            $object->setLaunchpadIds($values_3);
            unset($data['launchpad_ids']);
        }
        if (\array_key_exists('qr_code_ids', $data)) {
            $values_4 = [];
            foreach ($data['qr_code_ids'] as $value_4) {
                $values_4[] = $value_4;
            }
            $object->setQrCodeIds($values_4);
            unset($data['qr_code_ids']);
        }
        if (\array_key_exists('deeplinks', $data)) {
            $values_5 = [];
            foreach ($data['deeplinks'] as $value_5) {
                $values_5[] = $this->denormalizer->denormalize($value_5, \Bitly\Model\DeeplinkRule::class, 'json', $context);
            }
            $object->setDeeplinks($values_5);
            unset($data['deeplinks']);
        }
        if (\array_key_exists('is_deleted', $data)) {
            $object->setIsDeleted($data['is_deleted']);
            unset($data['is_deleted']);
        }
        if (\array_key_exists('campaign_ids', $data)) {
            $values_6 = [];
            foreach ($data['campaign_ids'] as $value_6) {
                $values_6[] = $value_6;
            }
            $object->setCampaignIds($values_6);
            unset($data['campaign_ids']);
        }
        foreach ($data as $key_1 => $value_7) {
            if (preg_match('/.*/', (string) $key_1)) {
                $object[$key_1] = $value_7;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('references') && null !== $data->getReferences()) {
            $values = [];
            foreach ($data->getReferences() as $key => $value) {
                $values[$key] = $value;
            }
            $dataArray['references'] = $values;
        }
        if ($data->isInitialized('link') && null !== $data->getLink()) {
            $dataArray['link'] = $data->getLink();
        }
        if ($data->isInitialized('id') && null !== $data->getId()) {
            $dataArray['id'] = $data->getId();
        }
        if ($data->isInitialized('longUrl') && null !== $data->getLongUrl()) {
            $dataArray['long_url'] = $data->getLongUrl();
        }
        if ($data->isInitialized('title') && null !== $data->getTitle()) {
            $dataArray['title'] = $data->getTitle();
        }
        if ($data->isInitialized('archived') && null !== $data->getArchived()) {
            $dataArray['archived'] = $data->getArchived();
        }
        if ($data->isInitialized('createdAt') && null !== $data->getCreatedAt()) {
            $dataArray['created_at'] = $data->getCreatedAt();
        }
        if ($data->isInitialized('createdBy') && null !== $data->getCreatedBy()) {
            $dataArray['created_by'] = $data->getCreatedBy();
        }
        if ($data->isInitialized('clientId') && null !== $data->getClientId()) {
            $dataArray['client_id'] = $data->getClientId();
        }
        if ($data->isInitialized('customBitlinks') && null !== $data->getCustomBitlinks()) {
            $values_1 = [];
            foreach ($data->getCustomBitlinks() as $value_1) {
                $values_1[] = $value_1;
            }
            $dataArray['custom_bitlinks'] = $values_1;
        }
        if ($data->isInitialized('tags') && null !== $data->getTags()) {
            $values_2 = [];
            foreach ($data->getTags() as $value_2) {
                $values_2[] = $value_2;
            }
            $dataArray['tags'] = $values_2;
        }
        if ($data->isInitialized('launchpadIds') && null !== $data->getLaunchpadIds()) {
            $values_3 = [];
            foreach ($data->getLaunchpadIds() as $value_3) {
                $values_3[] = $value_3;
            }
            $dataArray['launchpad_ids'] = $values_3;
        }
        if ($data->isInitialized('qrCodeIds') && null !== $data->getQrCodeIds()) {
            $values_4 = [];
            foreach ($data->getQrCodeIds() as $value_4) {
                $values_4[] = $value_4;
            }
            $dataArray['qr_code_ids'] = $values_4;
        }
        if ($data->isInitialized('deeplinks') && null !== $data->getDeeplinks()) {
            $values_5 = [];
            foreach ($data->getDeeplinks() as $value_5) {
                $values_5[] = $this->normalizer->normalize($value_5, 'json', $context);
            }
            $dataArray['deeplinks'] = $values_5;
        }
        if ($data->isInitialized('isDeleted') && null !== $data->getIsDeleted()) {
            $dataArray['is_deleted'] = $data->getIsDeleted();
        }
        if ($data->isInitialized('campaignIds') && null !== $data->getCampaignIds()) {
            $values_6 = [];
            foreach ($data->getCampaignIds() as $value_6) {
                $values_6[] = $value_6;
            }
            $dataArray['campaign_ids'] = $values_6;
        }
        foreach ($data as $key_1 => $value_7) {
            if (preg_match('/.*/', (string) $key_1)) {
                $dataArray[$key_1] = $value_7;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\BitlinkBody::class => false];
    }
}
