<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CampaignChannelNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\CampaignChannel::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\CampaignChannel::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\CampaignChannel();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('name', $data)) {
            $object->setName($data['name']);
            unset($data['name']);
        }
        if (\array_key_exists('guid', $data)) {
            $object->setGuid($data['guid']);
            unset($data['guid']);
        }
        if (\array_key_exists('campaign_guid', $data)) {
            $object->setCampaignGuid($data['campaign_guid']);
            unset($data['campaign_guid']);
        }
        if (\array_key_exists('channel_guid', $data)) {
            $object->setChannelGuid($data['channel_guid']);
            unset($data['channel_guid']);
        }
        if (\array_key_exists('channel_name', $data)) {
            $object->setChannelName($data['channel_name']);
            unset($data['channel_name']);
        }
        if (\array_key_exists('channel_bitlinks', $data)) {
            $object->setChannelBitlinks($this->denormalizer->denormalize($data['channel_bitlinks'], \Bitly\Model\ChannelBitlinks::class, 'json', $context));
            unset($data['channel_bitlinks']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('name') && null !== $data->getName()) {
            $dataArray['name'] = $data->getName();
        }
        if ($data->isInitialized('guid') && null !== $data->getGuid()) {
            $dataArray['guid'] = $data->getGuid();
        }
        if ($data->isInitialized('campaignGuid') && null !== $data->getCampaignGuid()) {
            $dataArray['campaign_guid'] = $data->getCampaignGuid();
        }
        if ($data->isInitialized('channelGuid') && null !== $data->getChannelGuid()) {
            $dataArray['channel_guid'] = $data->getChannelGuid();
        }
        if ($data->isInitialized('channelName') && null !== $data->getChannelName()) {
            $dataArray['channel_name'] = $data->getChannelName();
        }
        if ($data->isInitialized('channelBitlinks') && null !== $data->getChannelBitlinks()) {
            $dataArray['channel_bitlinks'] = $this->normalizer->normalize($data->getChannelBitlinks(), 'json', $context);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\CampaignChannel::class => false];
    }
}
