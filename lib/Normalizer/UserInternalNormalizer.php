<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class UserInternalNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\UserInternal::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\UserInternal::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\UserInternal();
        if (\array_key_exists('is_active', $data) && \is_int($data['is_active'])) {
            $data['is_active'] = (bool) $data['is_active'];
        }
        if (\array_key_exists('is_sso_user', $data) && \is_int($data['is_sso_user'])) {
            $data['is_sso_user'] = (bool) $data['is_sso_user'];
        }
        if (\array_key_exists('is_2fa_enabled', $data) && \is_int($data['is_2fa_enabled'])) {
            $data['is_2fa_enabled'] = (bool) $data['is_2fa_enabled'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('login', $data)) {
            $object->setLogin($data['login']);
            unset($data['login']);
        }
        if (\array_key_exists('name', $data)) {
            $object->setName($data['name']);
            unset($data['name']);
        }
        if (\array_key_exists('is_active', $data)) {
            $object->setIsActive($data['is_active']);
            unset($data['is_active']);
        }
        if (\array_key_exists('created', $data)) {
            $object->setCreated($data['created']);
            unset($data['created']);
        }
        if (\array_key_exists('modified', $data)) {
            $object->setModified($data['modified']);
            unset($data['modified']);
        }
        if (\array_key_exists('is_sso_user', $data)) {
            $object->setIsSsoUser($data['is_sso_user']);
            unset($data['is_sso_user']);
        }
        if (\array_key_exists('emails', $data)) {
            $values = [];
            foreach ($data['emails'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, \Bitly\Model\Email::class, 'json', $context);
            }
            $object->setEmails($values);
            unset($data['emails']);
        }
        if (\array_key_exists('is_2fa_enabled', $data)) {
            $object->setIs2faEnabled($data['is_2fa_enabled']);
            unset($data['is_2fa_enabled']);
        }
        if (\array_key_exists('default_group_guid', $data)) {
            $object->setDefaultGroupGuid($data['default_group_guid']);
            unset($data['default_group_guid']);
        }
        if (\array_key_exists('role_name', $data)) {
            $object->setRoleName($data['role_name']);
            unset($data['role_name']);
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_1;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        $dataArray['login'] = $data->getLogin();
        $dataArray['name'] = $data->getName();
        $dataArray['is_active'] = $data->getIsActive();
        $dataArray['created'] = $data->getCreated();
        $dataArray['modified'] = $data->getModified();
        $dataArray['is_sso_user'] = $data->getIsSsoUser();
        $values = [];
        foreach ($data->getEmails() as $value) {
            $values[] = $this->normalizer->normalize($value, 'json', $context);
        }
        $dataArray['emails'] = $values;
        $dataArray['is_2fa_enabled'] = $data->getIs2faEnabled();
        if ($data->isInitialized('defaultGroupGuid') && null !== $data->getDefaultGroupGuid()) {
            $dataArray['default_group_guid'] = $data->getDefaultGroupGuid();
        }
        if ($data->isInitialized('roleName') && null !== $data->getRoleName()) {
            $dataArray['role_name'] = $data->getRoleName();
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_1;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\UserInternal::class => false];
    }
}
