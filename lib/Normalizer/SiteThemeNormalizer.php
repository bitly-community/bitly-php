<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class SiteThemeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\SiteTheme::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\SiteTheme::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\SiteTheme();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('display_name', $data)) {
            $object->setDisplayName($data['display_name']);
            unset($data['display_name']);
        }
        if (\array_key_exists('bottom_background_color', $data)) {
            $object->setBottomBackgroundColor($data['bottom_background_color']);
            unset($data['bottom_background_color']);
        }
        if (\array_key_exists('header_background_color', $data)) {
            $object->setHeaderBackgroundColor($data['header_background_color']);
            unset($data['header_background_color']);
        }
        if (\array_key_exists('avatar_background_color', $data)) {
            $object->setAvatarBackgroundColor($data['avatar_background_color']);
            unset($data['avatar_background_color']);
        }
        if (\array_key_exists('site_text_color', $data)) {
            $object->setSiteTextColor($data['site_text_color']);
            unset($data['site_text_color']);
        }
        if (\array_key_exists('description_color', $data)) {
            $object->setDescriptionColor($data['description_color']);
            unset($data['description_color']);
        }
        if (\array_key_exists('link_background_color', $data)) {
            $object->setLinkBackgroundColor($data['link_background_color']);
            unset($data['link_background_color']);
        }
        if (\array_key_exists('link_text_color', $data)) {
            $object->setLinkTextColor($data['link_text_color']);
            unset($data['link_text_color']);
        }
        if (\array_key_exists('icon_gradient', $data)) {
            $object->setIconGradient($data['icon_gradient']);
            unset($data['icon_gradient']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        $dataArray['display_name'] = $data->getDisplayName();
        $dataArray['bottom_background_color'] = $data->getBottomBackgroundColor();
        if ($data->isInitialized('headerBackgroundColor') && null !== $data->getHeaderBackgroundColor()) {
            $dataArray['header_background_color'] = $data->getHeaderBackgroundColor();
        }
        if ($data->isInitialized('avatarBackgroundColor') && null !== $data->getAvatarBackgroundColor()) {
            $dataArray['avatar_background_color'] = $data->getAvatarBackgroundColor();
        }
        $dataArray['site_text_color'] = $data->getSiteTextColor();
        $dataArray['description_color'] = $data->getDescriptionColor();
        if ($data->isInitialized('linkBackgroundColor') && null !== $data->getLinkBackgroundColor()) {
            $dataArray['link_background_color'] = $data->getLinkBackgroundColor();
        }
        $dataArray['link_text_color'] = $data->getLinkTextColor();
        if ($data->isInitialized('iconGradient') && null !== $data->getIconGradient()) {
            $dataArray['icon_gradient'] = $data->getIconGradient();
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\SiteTheme::class => false];
    }
}
