<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class QRCustomizationsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\QRCustomizations::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\QRCustomizations::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\QRCustomizations();
        if (\array_key_exists('exclude_bitly_logo', $data) && \is_int($data['exclude_bitly_logo'])) {
            $data['exclude_bitly_logo'] = (bool) $data['exclude_bitly_logo'];
        }
        if (\array_key_exists('is_hidden', $data) && \is_int($data['is_hidden'])) {
            $data['is_hidden'] = (bool) $data['is_hidden'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('color', $data)) {
            $object->setColor($data['color']);
            unset($data['color']);
        }
        if (\array_key_exists('exclude_bitly_logo', $data)) {
            $object->setExcludeBitlyLogo($data['exclude_bitly_logo']);
            unset($data['exclude_bitly_logo']);
        }
        if (\array_key_exists('image_format', $data)) {
            $object->setImageFormat($data['image_format']);
            unset($data['image_format']);
        }
        if (\array_key_exists('logo_image_guid', $data)) {
            $object->setLogoImageGuid($data['logo_image_guid']);
            unset($data['logo_image_guid']);
        }
        if (\array_key_exists('is_hidden', $data)) {
            $object->setIsHidden($data['is_hidden']);
            unset($data['is_hidden']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('color') && null !== $data->getColor()) {
            $dataArray['color'] = $data->getColor();
        }
        if ($data->isInitialized('excludeBitlyLogo') && null !== $data->getExcludeBitlyLogo()) {
            $dataArray['exclude_bitly_logo'] = $data->getExcludeBitlyLogo();
        }
        if ($data->isInitialized('imageFormat') && null !== $data->getImageFormat()) {
            $dataArray['image_format'] = $data->getImageFormat();
        }
        if ($data->isInitialized('logoImageGuid') && null !== $data->getLogoImageGuid()) {
            $dataArray['logo_image_guid'] = $data->getLogoImageGuid();
        }
        if ($data->isInitialized('isHidden') && null !== $data->getIsHidden()) {
            $dataArray['is_hidden'] = $data->getIsHidden();
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\QRCustomizations::class => false];
    }
}
