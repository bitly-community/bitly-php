<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class LaunchpadButtonNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\LaunchpadButton::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\LaunchpadButton::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\LaunchpadButton();
        if (\array_key_exists('is_active', $data) && \is_int($data['is_active'])) {
            $data['is_active'] = (bool) $data['is_active'];
        }
        if (\array_key_exists('is_pinned', $data) && \is_int($data['is_pinned'])) {
            $data['is_pinned'] = (bool) $data['is_pinned'];
        }
        if (\array_key_exists('is_sample', $data) && \is_int($data['is_sample'])) {
            $data['is_sample'] = (bool) $data['is_sample'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('launchpad_id', $data)) {
            $object->setLaunchpadId($data['launchpad_id']);
            unset($data['launchpad_id']);
        }
        if (\array_key_exists('button_id', $data)) {
            $object->setButtonId($data['button_id']);
            unset($data['button_id']);
        }
        if (\array_key_exists('digital_business_card_id', $data)) {
            $object->setDigitalBusinessCardId($data['digital_business_card_id']);
            unset($data['digital_business_card_id']);
        }
        if (\array_key_exists('sort_order', $data)) {
            $object->setSortOrder($data['sort_order']);
            unset($data['sort_order']);
        }
        if (\array_key_exists('schedule_start', $data)) {
            $object->setScheduleStart($data['schedule_start']);
            unset($data['schedule_start']);
        }
        if (\array_key_exists('schedule_end', $data)) {
            $object->setScheduleEnd($data['schedule_end']);
            unset($data['schedule_end']);
        }
        if (\array_key_exists('is_active', $data)) {
            $object->setIsActive($data['is_active']);
            unset($data['is_active']);
        }
        if (\array_key_exists('is_pinned', $data)) {
            $object->setIsPinned($data['is_pinned']);
            unset($data['is_pinned']);
        }
        if (\array_key_exists('type', $data)) {
            $object->setType($data['type']);
            unset($data['type']);
        }
        if (\array_key_exists('parent', $data)) {
            $object->setParent($data['parent']);
            unset($data['parent']);
        }
        if (\array_key_exists('is_sample', $data)) {
            $object->setIsSample($data['is_sample']);
            unset($data['is_sample']);
        }
        if (\array_key_exists('title', $data)) {
            $object->setTitle($data['title']);
            unset($data['title']);
        }
        if (\array_key_exists('bitlink', $data)) {
            $object->setBitlink($data['bitlink']);
            unset($data['bitlink']);
        }
        if (\array_key_exists('long_url', $data)) {
            $object->setLongUrl($data['long_url']);
            unset($data['long_url']);
        }
        if (\array_key_exists('scheme', $data)) {
            $object->setScheme($data['scheme']);
            unset($data['scheme']);
        }
        if (\array_key_exists('domain', $data)) {
            $object->setDomain($data['domain']);
            unset($data['domain']);
        }
        if (\array_key_exists('keyword', $data)) {
            $object->setKeyword($data['keyword']);
            unset($data['keyword']);
        }
        if (\array_key_exists('description', $data)) {
            $object->setDescription($data['description']);
            unset($data['description']);
        }
        if (\array_key_exists('content', $data)) {
            $values = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
            foreach ($data['content'] as $key => $value) {
                $values[$key] = $value;
            }
            $object->setContent($values);
            unset($data['content']);
        }
        foreach ($data as $key_1 => $value_1) {
            if (preg_match('/.*/', (string) $key_1)) {
                $object[$key_1] = $value_1;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('launchpadId') && null !== $data->getLaunchpadId()) {
            $dataArray['launchpad_id'] = $data->getLaunchpadId();
        }
        if ($data->isInitialized('buttonId') && null !== $data->getButtonId()) {
            $dataArray['button_id'] = $data->getButtonId();
        }
        if ($data->isInitialized('digitalBusinessCardId') && null !== $data->getDigitalBusinessCardId()) {
            $dataArray['digital_business_card_id'] = $data->getDigitalBusinessCardId();
        }
        if ($data->isInitialized('sortOrder') && null !== $data->getSortOrder()) {
            $dataArray['sort_order'] = $data->getSortOrder();
        }
        if ($data->isInitialized('scheduleStart') && null !== $data->getScheduleStart()) {
            $dataArray['schedule_start'] = $data->getScheduleStart();
        }
        if ($data->isInitialized('scheduleEnd') && null !== $data->getScheduleEnd()) {
            $dataArray['schedule_end'] = $data->getScheduleEnd();
        }
        if ($data->isInitialized('isActive') && null !== $data->getIsActive()) {
            $dataArray['is_active'] = $data->getIsActive();
        }
        if ($data->isInitialized('isPinned') && null !== $data->getIsPinned()) {
            $dataArray['is_pinned'] = $data->getIsPinned();
        }
        if ($data->isInitialized('type') && null !== $data->getType()) {
            $dataArray['type'] = $data->getType();
        }
        if ($data->isInitialized('parent') && null !== $data->getParent()) {
            $dataArray['parent'] = $data->getParent();
        }
        if ($data->isInitialized('isSample') && null !== $data->getIsSample()) {
            $dataArray['is_sample'] = $data->getIsSample();
        }
        if ($data->isInitialized('title') && null !== $data->getTitle()) {
            $dataArray['title'] = $data->getTitle();
        }
        if ($data->isInitialized('bitlink') && null !== $data->getBitlink()) {
            $dataArray['bitlink'] = $data->getBitlink();
        }
        if ($data->isInitialized('longUrl') && null !== $data->getLongUrl()) {
            $dataArray['long_url'] = $data->getLongUrl();
        }
        if ($data->isInitialized('scheme') && null !== $data->getScheme()) {
            $dataArray['scheme'] = $data->getScheme();
        }
        if ($data->isInitialized('domain') && null !== $data->getDomain()) {
            $dataArray['domain'] = $data->getDomain();
        }
        if ($data->isInitialized('keyword') && null !== $data->getKeyword()) {
            $dataArray['keyword'] = $data->getKeyword();
        }
        if ($data->isInitialized('description') && null !== $data->getDescription()) {
            $dataArray['description'] = $data->getDescription();
        }
        if ($data->isInitialized('content') && null !== $data->getContent()) {
            $values = [];
            foreach ($data->getContent() as $key => $value) {
                $values[$key] = $value;
            }
            $dataArray['content'] = $values;
        }
        foreach ($data as $key_1 => $value_1) {
            if (preg_match('/.*/', (string) $key_1)) {
                $dataArray[$key_1] = $value_1;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\LaunchpadButton::class => false];
    }
}
