<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class BillingAccountNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \Bitly\Model\BillingAccount::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \Bitly\Model\BillingAccount::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Bitly\Model\BillingAccount();
            if (\array_key_exists('subscription_price', $data) && \is_int($data['subscription_price'])) {
                $data['subscription_price'] = (float) $data['subscription_price'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('account_id', $data)) {
                $object->setAccountId($data['account_id']);
                unset($data['account_id']);
            }
            if (\array_key_exists('account_num', $data)) {
                $object->setAccountNum($data['account_num']);
                unset($data['account_num']);
            }
            if (\array_key_exists('card_type', $data)) {
                $object->setCardType($data['card_type']);
                unset($data['card_type']);
            }
            if (\array_key_exists('currency', $data)) {
                $object->setCurrency($data['currency']);
                unset($data['currency']);
            }
            if (\array_key_exists('end_date', $data)) {
                $object->setEndDate($data['end_date']);
                unset($data['end_date']);
            }
            if (\array_key_exists('last_four_digits', $data)) {
                $object->setLastFourDigits($data['last_four_digits']);
                unset($data['last_four_digits']);
            }
            if (\array_key_exists('payment_method_type', $data)) {
                $object->setPaymentMethodType($data['payment_method_type']);
                unset($data['payment_method_type']);
            }
            if (\array_key_exists('renewal_date', $data)) {
                $object->setRenewalDate($data['renewal_date']);
                unset($data['renewal_date']);
            }
            if (\array_key_exists('subscription_price', $data)) {
                $object->setSubscriptionPrice($data['subscription_price']);
                unset($data['subscription_price']);
            }
            if (\array_key_exists('subscription_status', $data)) {
                $object->setSubscriptionStatus($data['subscription_status']);
                unset($data['subscription_status']);
            }
            if (\array_key_exists('tax_id', $data)) {
                $object->setTaxId($data['tax_id']);
                unset($data['tax_id']);
            }
            if (\array_key_exists('company_name', $data)) {
                $object->setCompanyName($data['company_name']);
                unset($data['company_name']);
            }
            if (\array_key_exists('billing_info', $data)) {
                $object->setBillingInfo($this->denormalizer->denormalize($data['billing_info'], \Bitly\Model\BillingInfo::class, 'json', $context));
                unset($data['billing_info']);
            }
            if (\array_key_exists('contacts', $data)) {
                $object->setContacts($this->denormalizer->denormalize($data['contacts'], \Bitly\Model\Contacts::class, 'json', $context));
                unset($data['contacts']);
            }
            if (\array_key_exists('contact_info', $data)) {
                $object->setContactInfo($this->denormalizer->denormalize($data['contact_info'], \Bitly\Model\ContactInfo::class, 'json', $context));
                unset($data['contact_info']);
            }
            if (\array_key_exists('subscription_discounts', $data)) {
                $values = [];
                foreach ($data['subscription_discounts'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, \Bitly\Model\SubscriptionDiscount::class, 'json', $context);
                }
                $object->setSubscriptionDiscounts($values);
                unset($data['subscription_discounts']);
            }
            foreach ($data as $key => $value_1) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value_1;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('accountId') && null !== $object->getAccountId()) {
                $data['account_id'] = $object->getAccountId();
            }
            if ($object->isInitialized('accountNum') && null !== $object->getAccountNum()) {
                $data['account_num'] = $object->getAccountNum();
            }
            if ($object->isInitialized('cardType') && null !== $object->getCardType()) {
                $data['card_type'] = $object->getCardType();
            }
            if ($object->isInitialized('currency') && null !== $object->getCurrency()) {
                $data['currency'] = $object->getCurrency();
            }
            if ($object->isInitialized('endDate') && null !== $object->getEndDate()) {
                $data['end_date'] = $object->getEndDate();
            }
            if ($object->isInitialized('lastFourDigits') && null !== $object->getLastFourDigits()) {
                $data['last_four_digits'] = $object->getLastFourDigits();
            }
            if ($object->isInitialized('paymentMethodType') && null !== $object->getPaymentMethodType()) {
                $data['payment_method_type'] = $object->getPaymentMethodType();
            }
            if ($object->isInitialized('renewalDate') && null !== $object->getRenewalDate()) {
                $data['renewal_date'] = $object->getRenewalDate();
            }
            if ($object->isInitialized('subscriptionPrice') && null !== $object->getSubscriptionPrice()) {
                $data['subscription_price'] = $object->getSubscriptionPrice();
            }
            if ($object->isInitialized('subscriptionStatus') && null !== $object->getSubscriptionStatus()) {
                $data['subscription_status'] = $object->getSubscriptionStatus();
            }
            if ($object->isInitialized('taxId') && null !== $object->getTaxId()) {
                $data['tax_id'] = $object->getTaxId();
            }
            if ($object->isInitialized('companyName') && null !== $object->getCompanyName()) {
                $data['company_name'] = $object->getCompanyName();
            }
            if ($object->isInitialized('billingInfo') && null !== $object->getBillingInfo()) {
                $data['billing_info'] = $this->normalizer->normalize($object->getBillingInfo(), 'json', $context);
            }
            if ($object->isInitialized('contacts') && null !== $object->getContacts()) {
                $data['contacts'] = $this->normalizer->normalize($object->getContacts(), 'json', $context);
            }
            if ($object->isInitialized('contactInfo') && null !== $object->getContactInfo()) {
                $data['contact_info'] = $this->normalizer->normalize($object->getContactInfo(), 'json', $context);
            }
            if ($object->isInitialized('subscriptionDiscounts') && null !== $object->getSubscriptionDiscounts()) {
                $values = [];
                foreach ($object->getSubscriptionDiscounts() as $value) {
                    $values[] = $this->normalizer->normalize($value, 'json', $context);
                }
                $data['subscription_discounts'] = $values;
            }
            foreach ($object as $key => $value_1) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value_1;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\Bitly\Model\BillingAccount::class => false];
        }
    }
} else {
    class BillingAccountNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \Bitly\Model\BillingAccount::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \Bitly\Model\BillingAccount::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Bitly\Model\BillingAccount();
            if (\array_key_exists('subscription_price', $data) && \is_int($data['subscription_price'])) {
                $data['subscription_price'] = (float) $data['subscription_price'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('account_id', $data)) {
                $object->setAccountId($data['account_id']);
                unset($data['account_id']);
            }
            if (\array_key_exists('account_num', $data)) {
                $object->setAccountNum($data['account_num']);
                unset($data['account_num']);
            }
            if (\array_key_exists('card_type', $data)) {
                $object->setCardType($data['card_type']);
                unset($data['card_type']);
            }
            if (\array_key_exists('currency', $data)) {
                $object->setCurrency($data['currency']);
                unset($data['currency']);
            }
            if (\array_key_exists('end_date', $data)) {
                $object->setEndDate($data['end_date']);
                unset($data['end_date']);
            }
            if (\array_key_exists('last_four_digits', $data)) {
                $object->setLastFourDigits($data['last_four_digits']);
                unset($data['last_four_digits']);
            }
            if (\array_key_exists('payment_method_type', $data)) {
                $object->setPaymentMethodType($data['payment_method_type']);
                unset($data['payment_method_type']);
            }
            if (\array_key_exists('renewal_date', $data)) {
                $object->setRenewalDate($data['renewal_date']);
                unset($data['renewal_date']);
            }
            if (\array_key_exists('subscription_price', $data)) {
                $object->setSubscriptionPrice($data['subscription_price']);
                unset($data['subscription_price']);
            }
            if (\array_key_exists('subscription_status', $data)) {
                $object->setSubscriptionStatus($data['subscription_status']);
                unset($data['subscription_status']);
            }
            if (\array_key_exists('tax_id', $data)) {
                $object->setTaxId($data['tax_id']);
                unset($data['tax_id']);
            }
            if (\array_key_exists('company_name', $data)) {
                $object->setCompanyName($data['company_name']);
                unset($data['company_name']);
            }
            if (\array_key_exists('billing_info', $data)) {
                $object->setBillingInfo($this->denormalizer->denormalize($data['billing_info'], \Bitly\Model\BillingInfo::class, 'json', $context));
                unset($data['billing_info']);
            }
            if (\array_key_exists('contacts', $data)) {
                $object->setContacts($this->denormalizer->denormalize($data['contacts'], \Bitly\Model\Contacts::class, 'json', $context));
                unset($data['contacts']);
            }
            if (\array_key_exists('contact_info', $data)) {
                $object->setContactInfo($this->denormalizer->denormalize($data['contact_info'], \Bitly\Model\ContactInfo::class, 'json', $context));
                unset($data['contact_info']);
            }
            if (\array_key_exists('subscription_discounts', $data)) {
                $values = [];
                foreach ($data['subscription_discounts'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, \Bitly\Model\SubscriptionDiscount::class, 'json', $context);
                }
                $object->setSubscriptionDiscounts($values);
                unset($data['subscription_discounts']);
            }
            foreach ($data as $key => $value_1) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value_1;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('accountId') && null !== $object->getAccountId()) {
                $data['account_id'] = $object->getAccountId();
            }
            if ($object->isInitialized('accountNum') && null !== $object->getAccountNum()) {
                $data['account_num'] = $object->getAccountNum();
            }
            if ($object->isInitialized('cardType') && null !== $object->getCardType()) {
                $data['card_type'] = $object->getCardType();
            }
            if ($object->isInitialized('currency') && null !== $object->getCurrency()) {
                $data['currency'] = $object->getCurrency();
            }
            if ($object->isInitialized('endDate') && null !== $object->getEndDate()) {
                $data['end_date'] = $object->getEndDate();
            }
            if ($object->isInitialized('lastFourDigits') && null !== $object->getLastFourDigits()) {
                $data['last_four_digits'] = $object->getLastFourDigits();
            }
            if ($object->isInitialized('paymentMethodType') && null !== $object->getPaymentMethodType()) {
                $data['payment_method_type'] = $object->getPaymentMethodType();
            }
            if ($object->isInitialized('renewalDate') && null !== $object->getRenewalDate()) {
                $data['renewal_date'] = $object->getRenewalDate();
            }
            if ($object->isInitialized('subscriptionPrice') && null !== $object->getSubscriptionPrice()) {
                $data['subscription_price'] = $object->getSubscriptionPrice();
            }
            if ($object->isInitialized('subscriptionStatus') && null !== $object->getSubscriptionStatus()) {
                $data['subscription_status'] = $object->getSubscriptionStatus();
            }
            if ($object->isInitialized('taxId') && null !== $object->getTaxId()) {
                $data['tax_id'] = $object->getTaxId();
            }
            if ($object->isInitialized('companyName') && null !== $object->getCompanyName()) {
                $data['company_name'] = $object->getCompanyName();
            }
            if ($object->isInitialized('billingInfo') && null !== $object->getBillingInfo()) {
                $data['billing_info'] = $this->normalizer->normalize($object->getBillingInfo(), 'json', $context);
            }
            if ($object->isInitialized('contacts') && null !== $object->getContacts()) {
                $data['contacts'] = $this->normalizer->normalize($object->getContacts(), 'json', $context);
            }
            if ($object->isInitialized('contactInfo') && null !== $object->getContactInfo()) {
                $data['contact_info'] = $this->normalizer->normalize($object->getContactInfo(), 'json', $context);
            }
            if ($object->isInitialized('subscriptionDiscounts') && null !== $object->getSubscriptionDiscounts()) {
                $values = [];
                foreach ($object->getSubscriptionDiscounts() as $value) {
                    $values[] = $this->normalizer->normalize($value, 'json', $context);
                }
                $data['subscription_discounts'] = $values;
            }
            foreach ($object as $key => $value_1) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value_1;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\Bitly\Model\BillingAccount::class => false];
        }
    }
}
