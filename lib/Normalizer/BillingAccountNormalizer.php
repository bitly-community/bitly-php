<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class BillingAccountNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\BillingAccount::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\BillingAccount::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\BillingAccount();
        if (\array_key_exists('subscription_price', $data) && \is_int($data['subscription_price'])) {
            $data['subscription_price'] = (float) $data['subscription_price'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('account_id', $data)) {
            $object->setAccountId($data['account_id']);
            unset($data['account_id']);
        }
        if (\array_key_exists('account_num', $data)) {
            $object->setAccountNum($data['account_num']);
            unset($data['account_num']);
        }
        if (\array_key_exists('card_type', $data)) {
            $object->setCardType($data['card_type']);
            unset($data['card_type']);
        }
        if (\array_key_exists('currency', $data)) {
            $object->setCurrency($data['currency']);
            unset($data['currency']);
        }
        if (\array_key_exists('billing_provider', $data)) {
            $object->setBillingProvider($data['billing_provider']);
            unset($data['billing_provider']);
        }
        if (\array_key_exists('end_date', $data)) {
            $object->setEndDate($data['end_date']);
            unset($data['end_date']);
        }
        if (\array_key_exists('subscription_start_date', $data)) {
            $object->setSubscriptionStartDate($data['subscription_start_date']);
            unset($data['subscription_start_date']);
        }
        if (\array_key_exists('last_four_digits', $data)) {
            $object->setLastFourDigits($data['last_four_digits']);
            unset($data['last_four_digits']);
        }
        if (\array_key_exists('payment_method_type', $data)) {
            $object->setPaymentMethodType($data['payment_method_type']);
            unset($data['payment_method_type']);
        }
        if (\array_key_exists('renewal_date', $data)) {
            $object->setRenewalDate($data['renewal_date']);
            unset($data['renewal_date']);
        }
        if (\array_key_exists('subscription_price', $data)) {
            $object->setSubscriptionPrice($data['subscription_price']);
            unset($data['subscription_price']);
        }
        if (\array_key_exists('subscription_status', $data)) {
            $object->setSubscriptionStatus($data['subscription_status']);
            unset($data['subscription_status']);
        }
        if (\array_key_exists('tax_id', $data)) {
            $object->setTaxId($data['tax_id']);
            unset($data['tax_id']);
        }
        if (\array_key_exists('company_name', $data)) {
            $object->setCompanyName($data['company_name']);
            unset($data['company_name']);
        }
        if (\array_key_exists('billing_info', $data)) {
            $object->setBillingInfo($this->denormalizer->denormalize($data['billing_info'], \Bitly\Model\BillingInfo::class, 'json', $context));
            unset($data['billing_info']);
        }
        if (\array_key_exists('contacts', $data)) {
            $object->setContacts($this->denormalizer->denormalize($data['contacts'], \Bitly\Model\Contacts::class, 'json', $context));
            unset($data['contacts']);
        }
        if (\array_key_exists('contact_info', $data)) {
            $object->setContactInfo($this->denormalizer->denormalize($data['contact_info'], \Bitly\Model\ContactInfo::class, 'json', $context));
            unset($data['contact_info']);
        }
        if (\array_key_exists('subscription_discounts', $data)) {
            $values = [];
            foreach ($data['subscription_discounts'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, \Bitly\Model\SubscriptionDiscount::class, 'json', $context);
            }
            $object->setSubscriptionDiscounts($values);
            unset($data['subscription_discounts']);
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_1;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('accountId') && null !== $data->getAccountId()) {
            $dataArray['account_id'] = $data->getAccountId();
        }
        if ($data->isInitialized('accountNum') && null !== $data->getAccountNum()) {
            $dataArray['account_num'] = $data->getAccountNum();
        }
        if ($data->isInitialized('cardType') && null !== $data->getCardType()) {
            $dataArray['card_type'] = $data->getCardType();
        }
        if ($data->isInitialized('currency') && null !== $data->getCurrency()) {
            $dataArray['currency'] = $data->getCurrency();
        }
        if ($data->isInitialized('billingProvider') && null !== $data->getBillingProvider()) {
            $dataArray['billing_provider'] = $data->getBillingProvider();
        }
        if ($data->isInitialized('endDate') && null !== $data->getEndDate()) {
            $dataArray['end_date'] = $data->getEndDate();
        }
        if ($data->isInitialized('subscriptionStartDate') && null !== $data->getSubscriptionStartDate()) {
            $dataArray['subscription_start_date'] = $data->getSubscriptionStartDate();
        }
        if ($data->isInitialized('lastFourDigits') && null !== $data->getLastFourDigits()) {
            $dataArray['last_four_digits'] = $data->getLastFourDigits();
        }
        if ($data->isInitialized('paymentMethodType') && null !== $data->getPaymentMethodType()) {
            $dataArray['payment_method_type'] = $data->getPaymentMethodType();
        }
        if ($data->isInitialized('renewalDate') && null !== $data->getRenewalDate()) {
            $dataArray['renewal_date'] = $data->getRenewalDate();
        }
        if ($data->isInitialized('subscriptionPrice') && null !== $data->getSubscriptionPrice()) {
            $dataArray['subscription_price'] = $data->getSubscriptionPrice();
        }
        if ($data->isInitialized('subscriptionStatus') && null !== $data->getSubscriptionStatus()) {
            $dataArray['subscription_status'] = $data->getSubscriptionStatus();
        }
        if ($data->isInitialized('taxId') && null !== $data->getTaxId()) {
            $dataArray['tax_id'] = $data->getTaxId();
        }
        if ($data->isInitialized('companyName') && null !== $data->getCompanyName()) {
            $dataArray['company_name'] = $data->getCompanyName();
        }
        if ($data->isInitialized('billingInfo') && null !== $data->getBillingInfo()) {
            $dataArray['billing_info'] = $this->normalizer->normalize($data->getBillingInfo(), 'json', $context);
        }
        if ($data->isInitialized('contacts') && null !== $data->getContacts()) {
            $dataArray['contacts'] = $this->normalizer->normalize($data->getContacts(), 'json', $context);
        }
        if ($data->isInitialized('contactInfo') && null !== $data->getContactInfo()) {
            $dataArray['contact_info'] = $this->normalizer->normalize($data->getContactInfo(), 'json', $context);
        }
        if ($data->isInitialized('subscriptionDiscounts') && null !== $data->getSubscriptionDiscounts()) {
            $values = [];
            foreach ($data->getSubscriptionDiscounts() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $dataArray['subscription_discounts'] = $values;
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_1;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\BillingAccount::class => false];
    }
}
