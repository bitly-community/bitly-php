<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class QRCodeNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\QRCode::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\QRCode::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\QRCode();
        if (\array_key_exists('is_hidden', $data) && \is_int($data['is_hidden'])) {
            $data['is_hidden'] = (bool) $data['is_hidden'];
        }
        if (\array_key_exists('is_customized', $data) && \is_int($data['is_customized'])) {
            $data['is_customized'] = (bool) $data['is_customized'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('qrcode_id', $data)) {
            $object->setQrcodeId($data['qrcode_id']);
            unset($data['qrcode_id']);
        }
        if (\array_key_exists('title', $data)) {
            $object->setTitle($data['title']);
            unset($data['title']);
        }
        if (\array_key_exists('render_customizations', $data)) {
            $object->setRenderCustomizations($this->denormalizer->denormalize($data['render_customizations'], \Bitly\Model\QRCodeCustomizations::class, 'json', $context));
            unset($data['render_customizations']);
        }
        if (\array_key_exists('is_hidden', $data)) {
            $object->setIsHidden($data['is_hidden']);
            unset($data['is_hidden']);
        }
        if (\array_key_exists('is_customized', $data)) {
            $object->setIsCustomized($data['is_customized']);
            unset($data['is_customized']);
        }
        if (\array_key_exists('serialized_content', $data)) {
            $object->setSerializedContent($data['serialized_content']);
            unset($data['serialized_content']);
        }
        if (\array_key_exists('qr_code_type', $data)) {
            $object->setQrCodeType($data['qr_code_type']);
            unset($data['qr_code_type']);
        }
        if (\array_key_exists('customization_hash', $data)) {
            $object->setCustomizationHash($data['customization_hash']);
            unset($data['customization_hash']);
        }
        if (\array_key_exists('full_hash', $data)) {
            $object->setFullHash($data['full_hash']);
            unset($data['full_hash']);
        }
        if (\array_key_exists('created', $data)) {
            $object->setCreated($data['created']);
            unset($data['created']);
        }
        if (\array_key_exists('modified', $data)) {
            $object->setModified($data['modified']);
            unset($data['modified']);
        }
        if (\array_key_exists('created_ts', $data)) {
            $object->setCreatedTs($data['created_ts']);
            unset($data['created_ts']);
        }
        if (\array_key_exists('modified_ts', $data)) {
            $object->setModifiedTs($data['modified_ts']);
            unset($data['modified_ts']);
        }
        if (\array_key_exists('svg', $data)) {
            $object->setSvg($data['svg']);
            unset($data['svg']);
        }
        if (\array_key_exists('png', $data)) {
            $object->setPng($data['png']);
            unset($data['png']);
        }
        if (\array_key_exists('jpg', $data)) {
            $object->setJpg($data['jpg']);
            unset($data['jpg']);
        }
        if (\array_key_exists('dynamic_content', $data)) {
            $object->setDynamicContent($this->denormalizer->denormalize($data['dynamic_content'], \Bitly\Model\QRCodeDynamic::class, 'json', $context));
            unset($data['dynamic_content']);
        }
        if (\array_key_exists('static_content', $data)) {
            $object->setStaticContent($this->denormalizer->denormalize($data['static_content'], \Bitly\Model\QRCodeStatic::class, 'json', $context));
            unset($data['static_content']);
        }
        if (\array_key_exists('spec_settings', $data)) {
            $object->setSpecSettings($this->denormalizer->denormalize($data['spec_settings'], \Bitly\Model\QRCodeSpecSettings::class, 'json', $context));
            unset($data['spec_settings']);
        }
        if (\array_key_exists('gs1', $data)) {
            $object->setGs1($this->denormalizer->denormalize($data['gs1'], \Bitly\Model\GS1Metadata::class, 'json', $context));
            unset($data['gs1']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('qrcodeId') && null !== $data->getQrcodeId()) {
            $dataArray['qrcode_id'] = $data->getQrcodeId();
        }
        if ($data->isInitialized('title') && null !== $data->getTitle()) {
            $dataArray['title'] = $data->getTitle();
        }
        if ($data->isInitialized('renderCustomizations') && null !== $data->getRenderCustomizations()) {
            $dataArray['render_customizations'] = $this->normalizer->normalize($data->getRenderCustomizations(), 'json', $context);
        }
        if ($data->isInitialized('isHidden') && null !== $data->getIsHidden()) {
            $dataArray['is_hidden'] = $data->getIsHidden();
        }
        if ($data->isInitialized('isCustomized') && null !== $data->getIsCustomized()) {
            $dataArray['is_customized'] = $data->getIsCustomized();
        }
        if ($data->isInitialized('serializedContent') && null !== $data->getSerializedContent()) {
            $dataArray['serialized_content'] = $data->getSerializedContent();
        }
        if ($data->isInitialized('qrCodeType') && null !== $data->getQrCodeType()) {
            $dataArray['qr_code_type'] = $data->getQrCodeType();
        }
        if ($data->isInitialized('customizationHash') && null !== $data->getCustomizationHash()) {
            $dataArray['customization_hash'] = $data->getCustomizationHash();
        }
        if ($data->isInitialized('fullHash') && null !== $data->getFullHash()) {
            $dataArray['full_hash'] = $data->getFullHash();
        }
        if ($data->isInitialized('created') && null !== $data->getCreated()) {
            $dataArray['created'] = $data->getCreated();
        }
        if ($data->isInitialized('modified') && null !== $data->getModified()) {
            $dataArray['modified'] = $data->getModified();
        }
        if ($data->isInitialized('createdTs') && null !== $data->getCreatedTs()) {
            $dataArray['created_ts'] = $data->getCreatedTs();
        }
        if ($data->isInitialized('modifiedTs') && null !== $data->getModifiedTs()) {
            $dataArray['modified_ts'] = $data->getModifiedTs();
        }
        if ($data->isInitialized('svg') && null !== $data->getSvg()) {
            $dataArray['svg'] = $data->getSvg();
        }
        if ($data->isInitialized('png') && null !== $data->getPng()) {
            $dataArray['png'] = $data->getPng();
        }
        if ($data->isInitialized('jpg') && null !== $data->getJpg()) {
            $dataArray['jpg'] = $data->getJpg();
        }
        if ($data->isInitialized('dynamicContent') && null !== $data->getDynamicContent()) {
            $dataArray['dynamic_content'] = $this->normalizer->normalize($data->getDynamicContent(), 'json', $context);
        }
        if ($data->isInitialized('staticContent') && null !== $data->getStaticContent()) {
            $dataArray['static_content'] = $this->normalizer->normalize($data->getStaticContent(), 'json', $context);
        }
        if ($data->isInitialized('specSettings') && null !== $data->getSpecSettings()) {
            $dataArray['spec_settings'] = $this->normalizer->normalize($data->getSpecSettings(), 'json', $context);
        }
        if ($data->isInitialized('gs1') && null !== $data->getGs1()) {
            $dataArray['gs1'] = $this->normalizer->normalize($data->getGs1(), 'json', $context);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\QRCode::class => false];
    }
}
