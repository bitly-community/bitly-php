<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class DataExportQueryNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \Bitly\Model\DataExportQuery::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \Bitly\Model\DataExportQuery::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Bitly\Model\DataExportQuery();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('report_type', $data)) {
                $object->setReportType($data['report_type']);
                unset($data['report_type']);
            }
            if (\array_key_exists('emails', $data)) {
                $values = [];
                foreach ($data['emails'] as $value) {
                    $values[] = $value;
                }
                $object->setEmails($values);
                unset($data['emails']);
            }
            if (\array_key_exists('created_before', $data)) {
                $object->setCreatedBefore($data['created_before']);
                unset($data['created_before']);
            }
            if (\array_key_exists('created_after', $data)) {
                $object->setCreatedAfter($data['created_after']);
                unset($data['created_after']);
            }
            if (\array_key_exists('modified_after', $data)) {
                $object->setModifiedAfter($data['modified_after']);
                unset($data['modified_after']);
            }
            if (\array_key_exists('query', $data)) {
                $object->setQuery($data['query']);
                unset($data['query']);
            }
            if (\array_key_exists('keyword', $data)) {
                $object->setKeyword($data['keyword']);
                unset($data['keyword']);
            }
            if (\array_key_exists('archived', $data)) {
                $object->setArchived($data['archived']);
                unset($data['archived']);
            }
            if (\array_key_exists('link_deeplinks', $data)) {
                $object->setLinkDeeplinks($data['link_deeplinks']);
                unset($data['link_deeplinks']);
            }
            if (\array_key_exists('custom_bitlink', $data)) {
                $object->setCustomBitlink($data['custom_bitlink']);
                unset($data['custom_bitlink']);
            }
            if (\array_key_exists('creating_logins', $data)) {
                $values_1 = [];
                foreach ($data['creating_logins'] as $value_1) {
                    $values_1[] = $value_1;
                }
                $object->setCreatingLogins($values_1);
                unset($data['creating_logins']);
            }
            if (\array_key_exists('is_customized', $data)) {
                $object->setIsCustomized($data['is_customized']);
                unset($data['is_customized']);
            }
            if (\array_key_exists('is_gs1', $data)) {
                $object->setIsGs1($data['is_gs1']);
                unset($data['is_gs1']);
            }
            if (\array_key_exists('qrc_types', $data)) {
                $object->setQrcTypes($data['qrc_types']);
                unset($data['qrc_types']);
            }
            if (\array_key_exists('tags', $data)) {
                $values_2 = [];
                foreach ($data['tags'] as $value_2) {
                    $values_2[] = $value_2;
                }
                $object->setTags($values_2);
                unset($data['tags']);
            }
            if (\array_key_exists('campaign_ids', $data)) {
                $values_3 = [];
                foreach ($data['campaign_ids'] as $value_3) {
                    $values_3[] = $value_3;
                }
                $object->setCampaignIds($values_3);
                unset($data['campaign_ids']);
            }
            if (\array_key_exists('unit', $data)) {
                $object->setUnit($data['unit']);
                unset($data['unit']);
            }
            if (\array_key_exists('units', $data)) {
                $object->setUnits($data['units']);
                unset($data['units']);
            }
            if (\array_key_exists('unit_reference', $data)) {
                $object->setUnitReference($data['unit_reference']);
                unset($data['unit_reference']);
            }
            if (\array_key_exists('include_max_history', $data)) {
                $object->setIncludeMaxHistory($data['include_max_history']);
                unset($data['include_max_history']);
            }
            if (\array_key_exists('max_history_minimum_count', $data)) {
                $object->setMaxHistoryMinimumCount($data['max_history_minimum_count']);
                unset($data['max_history_minimum_count']);
            }
            if (\array_key_exists('metrics_columns', $data)) {
                $values_4 = [];
                foreach ($data['metrics_columns'] as $value_4) {
                    $values_4[] = $this->denormalizer->denormalize($value_4, \Bitly\Model\MetricsColumn::class, 'json', $context);
                }
                $object->setMetricsColumns($values_4);
                unset($data['metrics_columns']);
            }
            foreach ($data as $key => $value_5) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value_5;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            $data['report_type'] = $object->getReportType();
            $values = [];
            foreach ($object->getEmails() as $value) {
                $values[] = $value;
            }
            $data['emails'] = $values;
            if ($object->isInitialized('createdBefore') && null !== $object->getCreatedBefore()) {
                $data['created_before'] = $object->getCreatedBefore();
            }
            if ($object->isInitialized('createdAfter') && null !== $object->getCreatedAfter()) {
                $data['created_after'] = $object->getCreatedAfter();
            }
            if ($object->isInitialized('modifiedAfter') && null !== $object->getModifiedAfter()) {
                $data['modified_after'] = $object->getModifiedAfter();
            }
            if ($object->isInitialized('query') && null !== $object->getQuery()) {
                $data['query'] = $object->getQuery();
            }
            if ($object->isInitialized('keyword') && null !== $object->getKeyword()) {
                $data['keyword'] = $object->getKeyword();
            }
            if ($object->isInitialized('archived') && null !== $object->getArchived()) {
                $data['archived'] = $object->getArchived();
            }
            if ($object->isInitialized('linkDeeplinks') && null !== $object->getLinkDeeplinks()) {
                $data['link_deeplinks'] = $object->getLinkDeeplinks();
            }
            if ($object->isInitialized('customBitlink') && null !== $object->getCustomBitlink()) {
                $data['custom_bitlink'] = $object->getCustomBitlink();
            }
            if ($object->isInitialized('creatingLogins') && null !== $object->getCreatingLogins()) {
                $values_1 = [];
                foreach ($object->getCreatingLogins() as $value_1) {
                    $values_1[] = $value_1;
                }
                $data['creating_logins'] = $values_1;
            }
            if ($object->isInitialized('isCustomized') && null !== $object->getIsCustomized()) {
                $data['is_customized'] = $object->getIsCustomized();
            }
            if ($object->isInitialized('isGs1') && null !== $object->getIsGs1()) {
                $data['is_gs1'] = $object->getIsGs1();
            }
            if ($object->isInitialized('qrcTypes') && null !== $object->getQrcTypes()) {
                $data['qrc_types'] = $object->getQrcTypes();
            }
            if ($object->isInitialized('tags') && null !== $object->getTags()) {
                $values_2 = [];
                foreach ($object->getTags() as $value_2) {
                    $values_2[] = $value_2;
                }
                $data['tags'] = $values_2;
            }
            if ($object->isInitialized('campaignIds') && null !== $object->getCampaignIds()) {
                $values_3 = [];
                foreach ($object->getCampaignIds() as $value_3) {
                    $values_3[] = $value_3;
                }
                $data['campaign_ids'] = $values_3;
            }
            if ($object->isInitialized('unit') && null !== $object->getUnit()) {
                $data['unit'] = $object->getUnit();
            }
            if ($object->isInitialized('units') && null !== $object->getUnits()) {
                $data['units'] = $object->getUnits();
            }
            if ($object->isInitialized('unitReference') && null !== $object->getUnitReference()) {
                $data['unit_reference'] = $object->getUnitReference();
            }
            if ($object->isInitialized('includeMaxHistory') && null !== $object->getIncludeMaxHistory()) {
                $data['include_max_history'] = $object->getIncludeMaxHistory();
            }
            if ($object->isInitialized('maxHistoryMinimumCount') && null !== $object->getMaxHistoryMinimumCount()) {
                $data['max_history_minimum_count'] = $object->getMaxHistoryMinimumCount();
            }
            if ($object->isInitialized('metricsColumns') && null !== $object->getMetricsColumns()) {
                $values_4 = [];
                foreach ($object->getMetricsColumns() as $value_4) {
                    $values_4[] = $this->normalizer->normalize($value_4, 'json', $context);
                }
                $data['metrics_columns'] = $values_4;
            }
            foreach ($object as $key => $value_5) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value_5;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\Bitly\Model\DataExportQuery::class => false];
        }
    }
} else {
    class DataExportQueryNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \Bitly\Model\DataExportQuery::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \Bitly\Model\DataExportQuery::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Bitly\Model\DataExportQuery();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('report_type', $data)) {
                $object->setReportType($data['report_type']);
                unset($data['report_type']);
            }
            if (\array_key_exists('emails', $data)) {
                $values = [];
                foreach ($data['emails'] as $value) {
                    $values[] = $value;
                }
                $object->setEmails($values);
                unset($data['emails']);
            }
            if (\array_key_exists('created_before', $data)) {
                $object->setCreatedBefore($data['created_before']);
                unset($data['created_before']);
            }
            if (\array_key_exists('created_after', $data)) {
                $object->setCreatedAfter($data['created_after']);
                unset($data['created_after']);
            }
            if (\array_key_exists('modified_after', $data)) {
                $object->setModifiedAfter($data['modified_after']);
                unset($data['modified_after']);
            }
            if (\array_key_exists('query', $data)) {
                $object->setQuery($data['query']);
                unset($data['query']);
            }
            if (\array_key_exists('keyword', $data)) {
                $object->setKeyword($data['keyword']);
                unset($data['keyword']);
            }
            if (\array_key_exists('archived', $data)) {
                $object->setArchived($data['archived']);
                unset($data['archived']);
            }
            if (\array_key_exists('link_deeplinks', $data)) {
                $object->setLinkDeeplinks($data['link_deeplinks']);
                unset($data['link_deeplinks']);
            }
            if (\array_key_exists('custom_bitlink', $data)) {
                $object->setCustomBitlink($data['custom_bitlink']);
                unset($data['custom_bitlink']);
            }
            if (\array_key_exists('creating_logins', $data)) {
                $values_1 = [];
                foreach ($data['creating_logins'] as $value_1) {
                    $values_1[] = $value_1;
                }
                $object->setCreatingLogins($values_1);
                unset($data['creating_logins']);
            }
            if (\array_key_exists('is_customized', $data)) {
                $object->setIsCustomized($data['is_customized']);
                unset($data['is_customized']);
            }
            if (\array_key_exists('is_gs1', $data)) {
                $object->setIsGs1($data['is_gs1']);
                unset($data['is_gs1']);
            }
            if (\array_key_exists('qrc_types', $data)) {
                $object->setQrcTypes($data['qrc_types']);
                unset($data['qrc_types']);
            }
            if (\array_key_exists('tags', $data)) {
                $values_2 = [];
                foreach ($data['tags'] as $value_2) {
                    $values_2[] = $value_2;
                }
                $object->setTags($values_2);
                unset($data['tags']);
            }
            if (\array_key_exists('campaign_ids', $data)) {
                $values_3 = [];
                foreach ($data['campaign_ids'] as $value_3) {
                    $values_3[] = $value_3;
                }
                $object->setCampaignIds($values_3);
                unset($data['campaign_ids']);
            }
            if (\array_key_exists('unit', $data)) {
                $object->setUnit($data['unit']);
                unset($data['unit']);
            }
            if (\array_key_exists('units', $data)) {
                $object->setUnits($data['units']);
                unset($data['units']);
            }
            if (\array_key_exists('unit_reference', $data)) {
                $object->setUnitReference($data['unit_reference']);
                unset($data['unit_reference']);
            }
            if (\array_key_exists('include_max_history', $data)) {
                $object->setIncludeMaxHistory($data['include_max_history']);
                unset($data['include_max_history']);
            }
            if (\array_key_exists('max_history_minimum_count', $data)) {
                $object->setMaxHistoryMinimumCount($data['max_history_minimum_count']);
                unset($data['max_history_minimum_count']);
            }
            if (\array_key_exists('metrics_columns', $data)) {
                $values_4 = [];
                foreach ($data['metrics_columns'] as $value_4) {
                    $values_4[] = $this->denormalizer->denormalize($value_4, \Bitly\Model\MetricsColumn::class, 'json', $context);
                }
                $object->setMetricsColumns($values_4);
                unset($data['metrics_columns']);
            }
            foreach ($data as $key => $value_5) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value_5;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            $data['report_type'] = $object->getReportType();
            $values = [];
            foreach ($object->getEmails() as $value) {
                $values[] = $value;
            }
            $data['emails'] = $values;
            if ($object->isInitialized('createdBefore') && null !== $object->getCreatedBefore()) {
                $data['created_before'] = $object->getCreatedBefore();
            }
            if ($object->isInitialized('createdAfter') && null !== $object->getCreatedAfter()) {
                $data['created_after'] = $object->getCreatedAfter();
            }
            if ($object->isInitialized('modifiedAfter') && null !== $object->getModifiedAfter()) {
                $data['modified_after'] = $object->getModifiedAfter();
            }
            if ($object->isInitialized('query') && null !== $object->getQuery()) {
                $data['query'] = $object->getQuery();
            }
            if ($object->isInitialized('keyword') && null !== $object->getKeyword()) {
                $data['keyword'] = $object->getKeyword();
            }
            if ($object->isInitialized('archived') && null !== $object->getArchived()) {
                $data['archived'] = $object->getArchived();
            }
            if ($object->isInitialized('linkDeeplinks') && null !== $object->getLinkDeeplinks()) {
                $data['link_deeplinks'] = $object->getLinkDeeplinks();
            }
            if ($object->isInitialized('customBitlink') && null !== $object->getCustomBitlink()) {
                $data['custom_bitlink'] = $object->getCustomBitlink();
            }
            if ($object->isInitialized('creatingLogins') && null !== $object->getCreatingLogins()) {
                $values_1 = [];
                foreach ($object->getCreatingLogins() as $value_1) {
                    $values_1[] = $value_1;
                }
                $data['creating_logins'] = $values_1;
            }
            if ($object->isInitialized('isCustomized') && null !== $object->getIsCustomized()) {
                $data['is_customized'] = $object->getIsCustomized();
            }
            if ($object->isInitialized('isGs1') && null !== $object->getIsGs1()) {
                $data['is_gs1'] = $object->getIsGs1();
            }
            if ($object->isInitialized('qrcTypes') && null !== $object->getQrcTypes()) {
                $data['qrc_types'] = $object->getQrcTypes();
            }
            if ($object->isInitialized('tags') && null !== $object->getTags()) {
                $values_2 = [];
                foreach ($object->getTags() as $value_2) {
                    $values_2[] = $value_2;
                }
                $data['tags'] = $values_2;
            }
            if ($object->isInitialized('campaignIds') && null !== $object->getCampaignIds()) {
                $values_3 = [];
                foreach ($object->getCampaignIds() as $value_3) {
                    $values_3[] = $value_3;
                }
                $data['campaign_ids'] = $values_3;
            }
            if ($object->isInitialized('unit') && null !== $object->getUnit()) {
                $data['unit'] = $object->getUnit();
            }
            if ($object->isInitialized('units') && null !== $object->getUnits()) {
                $data['units'] = $object->getUnits();
            }
            if ($object->isInitialized('unitReference') && null !== $object->getUnitReference()) {
                $data['unit_reference'] = $object->getUnitReference();
            }
            if ($object->isInitialized('includeMaxHistory') && null !== $object->getIncludeMaxHistory()) {
                $data['include_max_history'] = $object->getIncludeMaxHistory();
            }
            if ($object->isInitialized('maxHistoryMinimumCount') && null !== $object->getMaxHistoryMinimumCount()) {
                $data['max_history_minimum_count'] = $object->getMaxHistoryMinimumCount();
            }
            if ($object->isInitialized('metricsColumns') && null !== $object->getMetricsColumns()) {
                $values_4 = [];
                foreach ($object->getMetricsColumns() as $value_4) {
                    $values_4[] = $this->normalizer->normalize($value_4, 'json', $context);
                }
                $data['metrics_columns'] = $values_4;
            }
            foreach ($object as $key => $value_5) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value_5;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\Bitly\Model\DataExportQuery::class => false];
        }
    }
}
