<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class QRCodeCornersNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\QRCodeCorners::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\QRCodeCorners::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\QRCodeCorners();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('corner_1', $data)) {
            $object->setCorner1($this->denormalizer->denormalize($data['corner_1'], \Bitly\Model\QRCodeCorner::class, 'json', $context));
            unset($data['corner_1']);
        }
        if (\array_key_exists('corner_2', $data)) {
            $object->setCorner2($this->denormalizer->denormalize($data['corner_2'], \Bitly\Model\QRCodeCorner::class, 'json', $context));
            unset($data['corner_2']);
        }
        if (\array_key_exists('corner_3', $data)) {
            $object->setCorner3($this->denormalizer->denormalize($data['corner_3'], \Bitly\Model\QRCodeCorner::class, 'json', $context));
            unset($data['corner_3']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('corner1') && null !== $data->getCorner1()) {
            $dataArray['corner_1'] = $this->normalizer->normalize($data->getCorner1(), 'json', $context);
        }
        if ($data->isInitialized('corner2') && null !== $data->getCorner2()) {
            $dataArray['corner_2'] = $this->normalizer->normalize($data->getCorner2(), 'json', $context);
        }
        if ($data->isInitialized('corner3') && null !== $data->getCorner3()) {
            $dataArray['corner_3'] = $this->normalizer->normalize($data->getCorner3(), 'json', $context);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\QRCodeCorners::class => false];
    }
}
