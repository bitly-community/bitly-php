<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class QRCodeTemplateNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\QRCodeTemplate::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\QRCodeTemplate::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\QRCodeTemplate();
        if (\array_key_exists('premade', $data) && \is_int($data['premade'])) {
            $data['premade'] = (bool) $data['premade'];
        }
        if (\array_key_exists('is_active', $data) && \is_int($data['is_active'])) {
            $data['is_active'] = (bool) $data['is_active'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('id', $data)) {
            $object->setId($data['id']);
            unset($data['id']);
        }
        if (\array_key_exists('brand_guid', $data)) {
            $object->setBrandGuid($data['brand_guid']);
            unset($data['brand_guid']);
        }
        if (\array_key_exists('render_customizations', $data)) {
            $object->setRenderCustomizations($this->denormalizer->denormalize($data['render_customizations'], \Bitly\Model\QRCodeCustomizations::class, 'json', $context));
            unset($data['render_customizations']);
        }
        if (\array_key_exists('customization_hash', $data)) {
            $object->setCustomizationHash($data['customization_hash']);
            unset($data['customization_hash']);
        }
        if (\array_key_exists('premade', $data)) {
            $object->setPremade($data['premade']);
            unset($data['premade']);
        }
        if (\array_key_exists('is_active', $data)) {
            $object->setIsActive($data['is_active']);
            unset($data['is_active']);
        }
        if (\array_key_exists('created_ts', $data)) {
            $object->setCreatedTs($data['created_ts']);
            unset($data['created_ts']);
        }
        if (\array_key_exists('modified_ts', $data)) {
            $object->setModifiedTs($data['modified_ts']);
            unset($data['modified_ts']);
        }
        if (\array_key_exists('svg', $data)) {
            $object->setSvg($data['svg']);
            unset($data['svg']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('id') && null !== $data->getId()) {
            $dataArray['id'] = $data->getId();
        }
        if ($data->isInitialized('brandGuid') && null !== $data->getBrandGuid()) {
            $dataArray['brand_guid'] = $data->getBrandGuid();
        }
        if ($data->isInitialized('renderCustomizations') && null !== $data->getRenderCustomizations()) {
            $dataArray['render_customizations'] = $this->normalizer->normalize($data->getRenderCustomizations(), 'json', $context);
        }
        if ($data->isInitialized('customizationHash') && null !== $data->getCustomizationHash()) {
            $dataArray['customization_hash'] = $data->getCustomizationHash();
        }
        if ($data->isInitialized('premade') && null !== $data->getPremade()) {
            $dataArray['premade'] = $data->getPremade();
        }
        if ($data->isInitialized('isActive') && null !== $data->getIsActive()) {
            $dataArray['is_active'] = $data->getIsActive();
        }
        if ($data->isInitialized('createdTs') && null !== $data->getCreatedTs()) {
            $dataArray['created_ts'] = $data->getCreatedTs();
        }
        if ($data->isInitialized('modifiedTs') && null !== $data->getModifiedTs()) {
            $dataArray['modified_ts'] = $data->getModifiedTs();
        }
        if ($data->isInitialized('svg') && null !== $data->getSvg()) {
            $dataArray['svg'] = $data->getSvg();
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\QRCodeTemplate::class => false];
    }
}
