<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class QRCodeStaticNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return $type === \Bitly\Model\QRCodeStatic::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \Bitly\Model\QRCodeStatic::class;
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Bitly\Model\QRCodeStatic();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('static_type', $data)) {
                $object->setStaticType($data['static_type']);
                unset($data['static_type']);
            }
            if (\array_key_exists('v_card', $data)) {
                $object->setVCard($this->denormalizer->denormalize($data['v_card'], \Bitly\Model\QRCodeVirtualCard::class, 'json', $context));
                unset($data['v_card']);
            }
            if (\array_key_exists('wifi', $data)) {
                $object->setWifi($this->denormalizer->denormalize($data['wifi'], \Bitly\Model\QRCodeWifi::class, 'json', $context));
                unset($data['wifi']);
            }
            if (\array_key_exists('email', $data)) {
                $object->setEmail($this->denormalizer->denormalize($data['email'], \Bitly\Model\QRCodeEmail::class, 'json', $context));
                unset($data['email']);
            }
            if (\array_key_exists('phone', $data)) {
                $object->setPhone($this->denormalizer->denormalize($data['phone'], \Bitly\Model\QRCodePhoneNumber::class, 'json', $context));
                unset($data['phone']);
            }
            if (\array_key_exists('text', $data)) {
                $object->setText($this->denormalizer->denormalize($data['text'], \Bitly\Model\QRCodeTextMessage::class, 'json', $context));
                unset($data['text']);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('staticType') && null !== $object->getStaticType()) {
                $data['static_type'] = $object->getStaticType();
            }
            if ($object->isInitialized('vCard') && null !== $object->getVCard()) {
                $data['v_card'] = $this->normalizer->normalize($object->getVCard(), 'json', $context);
            }
            if ($object->isInitialized('wifi') && null !== $object->getWifi()) {
                $data['wifi'] = $this->normalizer->normalize($object->getWifi(), 'json', $context);
            }
            if ($object->isInitialized('email') && null !== $object->getEmail()) {
                $data['email'] = $this->normalizer->normalize($object->getEmail(), 'json', $context);
            }
            if ($object->isInitialized('phone') && null !== $object->getPhone()) {
                $data['phone'] = $this->normalizer->normalize($object->getPhone(), 'json', $context);
            }
            if ($object->isInitialized('text') && null !== $object->getText()) {
                $data['text'] = $this->normalizer->normalize($object->getText(), 'json', $context);
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\Bitly\Model\QRCodeStatic::class => false];
        }
    }
} else {
    class QRCodeStaticNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return $type === \Bitly\Model\QRCodeStatic::class;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && get_class($data) === \Bitly\Model\QRCodeStatic::class;
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \Bitly\Model\QRCodeStatic();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('static_type', $data)) {
                $object->setStaticType($data['static_type']);
                unset($data['static_type']);
            }
            if (\array_key_exists('v_card', $data)) {
                $object->setVCard($this->denormalizer->denormalize($data['v_card'], \Bitly\Model\QRCodeVirtualCard::class, 'json', $context));
                unset($data['v_card']);
            }
            if (\array_key_exists('wifi', $data)) {
                $object->setWifi($this->denormalizer->denormalize($data['wifi'], \Bitly\Model\QRCodeWifi::class, 'json', $context));
                unset($data['wifi']);
            }
            if (\array_key_exists('email', $data)) {
                $object->setEmail($this->denormalizer->denormalize($data['email'], \Bitly\Model\QRCodeEmail::class, 'json', $context));
                unset($data['email']);
            }
            if (\array_key_exists('phone', $data)) {
                $object->setPhone($this->denormalizer->denormalize($data['phone'], \Bitly\Model\QRCodePhoneNumber::class, 'json', $context));
                unset($data['phone']);
            }
            if (\array_key_exists('text', $data)) {
                $object->setText($this->denormalizer->denormalize($data['text'], \Bitly\Model\QRCodeTextMessage::class, 'json', $context));
                unset($data['text']);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('staticType') && null !== $object->getStaticType()) {
                $data['static_type'] = $object->getStaticType();
            }
            if ($object->isInitialized('vCard') && null !== $object->getVCard()) {
                $data['v_card'] = $this->normalizer->normalize($object->getVCard(), 'json', $context);
            }
            if ($object->isInitialized('wifi') && null !== $object->getWifi()) {
                $data['wifi'] = $this->normalizer->normalize($object->getWifi(), 'json', $context);
            }
            if ($object->isInitialized('email') && null !== $object->getEmail()) {
                $data['email'] = $this->normalizer->normalize($object->getEmail(), 'json', $context);
            }
            if ($object->isInitialized('phone') && null !== $object->getPhone()) {
                $data['phone'] = $this->normalizer->normalize($object->getPhone(), 'json', $context);
            }
            if ($object->isInitialized('text') && null !== $object->getText()) {
                $data['text'] = $this->normalizer->normalize($object->getText(), 'json', $context);
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\Bitly\Model\QRCodeStatic::class => false];
        }
    }
}
