<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class QRCodeMinimalNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\QRCodeMinimal::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\QRCodeMinimal::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\QRCodeMinimal();
        if (\array_key_exists('is_customized', $data) && \is_int($data['is_customized'])) {
            $data['is_customized'] = (bool) $data['is_customized'];
        }
        if (\array_key_exists('is_gs1', $data) && \is_int($data['is_gs1'])) {
            $data['is_gs1'] = (bool) $data['is_gs1'];
        }
        if (\array_key_exists('archived', $data) && \is_int($data['archived'])) {
            $data['archived'] = (bool) $data['archived'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('qrcode_id', $data)) {
            $object->setQrcodeId($data['qrcode_id']);
            unset($data['qrcode_id']);
        }
        if (\array_key_exists('group_guid', $data)) {
            $object->setGroupGuid($data['group_guid']);
            unset($data['group_guid']);
        }
        if (\array_key_exists('title', $data)) {
            $object->setTitle($data['title']);
            unset($data['title']);
        }
        if (\array_key_exists('is_customized', $data)) {
            $object->setIsCustomized($data['is_customized']);
            unset($data['is_customized']);
        }
        if (\array_key_exists('serialized_content', $data)) {
            $object->setSerializedContent($data['serialized_content']);
            unset($data['serialized_content']);
        }
        if (\array_key_exists('qr_code_type', $data)) {
            $object->setQrCodeType($data['qr_code_type']);
            unset($data['qr_code_type']);
        }
        if (\array_key_exists('long_urls', $data)) {
            $values = [];
            foreach ($data['long_urls'] as $value) {
                $values[] = $value;
            }
            $object->setLongUrls($values);
            unset($data['long_urls']);
        }
        if (\array_key_exists('bitlink_id', $data)) {
            $object->setBitlinkId($data['bitlink_id']);
            unset($data['bitlink_id']);
        }
        if (\array_key_exists('is_gs1', $data)) {
            $object->setIsGs1($data['is_gs1']);
            unset($data['is_gs1']);
        }
        if (\array_key_exists('created_by', $data)) {
            $object->setCreatedBy($data['created_by']);
            unset($data['created_by']);
        }
        if (\array_key_exists('archived', $data)) {
            $object->setArchived($data['archived']);
            unset($data['archived']);
        }
        if (\array_key_exists('created', $data)) {
            $object->setCreated($data['created']);
            unset($data['created']);
        }
        if (\array_key_exists('modified', $data)) {
            $object->setModified($data['modified']);
            unset($data['modified']);
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value_1;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('qrcodeId') && null !== $data->getQrcodeId()) {
            $dataArray['qrcode_id'] = $data->getQrcodeId();
        }
        if ($data->isInitialized('groupGuid') && null !== $data->getGroupGuid()) {
            $dataArray['group_guid'] = $data->getGroupGuid();
        }
        if ($data->isInitialized('title') && null !== $data->getTitle()) {
            $dataArray['title'] = $data->getTitle();
        }
        if ($data->isInitialized('isCustomized') && null !== $data->getIsCustomized()) {
            $dataArray['is_customized'] = $data->getIsCustomized();
        }
        if ($data->isInitialized('serializedContent') && null !== $data->getSerializedContent()) {
            $dataArray['serialized_content'] = $data->getSerializedContent();
        }
        if ($data->isInitialized('qrCodeType') && null !== $data->getQrCodeType()) {
            $dataArray['qr_code_type'] = $data->getQrCodeType();
        }
        if ($data->isInitialized('longUrls') && null !== $data->getLongUrls()) {
            $values = [];
            foreach ($data->getLongUrls() as $value) {
                $values[] = $value;
            }
            $dataArray['long_urls'] = $values;
        }
        if ($data->isInitialized('bitlinkId') && null !== $data->getBitlinkId()) {
            $dataArray['bitlink_id'] = $data->getBitlinkId();
        }
        if ($data->isInitialized('isGs1') && null !== $data->getIsGs1()) {
            $dataArray['is_gs1'] = $data->getIsGs1();
        }
        if ($data->isInitialized('createdBy') && null !== $data->getCreatedBy()) {
            $dataArray['created_by'] = $data->getCreatedBy();
        }
        if ($data->isInitialized('archived') && null !== $data->getArchived()) {
            $dataArray['archived'] = $data->getArchived();
        }
        if ($data->isInitialized('created') && null !== $data->getCreated()) {
            $dataArray['created'] = $data->getCreated();
        }
        if ($data->isInitialized('modified') && null !== $data->getModified()) {
            $dataArray['modified'] = $data->getModified();
        }
        foreach ($data as $key => $value_1) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value_1;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\QRCodeMinimal::class => false];
    }
}
