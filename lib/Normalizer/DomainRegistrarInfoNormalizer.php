<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class DomainRegistrarInfoNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\DomainRegistrarInfo::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\DomainRegistrarInfo::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\DomainRegistrarInfo();
        if (\array_key_exists('renew_auto', $data) && \is_int($data['renew_auto'])) {
            $data['renew_auto'] = (bool) $data['renew_auto'];
        }
        if (\array_key_exists('expiration_protected', $data) && \is_int($data['expiration_protected'])) {
            $data['expiration_protected'] = (bool) $data['expiration_protected'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('domain', $data)) {
            $object->setDomain($data['domain']);
            unset($data['domain']);
        }
        if (\array_key_exists('status', $data)) {
            $object->setStatus($data['status']);
            unset($data['status']);
        }
        if (\array_key_exists('renew_auto', $data)) {
            $object->setRenewAuto($data['renew_auto']);
            unset($data['renew_auto']);
        }
        if (\array_key_exists('renew_deadline', $data)) {
            $object->setRenewDeadline($data['renew_deadline']);
            unset($data['renew_deadline']);
        }
        if (\array_key_exists('expires', $data)) {
            $object->setExpires($data['expires']);
            unset($data['expires']);
        }
        if (\array_key_exists('expiration_protected', $data)) {
            $object->setExpirationProtected($data['expiration_protected']);
            unset($data['expiration_protected']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('domain') && null !== $data->getDomain()) {
            $dataArray['domain'] = $data->getDomain();
        }
        if ($data->isInitialized('status') && null !== $data->getStatus()) {
            $dataArray['status'] = $data->getStatus();
        }
        if ($data->isInitialized('renewAuto') && null !== $data->getRenewAuto()) {
            $dataArray['renew_auto'] = $data->getRenewAuto();
        }
        if ($data->isInitialized('renewDeadline') && null !== $data->getRenewDeadline()) {
            $dataArray['renew_deadline'] = $data->getRenewDeadline();
        }
        if ($data->isInitialized('expires') && null !== $data->getExpires()) {
            $dataArray['expires'] = $data->getExpires();
        }
        if ($data->isInitialized('expirationProtected') && null !== $data->getExpirationProtected()) {
            $dataArray['expiration_protected'] = $data->getExpirationProtected();
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\DomainRegistrarInfo::class => false];
    }
}
