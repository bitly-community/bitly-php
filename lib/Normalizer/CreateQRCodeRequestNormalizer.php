<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bitly\Normalizer;

use Bitly\Runtime\Normalizer\CheckArray;
use Bitly\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class CreateQRCodeRequestNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Bitly\Model\CreateQRCodeRequest::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Bitly\Model\CreateQRCodeRequest::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Bitly\Model\CreateQRCodeRequest();
        if (\array_key_exists('is_customized', $data) && \is_int($data['is_customized'])) {
            $data['is_customized'] = (bool) $data['is_customized'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('title', $data)) {
            $object->setTitle($data['title']);
            unset($data['title']);
        }
        if (\array_key_exists('group_guid', $data)) {
            $object->setGroupGuid($data['group_guid']);
            unset($data['group_guid']);
        }
        if (\array_key_exists('render_customizations', $data)) {
            $object->setRenderCustomizations($this->denormalizer->denormalize($data['render_customizations'], \Bitly\Model\QRCodeCustomizations::class, 'json', $context));
            unset($data['render_customizations']);
        }
        if (\array_key_exists('is_customized', $data)) {
            $object->setIsCustomized($data['is_customized']);
            unset($data['is_customized']);
        }
        if (\array_key_exists('qr_code_type', $data)) {
            $object->setQrCodeType($data['qr_code_type']);
            unset($data['qr_code_type']);
        }
        if (\array_key_exists('dynamic_content', $data)) {
            $object->setDynamicContent($this->denormalizer->denormalize($data['dynamic_content'], \Bitly\Model\QRCodeDynamic::class, 'json', $context));
            unset($data['dynamic_content']);
        }
        if (\array_key_exists('static_content', $data)) {
            $object->setStaticContent($this->denormalizer->denormalize($data['static_content'], \Bitly\Model\QRCodeStatic::class, 'json', $context));
            unset($data['static_content']);
        }
        if (\array_key_exists('format', $data)) {
            $object->setFormat($data['format']);
            unset($data['format']);
        }
        if (\array_key_exists('gs1', $data)) {
            $object->setGs1($this->denormalizer->denormalize($data['gs1'], \Bitly\Model\GS1Metadata::class, 'json', $context));
            unset($data['gs1']);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $object[$key] = $value;
            }
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('title') && null !== $data->getTitle()) {
            $dataArray['title'] = $data->getTitle();
        }
        if ($data->isInitialized('groupGuid') && null !== $data->getGroupGuid()) {
            $dataArray['group_guid'] = $data->getGroupGuid();
        }
        if ($data->isInitialized('renderCustomizations') && null !== $data->getRenderCustomizations()) {
            $dataArray['render_customizations'] = $this->normalizer->normalize($data->getRenderCustomizations(), 'json', $context);
        }
        if ($data->isInitialized('isCustomized') && null !== $data->getIsCustomized()) {
            $dataArray['is_customized'] = $data->getIsCustomized();
        }
        $dataArray['qr_code_type'] = $data->getQrCodeType();
        if ($data->isInitialized('dynamicContent') && null !== $data->getDynamicContent()) {
            $dataArray['dynamic_content'] = $this->normalizer->normalize($data->getDynamicContent(), 'json', $context);
        }
        if ($data->isInitialized('staticContent') && null !== $data->getStaticContent()) {
            $dataArray['static_content'] = $this->normalizer->normalize($data->getStaticContent(), 'json', $context);
        }
        if ($data->isInitialized('format') && null !== $data->getFormat()) {
            $dataArray['format'] = $data->getFormat();
        }
        if ($data->isInitialized('gs1') && null !== $data->getGs1()) {
            $dataArray['gs1'] = $this->normalizer->normalize($data->getGs1(), 'json', $context);
        }
        foreach ($data as $key => $value) {
            if (preg_match('/.*/', (string) $key)) {
                $dataArray[$key] = $value;
            }
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Bitly\Model\CreateQRCodeRequest::class => false];
    }
}
